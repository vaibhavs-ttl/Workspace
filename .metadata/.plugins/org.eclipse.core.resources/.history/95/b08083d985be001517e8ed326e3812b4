package com.ttl.customersocialapp;

import java.util.ArrayList;

import com.ttl.helper.DatabaseHandler;
import com.ttl.model.Service_Booking_History_Child;
import com.ttl.model.Service_Booking_History_Parent;

import android.app.Fragment;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseExpandableListAdapter;
import android.widget.ExpandableListView;
import android.widget.ExpandableListView.OnGroupExpandListener;
import android.widget.ImageView;
import android.widget.TextView;

public class ServiceBookingHistoryFragment extends Fragment {

	  ExpandableListView exlv;
	  private ArrayList<Service_Booking_History_Parent> parents;
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		 View v = inflater.inflate(R.layout.fragment_servicebookinghistory, container, false);

			exlv = (ExpandableListView)v.findViewById(R.id.list);
			
			exlv.setOnGroupExpandListener(new OnGroupExpandListener() {
				int previousGroup = -1;

				@Override
				public void onGroupExpand(int groupPosition) {
					 if(groupPosition != previousGroup)
			                exlv.collapseGroup(previousGroup);
			            previousGroup = groupPosition;
					
				}
			});
			
					
			//  buildDummyData();
		       buildData();
		        // Adding ArrayList data to ExpandableListView values
		    //    loadHosts(dummyList);

		 return v;
	}
	private void loadHosts(final ArrayList<Service_Booking_History_Parent> newParents)
    {
        if (newParents == null)
            return;
         
        parents = newParents;
         
        // Check for ExpandableListAdapter object
       
             //Create ExpandableListAdapter Object
            final MyExpandableListAdapter mAdapter = new MyExpandableListAdapter();
             
            // Set Adapter to ExpandableList Adapter
            exlv.setAdapter(mAdapter);
        }
      
           /*  // Refresh ExpandableListView data 
        	exlv.deferNotifyDataSetChanged();*/
    

		private void buildData()
	    {
	        // Creating ArrayList of type parent class to store parent class objects
	     //  ArrayList<Service_Booking_History_Parent> list = new ArrayList<Service_Booking_History_Parent>();
			DatabaseHandler db = new DatabaseHandler(getActivity());
	         ArrayList<Service_Booking_History_Parent> list = db.getAllServices();
	         for (int i = 0; i < list.size(); i++) {
	        	 Service_Booking_History_Child child = new Service_Booking_History_Child();
		         list.get(i).setChildren(new ArrayList<Service_Booking_History_Child>());
	             child.setKms(list.get(i).getKms());
	             child.setModel(list.get(i).getModel());
	             child.setDate_of_booking(list.get(i).getComplaint_date());
	             child.setBooked_for_time(list.get(i).getBooked_for_time());
	             child.setBooked_for_dealer(list.get(i).getBooked_for_dealer());
	             child.setService_type(list.get(i).getService_type());
	             child.setMsv_flag(list.get(i).getMsv_flag());
	             list.get(i).getChildren().add(child);
			}
	         
	         
	         loadHosts(list);
	       
	}
	
	private class MyExpandableListAdapter extends BaseExpandableListAdapter
    {
         
 
        private LayoutInflater inflater;
 
        public MyExpandableListAdapter()
        {
            // Create Layout Inflator
            inflater = LayoutInflater.from(getActivity());
        }
     
         
        // This Function used to inflate parent rows view
         
        @Override
        public View getGroupView(int groupPosition, boolean isExpanded,View convertView, ViewGroup parentView)
        {
            final Service_Booking_History_Parent parent = parents.get(groupPosition);
             
            // Inflate grouprow.xml file for parent rows
            convertView = inflater.inflate(R.layout.service_booking_parent_row, parentView, false); 
             
            // Get grouprow.xml file elements and set values
            
            ((TextView) convertView.findViewById(R.id.txtcomp_sr_no)).setText(parent.getComplaint_sr_no());
            ((TextView) convertView.findViewById(R.id.txtvehicle_reg_no)).setText(parent.getComplaint_reg_no());
            ((TextView) convertView.findViewById(R.id.txt_date)).setText(parent.getComplaint_date());
	          
            if(isExpanded)
            {
            	ImageView img =(ImageView) convertView.findViewById(R.id.imgarrow);
            	img.setBackgroundResource(R.drawable.downarrow);
            }
            return convertView;
        }
 
         
        // This Function used to inflate child rows view
        @Override
        public View getChildView(int groupPosition, int childPosition, boolean isLastChild, 
                View convertView, ViewGroup parentView)
        {
            final Service_Booking_History_Parent parent = parents.get(groupPosition);
            final Service_Booking_History_Child child = parent.getChildren().get(childPosition);
             
            // Inflate childrow.xml file for child rows
            convertView = inflater.inflate(R.layout.service_booking_child_row, parentView, false);
             
            // Get childrow.xml file elements and set values
            ((TextView) convertView.findViewById(R.id.txtdec_kms)).setText(child.getKms());
            ((TextView) convertView.findViewById(R.id.txtdec_models)).setText(child.getModel());
            ((TextView) convertView.findViewById(R.id.txtdec_dateofbooking)).setText(child.getDate_of_booking());
            ((TextView) convertView.findViewById(R.id.txtdec_bookfortime)).setText(child.getBooked_for_time());
            ((TextView) convertView.findViewById(R.id.txtdec_bookfordealer)).setText(child.getBooked_for_dealer());
            ((TextView) convertView.findViewById(R.id.txtdec_servicetype)).setText(child.getService_type());
            ((TextView) convertView.findViewById(R.id.txtdec_msgflag)).setText(child.getMsv_flag());
         
            
         
            return convertView;
        }
 
         
        @Override
        public Object getChild(int groupPosition, int childPosition)
        {
            //Log.i("Childs", groupPosition+"=  getChild =="+childPosition);
            return parents.get(groupPosition).getChildren().get(childPosition);
        }
 
        //Call when child row clicked
        @Override
        public long getChildId(int groupPosition, int childPosition)
        {
            /****** When Child row clicked then this function call *******/
            
        	/* if( ChildClickStatus!=childPosition)
             {
                ChildClickStatus = childPosition;
                 
                Toast.makeText(getApplicationContext(), "Parent :"+groupPosition + " Child :"+childPosition , 
                         Toast.LENGTH_LONG).show();
             }  */
              
            return childPosition;
        }
 
        @Override
        public int getChildrenCount(int groupPosition)
        {
            int size=0;
            if(parents.get(groupPosition).getChildren()!=null)
                size = parents.get(groupPosition).getChildren().size();
            return size;
        }
      
         
        @Override
        public Object getGroup(int groupPosition)
        {
            Log.i("Parent", groupPosition+"=  getGroup ");
             
            return parents.get(groupPosition);
        }
 
        @Override
        public int getGroupCount()
        {
            return parents.size();
        }
 
        //Call when parent row clicked
        @Override
        public long getGroupId(int groupPosition)
        {
        	/*if(groupPosition==2 && ParentClickStatus!=groupPosition){
                 
                //Alert to user
                Toast.makeText(getApplicationContext(), "Parent :"+groupPosition , 
                        Toast.LENGTH_LONG).show();
            }
             
            ParentClickStatus=groupPosition;
            if(ParentClickStatus==0)
                ParentClickStatus=-1;*/
             
            return groupPosition;
      
        }
 
        @Override
        public void notifyDataSetChanged()
        {
            // Refresh List rows
            super.notifyDataSetChanged();
        }
 
        @Override
        public boolean isEmpty()
        {
            return ((parents == null) || parents.isEmpty());
        }
 
        @Override
        public boolean isChildSelectable(int groupPosition, int childPosition)
        {
            return true;
        }
 
        @Override
        public boolean hasStableIds()
        {
            return true;
        }
 
        @Override
        public boolean areAllItemsEnabled()
        {
            return true;
        }


    }	
	
}
