package com.ttl.customersocialapp;
import java.util.ArrayList;

import com.ttl.helper.DatabaseHandler;
import com.ttl.model.Complaint_Registered_Child;
import com.ttl.model.Complaint_Registered_Parent;
import com.ttl.model.Service_Booking_History_Child;
import com.ttl.model.Service_Booking_History_Parent;

import android.app.Fragment;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseExpandableListAdapter;
import android.widget.ExpandableListView;
import android.widget.ExpandableListView.OnGroupExpandListener;
import android.widget.ImageView;
import android.widget.TextView;


public class ComplaintRegisteredFragment extends Fragment {

	
	  ExpandableListView exlv;
	  private ArrayList<Complaint_Registered_Parent> parents;
	  @Override
		public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
			// TODO Auto-generated method stub
			 View v = inflater.inflate(R.layout.fragment_complaintregestered, container, false);

				exlv = (ExpandableListView)v.findViewById(R.id.list);
				
				exlv.setOnGroupExpandListener(new OnGroupExpandListener() {
					int previousGroup = -1;

					@Override
					public void onGroupExpand(int groupPosition) {
						 if(groupPosition != previousGroup)
				                exlv.collapseGroup(previousGroup);
				            previousGroup = groupPosition;
						
					}
				});
			//	parents = buildDummyData();
						
				//  buildDummyData();
			      buildData();
			        // Adding ArrayList data to ExpandableListView values
			    //    loadHosts(dummyList);

			 return v;
		}
	  
	  
		private void buildData()
	    {
	        // Creating ArrayList of type parent class to store parent class objects
	     //  ArrayList<Service_Booking_History_Parent> list = new ArrayList<Service_Booking_History_Parent>();
			DatabaseHandler db = new DatabaseHandler(getActivity());
	         ArrayList<Complaint_Registered_Parent> list = db.getAllComplaints();
	         
	         
	         for (int i = 0; i < list.size(); i++) {
	        	 String log = " SR: " + list.get(i).complaint_no+ " ,REG: " + list.get(i).complaint_reg_no+ " ,DATE: " + list.get(i).complaint_date;
		            Log.i("buildData", log);
	        	 
	        	 Complaint_Registered_Child child = new Complaint_Registered_Child();
		         list.get(i).setChildren(new ArrayList<Complaint_Registered_Child>());
		         
		         child.setDate(list.get(i).getComplaint_date());
		         child.setModel(list.get(i).getModel());
		         child.setPrimary_area(list.get(i).getPrimary_area());
		         child.setSub_area(list.get(i).getSub_area());
		         child.setProblem_area(list.get(i).getProblem_area());
	             
	             list.get(i).getChildren().add(child);
			}
	         
	         
	         loadHosts(list);
	       
	}
	
	 private void loadHosts(final ArrayList<Complaint_Registered_Parent> newParents)
	    {
	        if (newParents == null)
	            return;
	         
	        parents = newParents;
	         
	        // Check for ExpandableListAdapter object
	       
	             //Create ExpandableListAdapter Object
	            final MyExpandableListAdapter mAdapter = new MyExpandableListAdapter();
	             
	            // Set Adapter to ExpandableList Adapter
	            exlv.setAdapter(mAdapter);
	        }
	      
	           /*  // Refresh ExpandableListView data 
	        	exlv.deferNotifyDataSetChanged();*/
	        
	
	 

		private ArrayList<Complaint_Registered_Parent> buildDummyData()
	    {
	        // Creating ArrayList of type parent class to store parent class objects
	        final ArrayList<Complaint_Registered_Parent> list = new ArrayList<Complaint_Registered_Parent>();
	        
	        for (int i = 0; i < 20; i++)
	        {
	            //Create parent class object
	            final Complaint_Registered_Parent parent = new Complaint_Registered_Parent();
	             
	              // Set values in parent class object
	                  /*if(i==1)
	                  {*/
	                      parent.setComplaint_no("ABD123");
	                      parent.setComplaint_reg_no("MH19AF1266");
	                      parent.setComplaint_date("08-01-2016");
	                      parent.setChildren(new ArrayList<Complaint_Registered_Child>());
	                       
	                      // Create Child class object 
	                      final Complaint_Registered_Child child = new Complaint_Registered_Child();
	                        child.setDate("08-01-2016");
	                        child.setModel("SAFARI");
	                        child.setPrimary_area("Stearing");
	                        child.setSub_area("Bend");
	                        child.setProblem_area("Please rate the time taken since you arrived till handed over the car to Service Advisor");
	                         
	                        //Add Child class object to parent class object
	                        parent.getChildren().add(child);
	                  //  }
	                  list.add(parent);
	                  loadHosts(list);
	        }
		return list;
	}
		
		private class MyExpandableListAdapter extends BaseExpandableListAdapter
	    {
	         
	 
	        private LayoutInflater inflater;
	 
	        public MyExpandableListAdapter()
	        {
	            // Create Layout Inflator
	            inflater = LayoutInflater.from(getActivity());
	        }
	     
	         
	        // This Function used to inflate parent rows view
	         
	        @Override
	        public View getGroupView(int groupPosition, boolean isExpanded,View convertView, ViewGroup parentView)
	        {
	            final Complaint_Registered_Parent parent = parents.get(groupPosition);
	             
	            // Inflate grouprow.xml file for parent rows
	            convertView = inflater.inflate(R.layout.complaint_registered_parent_row, parentView, false); 
	             
	            // Get grouprow.xml file elements and set values
	            
	            ((TextView) convertView.findViewById(R.id.txtcomp_no)).setText(parent.getComplaint_no());
	            ((TextView) convertView.findViewById(R.id.txtvehicle_reg_no)).setText(parent.getComplaint_reg_no());
	            ((TextView) convertView.findViewById(R.id.txt_date)).setText(parent.getComplaint_date());
		          
	            if(isExpanded)
	            {
	            	ImageView img =(ImageView) convertView.findViewById(R.id.imgarrow);
	            	img.setBackgroundResource(R.drawable.downarrow);
	            }
	            return convertView;
	        }
	 
	         
	        // This Function used to inflate child rows view
	        @Override
	        public View getChildView(int groupPosition, int childPosition, boolean isLastChild, 
	                View convertView, ViewGroup parentView)
	        {
	            final Complaint_Registered_Parent parent = parents.get(groupPosition);
	            final Complaint_Registered_Child child = parent.getChildren().get(childPosition);
	             
	            // Inflate childrow.xml file for child rows
	            convertView = inflater.inflate(R.layout.complaint_registered_child_row, parentView, false);
	             
	            // Get childrow.xml file elements and set values
	            ((TextView) convertView.findViewById(R.id.txtdec_date)).setText(child.getDate());
	            ((TextView) convertView.findViewById(R.id.txtdec_model)).setText(child.getModel());
	            ((TextView) convertView.findViewById(R.id.txtdec_prim_area)).setText(child.getPrimary_area());
	            ((TextView) convertView.findViewById(R.id.txtdec_subarea)).setText(child.getSub_area());
	            ((TextView) convertView.findViewById(R.id.txtdec_prob_area)).setText(child.getProblem_area());
	            
	         
	            return convertView;
	        }
	 
	         
	        @Override
	        public Object getChild(int groupPosition, int childPosition)
	        {
	            //Log.i("Childs", groupPosition+"=  getChild =="+childPosition);
	            return parents.get(groupPosition).getChildren().get(childPosition);
	        }
	 
	        //Call when child row clicked
	        @Override
	        public long getChildId(int groupPosition, int childPosition)
	        {
	            /****** When Child row clicked then this function call *******/
	            
	        	/* if( ChildClickStatus!=childPosition)
	             {
	                ChildClickStatus = childPosition;
	                 
	                Toast.makeText(getApplicationContext(), "Parent :"+groupPosition + " Child :"+childPosition , 
	                         Toast.LENGTH_LONG).show();
	             }  */
	              
	            return childPosition;
	        }
	 
	        @Override
	        public int getChildrenCount(int groupPosition)
	        {
	            int size=0;
	            if(parents.get(groupPosition).getChildren()!=null)
	                size = parents.get(groupPosition).getChildren().size();
	            return size;
	        }
	      
	         
	        @Override
	        public Object getGroup(int groupPosition)
	        {
	            Log.i("Parent", groupPosition+"=  getGroup ");
	             
	            return parents.get(groupPosition);
	        }
	 
	        @Override
	        public int getGroupCount()
	        {
	            return parents.size();
	        }
	 
	        //Call when parent row clicked
	        @Override
	        public long getGroupId(int groupPosition)
	        {
	        	/*if(groupPosition==2 && ParentClickStatus!=groupPosition){
	                 
	                //Alert to user
	                Toast.makeText(getApplicationContext(), "Parent :"+groupPosition , 
	                        Toast.LENGTH_LONG).show();
	            }
	             
	            ParentClickStatus=groupPosition;
	            if(ParentClickStatus==0)
	                ParentClickStatus=-1;*/
	             
	            return groupPosition;
	      
	        }
	 
	        @Override
	        public void notifyDataSetChanged()
	        {
	            // Refresh List rows
	            super.notifyDataSetChanged();
	        }
	 
	        @Override
	        public boolean isEmpty()
	        {
	            return ((parents == null) || parents.isEmpty());
	        }
	 
	        @Override
	        public boolean isChildSelectable(int groupPosition, int childPosition)
	        {
	            return true;
	        }
	 
	        @Override
	        public boolean hasStableIds()
	        {
	            return true;
	        }
	 
	        @Override
	        public boolean areAllItemsEnabled()
	        {
	            return true;
	        }


	    }	
		
		
}
