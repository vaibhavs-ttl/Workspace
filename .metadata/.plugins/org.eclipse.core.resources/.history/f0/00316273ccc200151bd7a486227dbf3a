<<<<<<< HEAD
package com.ttl.customersocialapp;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.app.Fragment;
import android.app.FragmentManager;
import android.app.FragmentTransaction;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.preference.PreferenceManager;
import android.provider.MediaStore;
import android.provider.MediaStore.MediaColumns;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnKeyListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.Toast;

public class DocumentUploadFragment extends Fragment implements
		OnItemSelectedListener {
	public DocumentUploadFragment() {
	}

	View rootView;
	final int CAMERA_CAPTURE = 1, SELECT_FILE = 2;
	LinearLayout license, insurance, puc, passport, pancard, voterid, aadhar,
			vehicalpicture, others;
	public static final String license_path = Environment
			.getExternalStorageDirectory().getAbsolutePath()
			+ "/CustomerSocialAppDocument/license/";
	public static final String insurance_path = Environment
			.getExternalStorageDirectory().getAbsolutePath()
			+ "/CustomerSocialAppDocument/insurance/";
	public static final String puc_path = Environment
			.getExternalStorageDirectory().getAbsolutePath()
			+ "/CustomerSocialAppDocument/puc/";
	public static final String passport_path = Environment
			.getExternalStorageDirectory().getAbsolutePath()
			+ "/CustomerSocialAppDocument/passport/";
	public static final String pancard_path = Environment
			.getExternalStorageDirectory().getAbsolutePath()
			+ "/CustomerSocialAppDocument/pancard/";
	public static final String voterid_path = Environment
			.getExternalStorageDirectory().getAbsolutePath()
			+ "/CustomerSocialAppDocument/voterid/";
	public static final String aadhar_path = Environment
			.getExternalStorageDirectory().getAbsolutePath()
			+ "/CustomerSocialAppDocument/aadhar/";
	public static final String vehicalpicture_path = Environment
			.getExternalStorageDirectory().getAbsolutePath()
			+ "/CustomerSocialAppDocument/vehicalpicture/";
	public static final String others_path = Environment
			.getExternalStorageDirectory().getAbsolutePath()
			+ "/CustomerSocialAppDocument/others/";
	File[] files;
	Spinner regno;
	private String[] regstationno = { "MH 20 U 7897", "MH 21 U 7897",
			"MH 22 U 7897" };
	LinearLayout lindocs;
	ImageView imgdoc, imgcancle, imgdelete, imgadd;
	String picturePath, picturePath1,picturePath2,picturePath3,savepancard,savevoterid,saveaadhar,savevehicalpicture,saveothers;
	SharedPreferences settings;
	boolean licensechk = false, insurancechk = false, pucchk=false,passportchk=false,panchk=false,voteridchk=false,aadharchk=false,vehicalpicturechk=false,otherschk=false;
	Editor edit;
	RelativeLayout relspinner;

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {

		rootView = inflater.inflate(R.layout.fragment_documentupload,
				container, false);
		relspinner=(RelativeLayout)rootView.findViewById(R.id.relspinner);
		relspinner.setVisibility(View.GONE);
		settings = PreferenceManager.getDefaultSharedPreferences(rootView
				.getContext());
		edit = settings.edit();

		File licensedir = new File(license_path);
		licensedir.mkdirs();
		File insurancedir = new File(insurance_path);
		insurancedir.mkdirs();
		File pucdir = new File(puc_path);
		pucdir.mkdirs();
		File passportdir = new File(passport_path);
		passportdir.mkdirs();
		File pancarddir = new File(pancard_path);
		pancarddir.mkdirs();
		File voteriddir = new File(voterid_path);
		voteriddir.mkdirs();
		File aadhardir = new File(aadhar_path);
		aadhardir.mkdirs();
		File vehicalpituredir = new File(vehicalpicture_path);
		vehicalpituredir.mkdirs();
		File othersdir = new File(others_path);
		othersdir.mkdirs();
		
		regno = (Spinner) rootView.findViewById(R.id.spnregno);
		lindocs = (LinearLayout) rootView.findViewById(R.id.lindocs);
		imgdoc = (ImageView) rootView.findViewById(R.id.imgdoc);

		ArrayAdapter<String> sp_adapter = new ArrayAdapter<String>(
				getActivity(), R.layout.spinnertext, regstationno);
		sp_adapter.setDropDownViewResource(R.layout.spinner_selector);
		regno.setAdapter(sp_adapter);
		regno.setOnItemSelectedListener(this);
		license = (LinearLayout) rootView.findViewById(R.id.btnlicense);
		insurance = (LinearLayout) rootView.findViewById(R.id.btninsurance);
		puc = (LinearLayout) rootView.findViewById(R.id.btnpuc);
		passport = (LinearLayout) rootView.findViewById(R.id.btnpassport);
		pancard = (LinearLayout) rootView.findViewById(R.id.btnpancard);
		voterid = (LinearLayout) rootView.findViewById(R.id.btnvoterid);
		aadhar = (LinearLayout) rootView.findViewById(R.id.btnaadhar);
		vehicalpicture = (LinearLayout) rootView
				.findViewById(R.id.btnvehicalpicture);
		others = (LinearLayout) rootView.findViewById(R.id.btnothers);

		license.setOnClickListener(buttonClickListener);
		insurance.setOnClickListener(buttonClickListener);
		puc.setOnClickListener(buttonClickListener);
		passport.setOnClickListener(buttonClickListener);
		pancard.setOnClickListener(buttonClickListener);
		voterid.setOnClickListener(buttonClickListener);
		aadhar.setOnClickListener(buttonClickListener);
		vehicalpicture.setOnClickListener(buttonClickListener);
		others.setOnClickListener(buttonClickListener);

		imgcancle = (ImageView) rootView.findViewById(R.id.imgcancle);
		imgcancle.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				lindocs.setVisibility(View.VISIBLE);
				relspinner.setVisibility(View.GONE);
			}
		});
		imgdelete = (ImageView) rootView.findViewById(R.id.imgdelete);
		imgdelete.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
						getActivity());
				alertDialogBuilder
						.setMessage("Are you sure,You Want Delete Document");

				alertDialogBuilder.setPositiveButton("yes",
						new DialogInterface.OnClickListener() {
							@Override
							public void onClick(DialogInterface arg0, int arg1) {
								imgadd.setVisibility(View.VISIBLE);
								if (licensechk == true) {
									settings.edit().remove("profilePic")
											.commit();
								} else if (insurancechk == true) {
									settings.edit().remove("insurance")
											.commit();
								} else if (pucchk==true) {
									settings.edit().remove("puc")
									.commit();
								} else if (passportchk==true) {
									settings.edit().remove("passport")
									.commit();
								} else if (panchk==true) {
									settings.edit().remove("pancard")
									.commit();
								} else if (voteridchk==true) {
									settings.edit().remove("voterid")
									.commit();
								}else if (aadharchk==true) {
									settings.edit().remove("aadhar").commit();
								}else if (vehicalpicturechk==true) {
									settings.edit().remove("vehicalpicture").commit();
								}else if (otherschk==true) {
									settings.edit().remove("others").commit();
								}

								imgdoc.setImageBitmap(getScaledBitmap(null, 0,
										0));
							}
						});

				alertDialogBuilder.setNegativeButton("No",
						new DialogInterface.OnClickListener() {
							@Override
							public void onClick(DialogInterface dialog,
									int which) {
								getActivity().finish();
							}
						});

				AlertDialog alertDialog = alertDialogBuilder.create();
				alertDialog.show();

			}
		});
		imgadd = (ImageView) rootView.findViewById(R.id.imgadd);
		imgadd.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub

				selectImage();
			}
		});
		imgadd.setVisibility(View.GONE);
		
		rootView.getRootView().setFocusableInTouchMode(true);
		rootView.getRootView().requestFocus();

		rootView.getRootView().setOnKeyListener(new OnKeyListener() {
				@Override
				public boolean onKey(View v, int keyCode, KeyEvent event) {
					if (event.getAction() == KeyEvent.ACTION_DOWN) {
						if (keyCode == KeyEvent.KEYCODE_BACK) {						
							FragmentManager fm = getFragmentManager();
							FragmentTransaction tx = fm.beginTransaction();
							tx.replace(R.id.frame_container, new HomeFragment())
									.commit();
							return true;
						}
					}
					return false;
				}
			});
		return rootView;
	}

	final OnClickListener buttonClickListener = new OnClickListener() {

		@Override
		public void onClick(View v) {
			// images = (ImageView)findViewById(R.id.monthImageDisplay);
			// imagesTest = (ImageView)findViewById(R.id.imagesTest);
			switch (v.getId()) {

			case R.id.btnlicense:
				licensechk = true;
				picturePath = settings.getString("profilePic", "");

				if (picturePath == null || picturePath.length() == 0
						|| picturePath.equalsIgnoreCase("")) {
					imgadd.setVisibility(View.GONE);

					selectImage();

				} else {

					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(getScaledBitmap(picturePath, 0, 0));
				}
				break;

			case R.id.btninsurance:
				relspinner.setVisibility(View.VISIBLE);
				insurancechk = true;
				licensechk = false;
				picturePath1 = settings.getString("insurance", "");

				if (picturePath1 == null || picturePath1.length() == 0
						|| picturePath1.equalsIgnoreCase("")) {
					imgadd.setVisibility(View.GONE);

					selectImage();

				} else {

					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(getScaledBitmap(picturePath1, 0, 0));
				}

				break;
			case R.id.btnpuc:
				relspinner.setVisibility(View.VISIBLE);
				pucchk = true;
				licensechk = false;
				insurancechk = false;
				picturePath2 = settings.getString("puc", "");

				if (picturePath2 == null || picturePath2.length() == 0
						|| picturePath2.equalsIgnoreCase("")) {
					imgadd.setVisibility(View.GONE);

					selectImage();

				} else {

					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(getScaledBitmap(picturePath2, 0, 0));
				}

				break;
			case R.id.btnpassport:
				passportchk=true;
				pucchk = false;
				licensechk = false;
				insurancechk = false;
				picturePath3 = settings.getString("passport", "");

				if (picturePath3 == null || picturePath3.length() == 0
						|| picturePath3.equalsIgnoreCase("")) {
					imgadd.setVisibility(View.GONE);

					selectImage();

				} else {

					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(getScaledBitmap(picturePath3, 0, 0));
				}

				break;
			case R.id.btnpancard:
				panchk=true;
				passportchk=false;
				pucchk = false;
				licensechk = false;
				insurancechk = false;
				savepancard = settings.getString("pancard", "");

				if (savepancard == null || savepancard.length() == 0
						|| savepancard.equalsIgnoreCase("")) {
					imgadd.setVisibility(View.GONE);
					selectImage();
				} else {
					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(getScaledBitmap(savepancard, 0, 0));
				}

				break;
			case R.id.btnvoterid:
				voteridchk=true;
				panchk=false;
				passportchk=false;
				pucchk = false;
				licensechk = false;
				insurancechk = false;
				savevoterid = settings.getString("voterid", "");

				if (savevoterid == null || savevoterid.length() == 0
						|| savevoterid.equalsIgnoreCase("")) {
					imgadd.setVisibility(View.GONE);
					selectImage();
				} else {
					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(getScaledBitmap(savevoterid, 0, 0));
				}

				break;
			case R.id.btnaadhar:
				aadharchk=true;
				voteridchk=false;
				panchk=false;
				passportchk=false;
				pucchk = false;
				licensechk = false;
				insurancechk = false;
				saveaadhar = settings.getString("aadhar", "");

				if (saveaadhar == null || saveaadhar.length() == 0
						|| saveaadhar.equalsIgnoreCase("")) {
					imgadd.setVisibility(View.GONE);
					selectImage();
				} else {
					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(getScaledBitmap(saveaadhar, 0, 0));
				}

				break;
			case R.id.btnvehicalpicture:
				relspinner.setVisibility(View.VISIBLE);
				vehicalpicturechk=true;
				aadharchk=false;
				voteridchk=false;
				panchk=false;
				passportchk=false;
				pucchk = false;
				licensechk = false;
				insurancechk = false;
				savevehicalpicture = settings.getString("vehicalpicture", "");

				if (savevehicalpicture == null || savevehicalpicture.length() == 0
						|| savevehicalpicture.equalsIgnoreCase("")) {
					imgadd.setVisibility(View.GONE);
					selectImage();
				} else {
					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(getScaledBitmap(savevehicalpicture, 0, 0));
				}

				break;
			case R.id.btnothers:
				otherschk=true;
				vehicalpicturechk=false;
				aadharchk=false;
				voteridchk=false;
				panchk=false;
				passportchk=false;
				pucchk = false;
				licensechk = false;
				insurancechk = false;
				saveothers = settings.getString("others", "");

				if (saveothers == null || saveothers.length() == 0
						|| saveothers.equalsIgnoreCase("")) {
					imgadd.setVisibility(View.GONE);
					selectImage();
				} else {
					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(getScaledBitmap(saveothers, 0, 0));
				}

				break;

			}

		}

	};

	protected Bitmap getScaledBitmap(String picturePath, int width, int height) {
		// TODO Auto-generated method stub
		BitmapFactory.Options sizeOptions = null;
		try {
			sizeOptions = new BitmapFactory.Options();
			sizeOptions.inJustDecodeBounds = true;
			BitmapFactory.decodeFile(picturePath, sizeOptions);

			int inSampleSize = calculateInSampleSize(sizeOptions, width, height);

			sizeOptions.inJustDecodeBounds = false;
			sizeOptions.inSampleSize = inSampleSize;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return BitmapFactory.decodeFile(picturePath, sizeOptions);
	}

	private int calculateInSampleSize(Options sizeOptions, int width, int height) {
		// TODO Auto-generated method stub
		return 0;
	}

	private List<String> RetriveCapturedImagePath() {
		// TODO Auto-generated method stub
		List<String> tFileList = new ArrayList<String>();
		File f = new File(license_path);
		if (f.exists()) {
			files = f.listFiles();
			Arrays.sort(files);

			for (int i = 0; i < files.length; i++) {
				File file = files[i];
				if (file.isDirectory())
					continue;
				tFileList.add(file.getPath());
			}
		}
		return tFileList;
	}

	protected void selectImage() {
		// TODO Auto-generated method stub
		final CharSequence[] items = { "Take Photo", "Choose from Gallery",
				"Cancel" };
		imgadd.setVisibility(View.GONE);
		AlertDialog.Builder builder = new AlertDialog.Builder(
				rootView.getContext());
		builder.setTitle("Add Photo!");
		builder.setItems(items, new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int item) {
				if (items[item].equals("Take Photo")) {
					Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
					startActivityForResult(intent, CAMERA_CAPTURE);
				} else if (items[item].equals("Choose from Gallery")) {
					Intent intent = new Intent(
							Intent.ACTION_PICK,
							android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
					intent.setType("image/*");
					startActivityForResult(
							Intent.createChooser(intent, "Select File"),
							SELECT_FILE);
				} else if (items[item].equals("Cancel")) {
					dialog.dismiss();
				}
			}
		});
		builder.show();

	}

	@SuppressLint("NewApi")
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		int RESULT_OK = -1;
		if (resultCode == RESULT_OK) {
			// user is returning from capturing an image using the camera
			if (requestCode == CAMERA_CAPTURE) {

				Bundle extras = data.getExtras();
				Bitmap thePic = extras.getParcelable("data");
				if (licensechk == true) {

					// String imgcurTime = dateFormat.format(new
					// java.util.Date());

					String _path = license_path + System.currentTimeMillis()
							+ ".jpg";

					try {
						FileOutputStream out = new FileOutputStream(_path);
						thePic.compress(Bitmap.CompressFormat.JPEG, 90, out);
						out.close();
					} catch (FileNotFoundException e) {
						e.getMessage();
					} catch (IOException e) {
						e.printStackTrace();
					}
					edit.putString("profilePic", _path);

					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(thePic);

				} else if (insurancechk == true) {

					// String imgcurTime = dateFormat.format(new
					// java.util.Date());

					String _insurancepath = insurance_path
							+ System.currentTimeMillis() + ".jpg";

					try {
						FileOutputStream out = new FileOutputStream(
								_insurancepath);
						thePic.compress(Bitmap.CompressFormat.JPEG, 90, out);
						out.close();
					} catch (FileNotFoundException e) {
						e.getMessage();
					} catch (IOException e) {
						e.printStackTrace();
					}
					edit.putString("insurance", _insurancepath);

					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(thePic);

				} else if (pucchk==true) {

					// String imgcurTime = dateFormat.format(new
					// java.util.Date());

					String _pucpath = puc_path
							+ System.currentTimeMillis() + ".jpg";

					try {
						FileOutputStream out = new FileOutputStream(
								_pucpath);
						thePic.compress(Bitmap.CompressFormat.JPEG, 90, out);
						out.close();
					} catch (FileNotFoundException e) {
						e.getMessage();
					} catch (IOException e) {
						e.printStackTrace();
					}
					edit.putString("puc", _pucpath);

					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(thePic);
					
				} else if (passportchk==true) {

					// String imgcurTime = dateFormat.format(new
					// java.util.Date());

					String _passportpath = passport_path
							+ System.currentTimeMillis() + ".jpg";

					try {
						FileOutputStream out = new FileOutputStream(
								_passportpath);
						thePic.compress(Bitmap.CompressFormat.JPEG, 90, out);
						out.close();
					} catch (FileNotFoundException e) {
						e.getMessage();
					} catch (IOException e) {
						e.printStackTrace();
					}
					edit.putString("passport", _passportpath);

					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(thePic);
				} else if (panchk==true) {
					// String imgcurTime = dateFormat.format(new
					// java.util.Date());

					String _passportpath = pancard_path
							+ System.currentTimeMillis() + ".jpg";

					try {
						FileOutputStream out = new FileOutputStream(
								_passportpath);
						thePic.compress(Bitmap.CompressFormat.JPEG, 90, out);
						out.close();
					} catch (FileNotFoundException e) {
						e.getMessage();
					} catch (IOException e) {
						e.printStackTrace();
					}
					edit.putString("pancard", _passportpath);

					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(thePic);
				}else if (voteridchk==true) {
					// String imgcurTime = dateFormat.format(new
					// java.util.Date());

					String _passportpath = voterid_path
							+ System.currentTimeMillis() + ".jpg";

					try {
						FileOutputStream out = new FileOutputStream(
								_passportpath);
						thePic.compress(Bitmap.CompressFormat.JPEG, 90, out);
						out.close();
					} catch (FileNotFoundException e) {
						e.getMessage();
					} catch (IOException e) {
						e.printStackTrace();
					}
					edit.putString("voterid", _passportpath);

					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(thePic);
				}else if (aadharchk==true) {
					// String imgcurTime = dateFormat.format(new
					// java.util.Date());

					String _passportpath = aadhar_path
							+ System.currentTimeMillis() + ".jpg";

					try {
						FileOutputStream out = new FileOutputStream(
								_passportpath);
						thePic.compress(Bitmap.CompressFormat.JPEG, 90, out);
						out.close();
					} catch (FileNotFoundException e) {
						e.getMessage();
					} catch (IOException e) {
						e.printStackTrace();
					}
					edit.putString("aadhar", _passportpath);

					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(thePic);
				}else if (vehicalpicturechk==true) {
					// String imgcurTime = dateFormat.format(new
					// java.util.Date());

					String _passportpath = vehicalpicture_path
							+ System.currentTimeMillis() + ".jpg";

					try {
						FileOutputStream out = new FileOutputStream(
								_passportpath);
						thePic.compress(Bitmap.CompressFormat.JPEG, 90, out);
						out.close();
					} catch (FileNotFoundException e) {
						e.getMessage();
					} catch (IOException e) {
						e.printStackTrace();
					}
					edit.putString("vehicalpicture", _passportpath);

					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(thePic);
				}else if (otherschk==true) {
					// String imgcurTime = dateFormat.format(new
					// java.util.Date());

					String _passportpath = others_path
							+ System.currentTimeMillis() + ".jpg";

					try {
						FileOutputStream out = new FileOutputStream(
								_passportpath);
						thePic.compress(Bitmap.CompressFormat.JPEG, 90, out);
						out.close();
					} catch (FileNotFoundException e) {
						e.getMessage();
					} catch (IOException e) {
						e.printStackTrace();
					}
					edit.putString("others", _passportpath);

					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(thePic);
				}
				
				
				
				edit.commit();
			} else if (requestCode == SELECT_FILE) {
				onSelectFromGalleryResult(data);

			}
		}
	}

	@SuppressLint("NewApi")
	private void onSelectFromGalleryResult(Intent data) {
		// TODO Auto-generated method stub
		Uri selectedImageUri = data.getData();
		String[] projection = { MediaColumns.DATA };
		/*
		 * Cursor cursor = managedQuery(selectedImageUri, projection, null,
		 * null, null);
		 */
		Cursor cursor = getActivity().getContentResolver().query(
				selectedImageUri, projection, null, null, null);
		int column_index = cursor.getColumnIndexOrThrow(MediaColumns.DATA);
		cursor.moveToFirst();
		lindocs.setVisibility(View.GONE);
		String selectedImagePath = cursor.getString(column_index);
		if (licensechk == true) {
			SharedPreferences shre = PreferenceManager
					.getDefaultSharedPreferences(getActivity());
			Editor edit = shre.edit();
			edit.putString("profilePic", selectedImagePath);
			edit.commit();
			Bitmap bm;
			BitmapFactory.Options options = new BitmapFactory.Options();
			options.inJustDecodeBounds = true;
			BitmapFactory.decodeFile(selectedImagePath, options);
			final int REQUIRED_SIZE = 200;
			int scale = 1;
			while (options.outWidth / scale / 2 >= REQUIRED_SIZE
					&& options.outHeight / scale / 2 >= REQUIRED_SIZE)
				scale *= 2;
			options.inSampleSize = scale;
			options.inJustDecodeBounds = false;
			bm = BitmapFactory.decodeFile(selectedImagePath, options);

			imgdoc.setImageBitmap(bm);

			InputStream inStream = null;
			OutputStream outStream = null;

			try {

				File afile = new File(selectedImagePath);
				File bfile = new File(license_path, "img" + afile.getName());

				inStream = new FileInputStream(afile);
				outStream = new FileOutputStream(bfile);

				byte[] buffer = new byte[1024];

				int length;
				// copy the file content in bytes
				while ((length = inStream.read(buffer)) > 0) {
					outStream.write(buffer, 0, length);
				}
				inStream.close();
				outStream.close();

				System.out.println("File is copied successful!");

			} catch (IOException e) {
				e.printStackTrace();
			}
		} else if (insurancechk==true) {
			SharedPreferences shre = PreferenceManager
					.getDefaultSharedPreferences(getActivity());
			Editor edit = shre.edit();
			edit.putString("insurance", selectedImagePath);
			edit.commit();
			Bitmap bm;
			BitmapFactory.Options options = new BitmapFactory.Options();
			options.inJustDecodeBounds = true;
			BitmapFactory.decodeFile(selectedImagePath, options);
			final int REQUIRED_SIZE = 200;
			int scale = 1;
			while (options.outWidth / scale / 2 >= REQUIRED_SIZE
					&& options.outHeight / scale / 2 >= REQUIRED_SIZE)
				scale *= 2;
			options.inSampleSize = scale;
			options.inJustDecodeBounds = false;
			bm = BitmapFactory.decodeFile(selectedImagePath, options);

			imgdoc.setImageBitmap(bm);

			InputStream inStream = null;
			OutputStream outStream = null;

			try {

				File afile = new File(selectedImagePath);
				File bfile = new File(insurance_path, "img" + afile.getName());

				inStream = new FileInputStream(afile);
				outStream = new FileOutputStream(bfile);

				byte[] buffer = new byte[1024];

				int length;
				// copy the file content in bytes
				while ((length = inStream.read(buffer)) > 0) {
					outStream.write(buffer, 0, length);
				}
				inStream.close();
				outStream.close();

				System.out.println("File is copied successful!");

			} catch (IOException e) {
				e.printStackTrace();
			}
		} else if (pucchk==true) {
			SharedPreferences shre = PreferenceManager
					.getDefaultSharedPreferences(getActivity());
			Editor edit = shre.edit();
			edit.putString("puc", selectedImagePath);
			edit.commit();
			Bitmap bm;
			BitmapFactory.Options options = new BitmapFactory.Options();
			options.inJustDecodeBounds = true;
			BitmapFactory.decodeFile(selectedImagePath, options);
			final int REQUIRED_SIZE = 200;
			int scale = 1;
			while (options.outWidth / scale / 2 >= REQUIRED_SIZE
					&& options.outHeight / scale / 2 >= REQUIRED_SIZE)
				scale *= 2;
			options.inSampleSize = scale;
			options.inJustDecodeBounds = false;
			bm = BitmapFactory.decodeFile(selectedImagePath, options);

			imgdoc.setImageBitmap(bm);

			InputStream inStream = null;
			OutputStream outStream = null;

			try {

				File afile = new File(selectedImagePath);
				File bfile = new File(puc_path, "img" + afile.getName());

				inStream = new FileInputStream(afile);
				outStream = new FileOutputStream(bfile);

				byte[] buffer = new byte[1024];

				int length;
				// copy the file content in bytes
				while ((length = inStream.read(buffer)) > 0) {
					outStream.write(buffer, 0, length);
				}
				inStream.close();
				outStream.close();

				System.out.println("File is copied successful!");

			} catch (IOException e) {
				e.printStackTrace();
			}
		} else if (passportchk==true) {
			SharedPreferences shre = PreferenceManager
					.getDefaultSharedPreferences(getActivity());
			Editor edit = shre.edit();
			edit.putString("passport", selectedImagePath);
			edit.commit();
			Bitmap bm;
			BitmapFactory.Options options = new BitmapFactory.Options();
			options.inJustDecodeBounds = true;
			BitmapFactory.decodeFile(selectedImagePath, options);
			final int REQUIRED_SIZE = 200;
			int scale = 1;
			while (options.outWidth / scale / 2 >= REQUIRED_SIZE
					&& options.outHeight / scale / 2 >= REQUIRED_SIZE)
				scale *= 2;
			options.inSampleSize = scale;
			options.inJustDecodeBounds = false;
			bm = BitmapFactory.decodeFile(selectedImagePath, options);

			imgdoc.setImageBitmap(bm);

			InputStream inStream = null;
			OutputStream outStream = null;

			try {

				File afile = new File(selectedImagePath);
				File bfile = new File(passport_path, "img" + afile.getName());

				inStream = new FileInputStream(afile);
				outStream = new FileOutputStream(bfile);

				byte[] buffer = new byte[1024];

				int length;
				// copy the file content in bytes
				while ((length = inStream.read(buffer)) > 0) {
					outStream.write(buffer, 0, length);
				}
				inStream.close();
				outStream.close();

				System.out.println("File is copied successful!");

			} catch (IOException e) {
				e.printStackTrace();
			}
		} else if (panchk==true) {
			SharedPreferences shre = PreferenceManager
					.getDefaultSharedPreferences(getActivity());
			Editor edit = shre.edit();
			edit.putString("pancard", selectedImagePath);
			edit.commit();
			Bitmap bm;
			BitmapFactory.Options options = new BitmapFactory.Options();
			options.inJustDecodeBounds = true;
			BitmapFactory.decodeFile(selectedImagePath, options);
			final int REQUIRED_SIZE = 200;
			int scale = 1;
			while (options.outWidth / scale / 2 >= REQUIRED_SIZE
					&& options.outHeight / scale / 2 >= REQUIRED_SIZE)
				scale *= 2;
			options.inSampleSize = scale;
			options.inJustDecodeBounds = false;
			bm = BitmapFactory.decodeFile(selectedImagePath, options);

			imgdoc.setImageBitmap(bm);

			InputStream inStream = null;
			OutputStream outStream = null;

			try {

				File afile = new File(selectedImagePath);
				File bfile = new File(pancard_path, "img" + afile.getName());

				inStream = new FileInputStream(afile);
				outStream = new FileOutputStream(bfile);

				byte[] buffer = new byte[1024];

				int length;
				// copy the file content in bytes
				while ((length = inStream.read(buffer)) > 0) {
					outStream.write(buffer, 0, length);
				}
				inStream.close();
				outStream.close();

				System.out.println("File is copied successful!");

			} catch (IOException e) {
				e.printStackTrace();
			}
			
		}else if (voteridchk==true) {
			SharedPreferences shre = PreferenceManager
					.getDefaultSharedPreferences(getActivity());
			Editor edit = shre.edit();
			edit.putString("voterid", selectedImagePath);
			edit.commit();
			Bitmap bm;
			BitmapFactory.Options options = new BitmapFactory.Options();
			options.inJustDecodeBounds = true;
			BitmapFactory.decodeFile(selectedImagePath, options);
			final int REQUIRED_SIZE = 200;
			int scale = 1;
			while (options.outWidth / scale / 2 >= REQUIRED_SIZE
					&& options.outHeight / scale / 2 >= REQUIRED_SIZE)
				scale *= 2;
			options.inSampleSize = scale;
			options.inJustDecodeBounds = false;
			bm = BitmapFactory.decodeFile(selectedImagePath, options);

			imgdoc.setImageBitmap(bm);

			InputStream inStream = null;
			OutputStream outStream = null;

			try {

				File afile = new File(selectedImagePath);
				File bfile = new File(voterid_path, "img" + afile.getName());

				inStream = new FileInputStream(afile);
				outStream = new FileOutputStream(bfile);

				byte[] buffer = new byte[1024];

				int length;
				// copy the file content in bytes
				while ((length = inStream.read(buffer)) > 0) {
					outStream.write(buffer, 0, length);
				}
				inStream.close();
				outStream.close();

				System.out.println("File is copied successful!");

			} catch (IOException e) {
				e.printStackTrace();
			}
		} else if (aadharchk==true) {
			SharedPreferences shre = PreferenceManager
					.getDefaultSharedPreferences(getActivity());
			Editor edit = shre.edit();
			edit.putString("aadhar", selectedImagePath);
			edit.commit();
			Bitmap bm;
			BitmapFactory.Options options = new BitmapFactory.Options();
			options.inJustDecodeBounds = true;
			BitmapFactory.decodeFile(selectedImagePath, options);
			final int REQUIRED_SIZE = 200;
			int scale = 1;
			while (options.outWidth / scale / 2 >= REQUIRED_SIZE
					&& options.outHeight / scale / 2 >= REQUIRED_SIZE)
				scale *= 2;
			options.inSampleSize = scale;
			options.inJustDecodeBounds = false;
			bm = BitmapFactory.decodeFile(selectedImagePath, options);

			imgdoc.setImageBitmap(bm);

			InputStream inStream = null;
			OutputStream outStream = null;

			try {

				File afile = new File(selectedImagePath);
				File bfile = new File(aadhar_path, "img" + afile.getName());

				inStream = new FileInputStream(afile);
				outStream = new FileOutputStream(bfile);

				byte[] buffer = new byte[1024];

				int length;
				// copy the file content in bytes
				while ((length = inStream.read(buffer)) > 0) {
					outStream.write(buffer, 0, length);
				}
				inStream.close();
				outStream.close();

				System.out.println("File is copied successful!");

			} catch (IOException e) {
				e.printStackTrace();
			}
		} else if (vehicalpicturechk==true) {
			SharedPreferences shre = PreferenceManager
					.getDefaultSharedPreferences(getActivity());
			Editor edit = shre.edit();
			edit.putString("vehicalpicture", selectedImagePath);
			edit.commit();
			Bitmap bm;
			BitmapFactory.Options options = new BitmapFactory.Options();
			options.inJustDecodeBounds = true;
			BitmapFactory.decodeFile(selectedImagePath, options);
			final int REQUIRED_SIZE = 200;
			int scale = 1;
			while (options.outWidth / scale / 2 >= REQUIRED_SIZE
					&& options.outHeight / scale / 2 >= REQUIRED_SIZE)
				scale *= 2;
			options.inSampleSize = scale;
			options.inJustDecodeBounds = false;
			bm = BitmapFactory.decodeFile(selectedImagePath, options);

			imgdoc.setImageBitmap(bm);

			InputStream inStream = null;
			OutputStream outStream = null;

			try {

				File afile = new File(selectedImagePath);
				File bfile = new File(vehicalpicture_path, "img" + afile.getName());

				inStream = new FileInputStream(afile);
				outStream = new FileOutputStream(bfile);

				byte[] buffer = new byte[1024];

				int length;
				// copy the file content in bytes
				while ((length = inStream.read(buffer)) > 0) {
					outStream.write(buffer, 0, length);
				}
				inStream.close();
				outStream.close();

				System.out.println("File is copied successful!");

			} catch (IOException e) {
				e.printStackTrace();
			}
		} else if (otherschk==true) {
			SharedPreferences shre = PreferenceManager
					.getDefaultSharedPreferences(getActivity());
			Editor edit = shre.edit();
			edit.putString("others", selectedImagePath);
			edit.commit();
			Bitmap bm;
			BitmapFactory.Options options = new BitmapFactory.Options();
			options.inJustDecodeBounds = true;
			BitmapFactory.decodeFile(selectedImagePath, options);
			final int REQUIRED_SIZE = 200;
			int scale = 1;
			while (options.outWidth / scale / 2 >= REQUIRED_SIZE
					&& options.outHeight / scale / 2 >= REQUIRED_SIZE)
				scale *= 2;
			options.inSampleSize = scale;
			options.inJustDecodeBounds = false;
			bm = BitmapFactory.decodeFile(selectedImagePath, options);

			imgdoc.setImageBitmap(bm);

			InputStream inStream = null;
			OutputStream outStream = null;

			try {

				File afile = new File(selectedImagePath);
				File bfile = new File(others_path, "img" + afile.getName());

				inStream = new FileInputStream(afile);
				outStream = new FileOutputStream(bfile);

				byte[] buffer = new byte[1024];

				int length;
				// copy the file content in bytes
				while ((length = inStream.read(buffer)) > 0) {
					outStream.write(buffer, 0, length);
				}
				inStream.close();
				outStream.close();

				System.out.println("File is copied successful!");

			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	public void onItemSelected(AdapterView<?> arg0, View arg1, int position,
			long arg3) {
		// TODO Auto-generated method stub
		regno.setSelection(position);
		String selregno = (String) regno.getSelectedItem();
		Toast.makeText(getActivity(), selregno, Toast.LENGTH_LONG).show();
	}

	@Override
	public void onNothingSelected(AdapterView<?> arg0) {
		// TODO Auto-generated method stub

	}
}
=======
package com.ttl.customersocialapp;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.app.Fragment;
import android.app.FragmentManager;
import android.app.FragmentTransaction;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.preference.PreferenceManager;
import android.provider.MediaStore;
import android.provider.MediaStore.MediaColumns;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnKeyListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.Toast;

public class DocumentUploadFragment extends Fragment implements
		OnItemSelectedListener {
	public DocumentUploadFragment() {
	}

	View rootView;
	final int CAMERA_CAPTURE = 1, SELECT_FILE = 2;
	LinearLayout license, insurance, puc, passport, pancard, voterid, aadhar,
			vehicalpicture, others;
	public static final String license_path = Environment
			.getExternalStorageDirectory().getAbsolutePath()
			+ "/CustomerSocialAppDocument/license/";
	public static final String insurance_path = Environment
			.getExternalStorageDirectory().getAbsolutePath()
			+ "/CustomerSocialAppDocument/insurance/";
	public static final String puc_path = Environment
			.getExternalStorageDirectory().getAbsolutePath()
			+ "/CustomerSocialAppDocument/puc/";
	public static final String passport_path = Environment
			.getExternalStorageDirectory().getAbsolutePath()
			+ "/CustomerSocialAppDocument/passport/";
	public static final String pancard_path = Environment
			.getExternalStorageDirectory().getAbsolutePath()
			+ "/CustomerSocialAppDocument/pancard/";
	public static final String voterid_path = Environment
			.getExternalStorageDirectory().getAbsolutePath()
			+ "/CustomerSocialAppDocument/voterid/";
	public static final String aadhar_path = Environment
			.getExternalStorageDirectory().getAbsolutePath()
			+ "/CustomerSocialAppDocument/aadhar/";
	public static final String vehicalpicture_path = Environment
			.getExternalStorageDirectory().getAbsolutePath()
			+ "/CustomerSocialAppDocument/vehicalpicture/";
	public static final String others_path = Environment
			.getExternalStorageDirectory().getAbsolutePath()
			+ "/CustomerSocialAppDocument/others/";
	File[] files;
	Spinner regno;
	private String[] regstationno = { "MH 20 U 7897", "MH 21 U 7897",
			"MH 22 U 7897" };
	LinearLayout lindocs;
	ImageView imgdoc, imgcancle, imgdelete, imgadd;
	String picturePath, picturePath1,picturePath2,picturePath3,savepancard,savevoterid,saveaadhar,savevehicalpicture,saveothers;
	SharedPreferences settings;
	boolean licensechk = false, insurancechk = false, pucchk=false,passportchk=false,panchk=false,voteridchk=false,aadharchk=false,vehicalpicturechk=false,otherschk=false;
	Editor edit;
	RelativeLayout relspinner;

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {

		rootView = inflater.inflate(R.layout.fragment_documentupload,
				container, false);
		relspinner=(RelativeLayout)rootView.findViewById(R.id.relspinner);
		relspinner.setVisibility(View.GONE);
		settings = PreferenceManager.getDefaultSharedPreferences(rootView
				.getContext());
		edit = settings.edit();

		File licensedir = new File(license_path);
		licensedir.mkdirs();
		File insurancedir = new File(insurance_path);
		insurancedir.mkdirs();
		File pucdir = new File(puc_path);
		pucdir.mkdirs();
		File passportdir = new File(passport_path);
		passportdir.mkdirs();
		File pancarddir = new File(pancard_path);
		pancarddir.mkdirs();
		File voteriddir = new File(voterid_path);
		voteriddir.mkdirs();
		File aadhardir = new File(aadhar_path);
		aadhardir.mkdirs();
		File vehicalpituredir = new File(vehicalpicture_path);
		vehicalpituredir.mkdirs();
		File othersdir = new File(others_path);
		othersdir.mkdirs();
		
		regno = (Spinner) rootView.findViewById(R.id.spnregno);
		lindocs = (LinearLayout) rootView.findViewById(R.id.lindocs);
		imgdoc = (ImageView) rootView.findViewById(R.id.imgdoc);

		ArrayAdapter<String> sp_adapter = new ArrayAdapter<String>(
				getActivity(), R.layout.spinnertext, regstationno);
		sp_adapter.setDropDownViewResource(R.layout.spinner_selector);
		regno.setAdapter(sp_adapter);
		regno.setOnItemSelectedListener(this);
		license = (LinearLayout) rootView.findViewById(R.id.btnlicense);
		insurance = (LinearLayout) rootView.findViewById(R.id.btninsurance);
		puc = (LinearLayout) rootView.findViewById(R.id.btnpuc);
		passport = (LinearLayout) rootView.findViewById(R.id.btnpassport);
		pancard = (LinearLayout) rootView.findViewById(R.id.btnpancard);
		voterid = (LinearLayout) rootView.findViewById(R.id.btnvoterid);
		aadhar = (LinearLayout) rootView.findViewById(R.id.btnaadhar);
		vehicalpicture = (LinearLayout) rootView
				.findViewById(R.id.btnvehicalpicture);
		others = (LinearLayout) rootView.findViewById(R.id.btnothers);

		license.setOnClickListener(buttonClickListener);
		insurance.setOnClickListener(buttonClickListener);
		puc.setOnClickListener(buttonClickListener);
		passport.setOnClickListener(buttonClickListener);
		pancard.setOnClickListener(buttonClickListener);
		voterid.setOnClickListener(buttonClickListener);
		aadhar.setOnClickListener(buttonClickListener);
		vehicalpicture.setOnClickListener(buttonClickListener);
		others.setOnClickListener(buttonClickListener);

		imgcancle = (ImageView) rootView.findViewById(R.id.imgcancle);
		imgcancle.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				lindocs.setVisibility(View.VISIBLE);
				relspinner.setVisibility(View.GONE);
			}
		});
		imgdelete = (ImageView) rootView.findViewById(R.id.imgdelete);
		imgdelete.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
						getActivity());
				alertDialogBuilder
						.setMessage("Are you sure,You Want Delete Document");

				alertDialogBuilder.setPositiveButton("yes",
						new DialogInterface.OnClickListener() {
							@Override
							public void onClick(DialogInterface arg0, int arg1) {
								imgadd.setVisibility(View.VISIBLE);
								if (licensechk == true) {
									settings.edit().remove("profilePic")
											.commit();
								} else if (insurancechk == true) {
									settings.edit().remove("insurance")
											.commit();
								} else if (pucchk==true) {
									settings.edit().remove("puc")
									.commit();
								} else if (passportchk==true) {
									settings.edit().remove("passport")
									.commit();
								} else if (panchk==true) {
									settings.edit().remove("pancard")
									.commit();
								} else if (voteridchk==true) {
									settings.edit().remove("voterid")
									.commit();
								}else if (aadharchk==true) {
									settings.edit().remove("aadhar").commit();
								}else if (vehicalpicturechk==true) {
									settings.edit().remove("vehicalpicture").commit();
								}else if (otherschk==true) {
									settings.edit().remove("others").commit();
								}

								imgdoc.setImageBitmap(getScaledBitmap(null, 0,
										0));
							}
						});

				alertDialogBuilder.setNegativeButton("No",
						new DialogInterface.OnClickListener() {
							@Override
							public void onClick(DialogInterface dialog,
									int which) {
								getActivity().finish();
							}
						});

				AlertDialog alertDialog = alertDialogBuilder.create();
				alertDialog.show();

			}
		});
		imgadd = (ImageView) rootView.findViewById(R.id.imgadd);
		imgadd.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub

				selectImage();
			}
		});
		imgadd.setVisibility(View.GONE);
		
		rootView.getRootView().setFocusableInTouchMode(true);
		rootView.getRootView().requestFocus();

		rootView.getRootView().setOnKeyListener(new OnKeyListener() {
				@Override
				public boolean onKey(View v, int keyCode, KeyEvent event) {
					if (event.getAction() == KeyEvent.ACTION_DOWN) {
						if (keyCode == KeyEvent.KEYCODE_BACK) {						
							FragmentManager fm = getFragmentManager();
							FragmentTransaction tx = fm.beginTransaction();
							tx.replace(R.id.frame_container, new HomeFragment())
									.commit();
							return true;
						}
					}
					return false;
				}
			});
		return rootView;
	}

	final OnClickListener buttonClickListener = new OnClickListener() {

		@Override
		public void onClick(View v) {
			// images = (ImageView)findViewById(R.id.monthImageDisplay);
			// imagesTest = (ImageView)findViewById(R.id.imagesTest);
			switch (v.getId()) {

			case R.id.btnlicense:
				licensechk = true;
				picturePath = settings.getString("profilePic", "");

				if (picturePath == null || picturePath.length() == 0
						|| picturePath.equalsIgnoreCase("")) {
					imgadd.setVisibility(View.GONE);

					selectImage();

				} else {

					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(getScaledBitmap(picturePath, 0, 0));
				}
				break;

			case R.id.btninsurance:
				relspinner.setVisibility(View.VISIBLE);
				insurancechk = true;
				licensechk = false;
				picturePath1 = settings.getString("insurance", "");

				if (picturePath1 == null || picturePath1.length() == 0
						|| picturePath1.equalsIgnoreCase("")) {
					imgadd.setVisibility(View.GONE);

					selectImage();

				} else {

					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(getScaledBitmap(picturePath1, 0, 0));
				}

				break;
			case R.id.btnpuc:
				relspinner.setVisibility(View.VISIBLE);
				pucchk = true;
				licensechk = false;
				insurancechk = false;
				picturePath2 = settings.getString("puc", "");

				if (picturePath2 == null || picturePath2.length() == 0
						|| picturePath2.equalsIgnoreCase("")) {
					imgadd.setVisibility(View.GONE);

					selectImage();

				} else {

					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(getScaledBitmap(picturePath2, 0, 0));
				}

				break;
			case R.id.btnpassport:
				passportchk=true;
				pucchk = false;
				licensechk = false;
				insurancechk = false;
				picturePath3 = settings.getString("passport", "");

				if (picturePath3 == null || picturePath3.length() == 0
						|| picturePath3.equalsIgnoreCase("")) {
					imgadd.setVisibility(View.GONE);

					selectImage();

				} else {

					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(getScaledBitmap(picturePath3, 0, 0));
				}

				break;
			case R.id.btnpancard:
				panchk=true;
				passportchk=false;
				pucchk = false;
				licensechk = false;
				insurancechk = false;
				savepancard = settings.getString("pancard", "");

				if (savepancard == null || savepancard.length() == 0
						|| savepancard.equalsIgnoreCase("")) {
					imgadd.setVisibility(View.GONE);
					selectImage();
				} else {
					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(getScaledBitmap(savepancard, 0, 0));
				}

				break;
			case R.id.btnvoterid:
				voteridchk=true;
				panchk=false;
				passportchk=false;
				pucchk = false;
				licensechk = false;
				insurancechk = false;
				savevoterid = settings.getString("voterid", "");

				if (savevoterid == null || savevoterid.length() == 0
						|| savevoterid.equalsIgnoreCase("")) {
					imgadd.setVisibility(View.GONE);
					selectImage();
				} else {
					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(getScaledBitmap(savevoterid, 0, 0));
				}

				break;
			case R.id.btnaadhar:
				aadharchk=true;
				voteridchk=false;
				panchk=false;
				passportchk=false;
				pucchk = false;
				licensechk = false;
				insurancechk = false;
				saveaadhar = settings.getString("aadhar", "");

				if (saveaadhar == null || saveaadhar.length() == 0
						|| saveaadhar.equalsIgnoreCase("")) {
					imgadd.setVisibility(View.GONE);
					selectImage();
				} else {
					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(getScaledBitmap(saveaadhar, 0, 0));
				}

				break;
			case R.id.btnvehicalpicture:
				relspinner.setVisibility(View.VISIBLE);
				vehicalpicturechk=true;
				aadharchk=false;
				voteridchk=false;
				panchk=false;
				passportchk=false;
				pucchk = false;
				licensechk = false;
				insurancechk = false;
				savevehicalpicture = settings.getString("vehicalpicture", "");

				if (savevehicalpicture == null || savevehicalpicture.length() == 0
						|| savevehicalpicture.equalsIgnoreCase("")) {
					imgadd.setVisibility(View.GONE);
					selectImage();
				} else {
					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(getScaledBitmap(savevehicalpicture, 0, 0));
				}

				break;
			case R.id.btnothers:
				otherschk=true;
				vehicalpicturechk=false;
				aadharchk=false;
				voteridchk=false;
				panchk=false;
				passportchk=false;
				pucchk = false;
				licensechk = false;
				insurancechk = false;
				saveothers = settings.getString("others", "");

				if (saveothers == null || saveothers.length() == 0
						|| saveothers.equalsIgnoreCase("")) {
					imgadd.setVisibility(View.GONE);
					selectImage();
				} else {
					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(getScaledBitmap(saveothers, 0, 0));
				}

				break;

			}

		}

	};

	protected Bitmap getScaledBitmap(String picturePath, int width, int height) {
		// TODO Auto-generated method stub
		BitmapFactory.Options sizeOptions = null;
		try {
			sizeOptions = new BitmapFactory.Options();
			sizeOptions.inJustDecodeBounds = true;
			BitmapFactory.decodeFile(picturePath, sizeOptions);

			int inSampleSize = calculateInSampleSize(sizeOptions, width, height);

			sizeOptions.inJustDecodeBounds = false;
			sizeOptions.inSampleSize = inSampleSize;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return BitmapFactory.decodeFile(picturePath, sizeOptions);
	}

	private int calculateInSampleSize(Options sizeOptions, int width, int height) {
		// TODO Auto-generated method stub
		return 0;
	}

	private List<String> RetriveCapturedImagePath() {
		// TODO Auto-generated method stub
		List<String> tFileList = new ArrayList<String>();
		File f = new File(license_path);
		if (f.exists()) {
			files = f.listFiles();
			Arrays.sort(files);

			for (int i = 0; i < files.length; i++) {
				File file = files[i];
				if (file.isDirectory())
					continue;
				tFileList.add(file.getPath());
			}
		}
		return tFileList;
	}

	protected void selectImage() {
		// TODO Auto-generated method stub
		final CharSequence[] items = { "Take Photo", "Choose from Gallery",
				"Cancel" };
		imgadd.setVisibility(View.GONE);
		AlertDialog.Builder builder = new AlertDialog.Builder(
				rootView.getContext());
		builder.setTitle("Add Photo!");
		builder.setItems(items, new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int item) {
				if (items[item].equals("Take Photo")) {
					Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
					startActivityForResult(intent, CAMERA_CAPTURE);
				} else if (items[item].equals("Choose from Gallery")) {
					Intent intent = new Intent(
							Intent.ACTION_PICK,
							android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
					intent.setType("image/*");
					startActivityForResult(
							Intent.createChooser(intent, "Select File"),
							SELECT_FILE);
				} else if (items[item].equals("Cancel")) {
					dialog.dismiss();
				}
			}
		});
		builder.show();

	}

	@SuppressLint("NewApi")
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		int RESULT_OK = -1;
		if (resultCode == RESULT_OK) {
			// user is returning from capturing an image using the camera
			if (requestCode == CAMERA_CAPTURE) {

				Bundle extras = data.getExtras();
				Bitmap thePic = extras.getParcelable("data");
				if (licensechk == true) {

					// String imgcurTime = dateFormat.format(new
					// java.util.Date());

					String _path = license_path + System.currentTimeMillis()
							+ ".jpg";

					try {
						FileOutputStream out = new FileOutputStream(_path);
						thePic.compress(Bitmap.CompressFormat.JPEG, 90, out);
						out.close();
					} catch (FileNotFoundException e) {
						e.getMessage();
					} catch (IOException e) {
						e.printStackTrace();
					}
					edit.putString("profilePic", _path);

					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(thePic);

				} else if (insurancechk == true) {

					// String imgcurTime = dateFormat.format(new
					// java.util.Date());

					String _insurancepath = insurance_path
							+ System.currentTimeMillis() + ".jpg";

					try {
						FileOutputStream out = new FileOutputStream(
								_insurancepath);
						thePic.compress(Bitmap.CompressFormat.JPEG, 90, out);
						out.close();
					} catch (FileNotFoundException e) {
						e.getMessage();
					} catch (IOException e) {
						e.printStackTrace();
					}
					edit.putString("insurance", _insurancepath);

					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(thePic);

				} else if (pucchk==true) {

					// String imgcurTime = dateFormat.format(new
					// java.util.Date());

					String _pucpath = puc_path
							+ System.currentTimeMillis() + ".jpg";

					try {
						FileOutputStream out = new FileOutputStream(
								_pucpath);
						thePic.compress(Bitmap.CompressFormat.JPEG, 90, out);
						out.close();
					} catch (FileNotFoundException e) {
						e.getMessage();
					} catch (IOException e) {
						e.printStackTrace();
					}
					edit.putString("puc", _pucpath);

					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(thePic);
					
				} else if (passportchk==true) {

					// String imgcurTime = dateFormat.format(new
					// java.util.Date());

					String _passportpath = passport_path
							+ System.currentTimeMillis() + ".jpg";

					try {
						FileOutputStream out = new FileOutputStream(
								_passportpath);
						thePic.compress(Bitmap.CompressFormat.JPEG, 90, out);
						out.close();
					} catch (FileNotFoundException e) {
						e.getMessage();
					} catch (IOException e) {
						e.printStackTrace();
					}
					edit.putString("passport", _passportpath);

					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(thePic);
				} else if (panchk==true) {
					// String imgcurTime = dateFormat.format(new
					// java.util.Date());

					String _passportpath = pancard_path
							+ System.currentTimeMillis() + ".jpg";

					try {
						FileOutputStream out = new FileOutputStream(
								_passportpath);
						thePic.compress(Bitmap.CompressFormat.JPEG, 90, out);
						out.close();
					} catch (FileNotFoundException e) {
						e.getMessage();
					} catch (IOException e) {
						e.printStackTrace();
					}
					edit.putString("pancard", _passportpath);

					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(thePic);
				}else if (voteridchk==true) {
					// String imgcurTime = dateFormat.format(new
					// java.util.Date());

					String _passportpath = voterid_path
							+ System.currentTimeMillis() + ".jpg";

					try {
						FileOutputStream out = new FileOutputStream(
								_passportpath);
						thePic.compress(Bitmap.CompressFormat.JPEG, 90, out);
						out.close();
					} catch (FileNotFoundException e) {
						e.getMessage();
					} catch (IOException e) {
						e.printStackTrace();
					}
					edit.putString("voterid", _passportpath);

					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(thePic);
				}else if (aadharchk==true) {
					// String imgcurTime = dateFormat.format(new
					// java.util.Date());

					String _passportpath = aadhar_path
							+ System.currentTimeMillis() + ".jpg";

					try {
						FileOutputStream out = new FileOutputStream(
								_passportpath);
						thePic.compress(Bitmap.CompressFormat.JPEG, 90, out);
						out.close();
					} catch (FileNotFoundException e) {
						e.getMessage();
					} catch (IOException e) {
						e.printStackTrace();
					}
					edit.putString("aadhar", _passportpath);

					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(thePic);
				}else if (vehicalpicturechk==true) {
					// String imgcurTime = dateFormat.format(new
					// java.util.Date());

					String _passportpath = vehicalpicture_path
							+ System.currentTimeMillis() + ".jpg";

					try {
						FileOutputStream out = new FileOutputStream(
								_passportpath);
						thePic.compress(Bitmap.CompressFormat.JPEG, 90, out);
						out.close();
					} catch (FileNotFoundException e) {
						e.getMessage();
					} catch (IOException e) {
						e.printStackTrace();
					}
					edit.putString("vehicalpicture", _passportpath);

					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(thePic);
				}else if (otherschk==true) {
					// String imgcurTime = dateFormat.format(new
					// java.util.Date());

					String _passportpath = others_path
							+ System.currentTimeMillis() + ".jpg";

					try {
						FileOutputStream out = new FileOutputStream(
								_passportpath);
						thePic.compress(Bitmap.CompressFormat.JPEG, 90, out);
						out.close();
					} catch (FileNotFoundException e) {
						e.getMessage();
					} catch (IOException e) {
						e.printStackTrace();
					}
					edit.putString("others", _passportpath);

					lindocs.setVisibility(View.GONE);
					imgdoc.setImageBitmap(thePic);
				}
				
				
				
				edit.commit();
			} else if (requestCode == SELECT_FILE) {
				onSelectFromGalleryResult(data);

			}
		}
	}

	@SuppressLint("NewApi")
	private void onSelectFromGalleryResult(Intent data) {
		// TODO Auto-generated method stub
		Uri selectedImageUri = data.getData();
		String[] projection = { MediaColumns.DATA };
		/*
		 * Cursor cursor = managedQuery(selectedImageUri, projection, null,
		 * null, null);
		 */
		Cursor cursor = getActivity().getContentResolver().query(
				selectedImageUri, projection, null, null, null);
		int column_index = cursor.getColumnIndexOrThrow(MediaColumns.DATA);
		cursor.moveToFirst();
		lindocs.setVisibility(View.GONE);
		String selectedImagePath = cursor.getString(column_index);
		if (licensechk == true) {
			SharedPreferences shre = PreferenceManager
					.getDefaultSharedPreferences(getActivity());
			Editor edit = shre.edit();
			edit.putString("profilePic", selectedImagePath);
			edit.commit();
			Bitmap bm;
			BitmapFactory.Options options = new BitmapFactory.Options();
			options.inJustDecodeBounds = true;
			BitmapFactory.decodeFile(selectedImagePath, options);
			final int REQUIRED_SIZE = 200;
			int scale = 1;
			while (options.outWidth / scale / 2 >= REQUIRED_SIZE
					&& options.outHeight / scale / 2 >= REQUIRED_SIZE)
				scale *= 2;
			options.inSampleSize = scale;
			options.inJustDecodeBounds = false;
			bm = BitmapFactory.decodeFile(selectedImagePath, options);

			imgdoc.setImageBitmap(bm);

			InputStream inStream = null;
			OutputStream outStream = null;

			try {

				File afile = new File(selectedImagePath);
				File bfile = new File(license_path, "img" + afile.getName());

				inStream = new FileInputStream(afile);
				outStream = new FileOutputStream(bfile);

				byte[] buffer = new byte[1024];

				int length;
				// copy the file content in bytes
				while ((length = inStream.read(buffer)) > 0) {
					outStream.write(buffer, 0, length);
				}
				inStream.close();
				outStream.close();

				System.out.println("File is copied successful!");

			} catch (IOException e) {
				e.printStackTrace();
			}
		} else if (insurancechk==true) {
			SharedPreferences shre = PreferenceManager
					.getDefaultSharedPreferences(getActivity());
			Editor edit = shre.edit();
			edit.putString("insurance", selectedImagePath);
			edit.commit();
			Bitmap bm;
			BitmapFactory.Options options = new BitmapFactory.Options();
			options.inJustDecodeBounds = true;
			BitmapFactory.decodeFile(selectedImagePath, options);
			final int REQUIRED_SIZE = 200;
			int scale = 1;
			while (options.outWidth / scale / 2 >= REQUIRED_SIZE
					&& options.outHeight / scale / 2 >= REQUIRED_SIZE)
				scale *= 2;
			options.inSampleSize = scale;
			options.inJustDecodeBounds = false;
			bm = BitmapFactory.decodeFile(selectedImagePath, options);

			imgdoc.setImageBitmap(bm);

			InputStream inStream = null;
			OutputStream outStream = null;

			try {

				File afile = new File(selectedImagePath);
				File bfile = new File(insurance_path, "img" + afile.getName());

				inStream = new FileInputStream(afile);
				outStream = new FileOutputStream(bfile);

				byte[] buffer = new byte[1024];

				int length;
				// copy the file content in bytes
				while ((length = inStream.read(buffer)) > 0) {
					outStream.write(buffer, 0, length);
				}
				inStream.close();
				outStream.close();

				System.out.println("File is copied successful!");

			} catch (IOException e) {
				e.printStackTrace();
			}
		} else if (pucchk==true) {
			SharedPreferences shre = PreferenceManager
					.getDefaultSharedPreferences(getActivity());
			Editor edit = shre.edit();
			edit.putString("puc", selectedImagePath);
			edit.commit();
			Bitmap bm;
			BitmapFactory.Options options = new BitmapFactory.Options();
			options.inJustDecodeBounds = true;
			BitmapFactory.decodeFile(selectedImagePath, options);
			final int REQUIRED_SIZE = 200;
			int scale = 1;
			while (options.outWidth / scale / 2 >= REQUIRED_SIZE
					&& options.outHeight / scale / 2 >= REQUIRED_SIZE)
				scale *= 2;
			options.inSampleSize = scale;
			options.inJustDecodeBounds = false;
			bm = BitmapFactory.decodeFile(selectedImagePath, options);

			imgdoc.setImageBitmap(bm);

			InputStream inStream = null;
			OutputStream outStream = null;

			try {

				File afile = new File(selectedImagePath);
				File bfile = new File(puc_path, "img" + afile.getName());

				inStream = new FileInputStream(afile);
				outStream = new FileOutputStream(bfile);

				byte[] buffer = new byte[1024];

				int length;
				// copy the file content in bytes
				while ((length = inStream.read(buffer)) > 0) {
					outStream.write(buffer, 0, length);
				}
				inStream.close();
				outStream.close();

				System.out.println("File is copied successful!");

			} catch (IOException e) {
				e.printStackTrace();
			}
		} else if (passportchk==true) {
			SharedPreferences shre = PreferenceManager
					.getDefaultSharedPreferences(getActivity());
			Editor edit = shre.edit();
			edit.putString("passport", selectedImagePath);
			edit.commit();
			Bitmap bm;
			BitmapFactory.Options options = new BitmapFactory.Options();
			options.inJustDecodeBounds = true;
			BitmapFactory.decodeFile(selectedImagePath, options);
			final int REQUIRED_SIZE = 200;
			int scale = 1;
			while (options.outWidth / scale / 2 >= REQUIRED_SIZE
					&& options.outHeight / scale / 2 >= REQUIRED_SIZE)
				scale *= 2;
			options.inSampleSize = scale;
			options.inJustDecodeBounds = false;
			bm = BitmapFactory.decodeFile(selectedImagePath, options);

			imgdoc.setImageBitmap(bm);

			InputStream inStream = null;
			OutputStream outStream = null;

			try {

				File afile = new File(selectedImagePath);
				File bfile = new File(passport_path, "img" + afile.getName());

				inStream = new FileInputStream(afile);
				outStream = new FileOutputStream(bfile);

				byte[] buffer = new byte[1024];

				int length;
				// copy the file content in bytes
				while ((length = inStream.read(buffer)) > 0) {
					outStream.write(buffer, 0, length);
				}
				inStream.close();
				outStream.close();

				System.out.println("File is copied successful!");

			} catch (IOException e) {
				e.printStackTrace();
			}
		} else if (panchk==true) {
			SharedPreferences shre = PreferenceManager
					.getDefaultSharedPreferences(getActivity());
			Editor edit = shre.edit();
			edit.putString("pancard", selectedImagePath);
			edit.commit();
			Bitmap bm;
			BitmapFactory.Options options = new BitmapFactory.Options();
			options.inJustDecodeBounds = true;
			BitmapFactory.decodeFile(selectedImagePath, options);
			final int REQUIRED_SIZE = 200;
			int scale = 1;
			while (options.outWidth / scale / 2 >= REQUIRED_SIZE
					&& options.outHeight / scale / 2 >= REQUIRED_SIZE)
				scale *= 2;
			options.inSampleSize = scale;
			options.inJustDecodeBounds = false;
			bm = BitmapFactory.decodeFile(selectedImagePath, options);

			imgdoc.setImageBitmap(bm);

			InputStream inStream = null;
			OutputStream outStream = null;

			try {

				File afile = new File(selectedImagePath);
				File bfile = new File(pancard_path, "img" + afile.getName());

				inStream = new FileInputStream(afile);
				outStream = new FileOutputStream(bfile);

				byte[] buffer = new byte[1024];

				int length;
				// copy the file content in bytes
				while ((length = inStream.read(buffer)) > 0) {
					outStream.write(buffer, 0, length);
				}
				inStream.close();
				outStream.close();

				System.out.println("File is copied successful!");

			} catch (IOException e) {
				e.printStackTrace();
			}
			
		}else if (voteridchk==true) {
			SharedPreferences shre = PreferenceManager
					.getDefaultSharedPreferences(getActivity());
			Editor edit = shre.edit();
			edit.putString("voterid", selectedImagePath);
			edit.commit();
			Bitmap bm;
			BitmapFactory.Options options = new BitmapFactory.Options();
			options.inJustDecodeBounds = true;
			BitmapFactory.decodeFile(selectedImagePath, options);
			final int REQUIRED_SIZE = 200;
			int scale = 1;
			while (options.outWidth / scale / 2 >= REQUIRED_SIZE
					&& options.outHeight / scale / 2 >= REQUIRED_SIZE)
				scale *= 2;
			options.inSampleSize = scale;
			options.inJustDecodeBounds = false;
			bm = BitmapFactory.decodeFile(selectedImagePath, options);

			imgdoc.setImageBitmap(bm);

			InputStream inStream = null;
			OutputStream outStream = null;

			try {

				File afile = new File(selectedImagePath);
				File bfile = new File(voterid_path, "img" + afile.getName());

				inStream = new FileInputStream(afile);
				outStream = new FileOutputStream(bfile);

				byte[] buffer = new byte[1024];

				int length;
				// copy the file content in bytes
				while ((length = inStream.read(buffer)) > 0) {
					outStream.write(buffer, 0, length);
				}
				inStream.close();
				outStream.close();

				System.out.println("File is copied successful!");

			} catch (IOException e) {
				e.printStackTrace();
			}
		} else if (aadharchk==true) {
			SharedPreferences shre = PreferenceManager
					.getDefaultSharedPreferences(getActivity());
			Editor edit = shre.edit();
			edit.putString("aadhar", selectedImagePath);
			edit.commit();
			Bitmap bm;
			BitmapFactory.Options options = new BitmapFactory.Options();
			options.inJustDecodeBounds = true;
			BitmapFactory.decodeFile(selectedImagePath, options);
			final int REQUIRED_SIZE = 200;
			int scale = 1;
			while (options.outWidth / scale / 2 >= REQUIRED_SIZE
					&& options.outHeight / scale / 2 >= REQUIRED_SIZE)
				scale *= 2;
			options.inSampleSize = scale;
			options.inJustDecodeBounds = false;
			bm = BitmapFactory.decodeFile(selectedImagePath, options);

			imgdoc.setImageBitmap(bm);

			InputStream inStream = null;
			OutputStream outStream = null;

			try {

				File afile = new File(selectedImagePath);
				File bfile = new File(aadhar_path, "img" + afile.getName());

				inStream = new FileInputStream(afile);
				outStream = new FileOutputStream(bfile);

				byte[] buffer = new byte[1024];

				int length;
				// copy the file content in bytes
				while ((length = inStream.read(buffer)) > 0) {
					outStream.write(buffer, 0, length);
				}
				inStream.close();
				outStream.close();

				System.out.println("File is copied successful!");

			} catch (IOException e) {
				e.printStackTrace();
			}
		} else if (vehicalpicturechk==true) {
			SharedPreferences shre = PreferenceManager
					.getDefaultSharedPreferences(getActivity());
			Editor edit = shre.edit();
			edit.putString("vehicalpicture", selectedImagePath);
			edit.commit();
			Bitmap bm;
			BitmapFactory.Options options = new BitmapFactory.Options();
			options.inJustDecodeBounds = true;
			BitmapFactory.decodeFile(selectedImagePath, options);
			final int REQUIRED_SIZE = 200;
			int scale = 1;
			while (options.outWidth / scale / 2 >= REQUIRED_SIZE
					&& options.outHeight / scale / 2 >= REQUIRED_SIZE)
				scale *= 2;
			options.inSampleSize = scale;
			options.inJustDecodeBounds = false;
			bm = BitmapFactory.decodeFile(selectedImagePath, options);

			imgdoc.setImageBitmap(bm);

			InputStream inStream = null;
			OutputStream outStream = null;

			try {

				File afile = new File(selectedImagePath);
				File bfile = new File(vehicalpicture_path, "img" + afile.getName());

				inStream = new FileInputStream(afile);
				outStream = new FileOutputStream(bfile);

				byte[] buffer = new byte[1024];

				int length;
				// copy the file content in bytes
				while ((length = inStream.read(buffer)) > 0) {
					outStream.write(buffer, 0, length);
				}
				inStream.close();
				outStream.close();

				System.out.println("File is copied successful!");

			} catch (IOException e) {
				e.printStackTrace();
			}
		} else if (otherschk==true) {
			SharedPreferences shre = PreferenceManager
					.getDefaultSharedPreferences(getActivity());
			Editor edit = shre.edit();
			edit.putString("others", selectedImagePath);
			edit.commit();
			Bitmap bm;
			BitmapFactory.Options options = new BitmapFactory.Options();
			options.inJustDecodeBounds = true;
			BitmapFactory.decodeFile(selectedImagePath, options);
			final int REQUIRED_SIZE = 200;
			int scale = 1;
			while (options.outWidth / scale / 2 >= REQUIRED_SIZE
					&& options.outHeight / scale / 2 >= REQUIRED_SIZE)
				scale *= 2;
			options.inSampleSize = scale;
			options.inJustDecodeBounds = false;
			bm = BitmapFactory.decodeFile(selectedImagePath, options);

			imgdoc.setImageBitmap(bm);

			InputStream inStream = null;
			OutputStream outStream = null;

			try {

				File afile = new File(selectedImagePath);
				File bfile = new File(others_path, "img" + afile.getName());

				inStream = new FileInputStream(afile);
				outStream = new FileOutputStream(bfile);

				byte[] buffer = new byte[1024];

				int length;
				// copy the file content in bytes
				while ((length = inStream.read(buffer)) > 0) {
					outStream.write(buffer, 0, length);
				}
				inStream.close();
				outStream.close();

				System.out.println("File is copied successful!");

			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	public void onItemSelected(AdapterView<?> arg0, View arg1, int position,
			long arg3) {
		// TODO Auto-generated method stub
		regno.setSelection(position);
		String selregno = (String) regno.getSelectedItem();
		Toast.makeText(getActivity(), selregno, Toast.LENGTH_LONG).show();
	}

	@Override
	public void onNothingSelected(AdapterView<?> arg0) {
		// TODO Auto-generated method stub

	}
}
>>>>>>> TMSC QA 3.4V
