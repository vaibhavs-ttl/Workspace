<<<<<<< HEAD
package com.ttl.customersocialapp;

import java.io.ByteArrayOutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;

import com.loopj.android.http.RequestParams;
import com.ttl.adapter.AwsResponseCallback;
import com.ttl.model.ServiceHandler;
import com.ttl.model.UserDetails;
import com.ttl.webservice.AWS_WebServiceCall;
import com.ttl.webservice.Constants;

import android.app.Fragment;
import android.app.FragmentManager;
import android.app.FragmentTransaction;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Base64;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnKeyListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;


public class CustomerDetailFragment extends Fragment implements OnClickListener {
	View rootView;
	TextView username, city;
	Button submit, cancel;
	ImageView update;
	Spinner spingender;
	EditText contactnumer, altcontactnumber, email_id, address, pincode, state,
			citytxt, district;
	TextView gendertext ,emailText;
	LinearLayout buttonLayout;
	 String selectedgender ,selectedfirsname , selectedlastname ,
	 selectedcontactnumber ,selectedaltcontactnumber ,selectedemailid ,
	 selectedaddress , selectedpincode , selecteduserid ,selectedpassword ,selectedstate ,selectedcity , selecteddist;
	 ImageView profileImage;
	 Bitmap bitmap;
	 String encodedString;
	 String imgPath, fileName;
	 RequestParams params = new RequestParams();
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		// TODO Auto-generated method stub

		rootView = inflater.inflate(R.layout.fragment_customer_detail,
				container, false);
		username = (TextView) rootView.findViewById(R.id.username);
		city = (TextView) rootView.findViewById(R.id.city);
		contactnumer = (EditText) rootView.findViewById(R.id.txtcontactnumber);
		altcontactnumber = (EditText) rootView.findViewById(R.id.txtaltnumber);
		email_id = (EditText) rootView.findViewById(R.id.txtemailid);
		address = (EditText) rootView.findViewById(R.id.txtAddress);
		pincode = (EditText) rootView.findViewById(R.id.txtpincode);
		state = (EditText) rootView.findViewById(R.id.txtstate);
		citytxt = (EditText) rootView.findViewById(R.id.txtcity);
		//district = (EditText) rootView.findViewById(R.id.txtdistrict);
		spingender = (Spinner) rootView.findViewById(R.id.txtgender);
		update = (ImageView) rootView.findViewById(R.id.btn_update);
		buttonLayout = (LinearLayout) rootView.findViewById(R.id.buttonlayout);
		submit = (Button) rootView.findViewById(R.id.submit);
		cancel = (Button) rootView.findViewById(R.id.cancel);
		gendertext = (TextView) rootView.findViewById(R.id.gender);
		profileImage = (ImageView) rootView.findViewById(R.id.profileimage);
		emailText = (TextView) rootView.findViewById(R.id.txtemailid_view);
		
		username.setText(UserDetails.getFirst_name() + " "
				+ UserDetails.getLast_name());
		city.setText(UserDetails.getCity());
		contactnumer.setText(UserDetails.getContact_number());
		altcontactnumber.setText(UserDetails.getAlt_contact_number());
		emailText.setText(UserDetails.getEmail_id());
		address.setText(UserDetails.getAddress());
		pincode.setText(UserDetails.getPincode());
		state.setText(UserDetails.getState());
		//district.setText(UserDetails.getDistrict());
		citytxt.setText(UserDetails.getCity());
		gendertext.setText(UserDetails.getGender());
		
		/*if (UserDetails.getGender().equals("Male"))
			spingender.setSelection(0);
		else
			spingender.setSelection(1);
*/
		contactnumer.setEnabled(false);
		altcontactnumber.setEnabled(false);
		email_id.setVisibility(View.GONE);
		
		address.setEnabled(false);
		pincode.setEnabled(false);
		spingender.setVisibility(View.GONE);
		state.setEnabled(false);
		//district.setEnabled(false);
		citytxt.setEnabled(false);
		buttonLayout.setVisibility(View.GONE);
		cancel.setVisibility(View.GONE);
		submit.setVisibility(View.GONE);

		update.setOnClickListener(this);
		
		contactnumer.setTextColor(Color.WHITE);
		altcontactnumber.setTextColor(Color.WHITE);
	//	email_id.setTextColor(Color.WHITE);
		address.setTextColor(Color.WHITE);
		state.setTextColor(Color.WHITE);
		citytxt.setTextColor(Color.WHITE);
		pincode.setTextColor(Color.WHITE);
		
		profileImage.setOnClickListener(this);
		
		/*spingender.setOnItemSelectedListener(new OnItemSelectedListener() {

			@Override
			public void onItemSelected(AdapterView<?> parent,
					View view, int position, long id) {
				// TODO Auto-generated method stub
				
					((TextView) parent.getChildAt(0)).setTextColor(rootView.getContext().getResources().getColor(R.color.white));
			}

			@Override
			public void onNothingSelected(AdapterView<?> parent) {
				// TODO Auto-generated method stub
				((TextView) parent.getChildAt(0)).setTextColor(rootView.getContext().getResources().getColor(R.color.white));

			}

		
		});*/
		rootView.getRootView().setFocusableInTouchMode(true);
		rootView.getRootView().requestFocus();
		rootView.getRootView().setOnKeyListener(new OnKeyListener() {
			@Override
			public boolean onKey(View v, int keyCode, KeyEvent event) {
				if (event.getAction() == KeyEvent.ACTION_DOWN) {
					if (keyCode == KeyEvent.KEYCODE_BACK) {
						FragmentManager fm = getFragmentManager();
						FragmentTransaction tx = fm.beginTransaction();
						tx.replace(R.id.frame_container, new HomeFragment())
								.commit();
						return true;
					}
				}
				return false;
			}
		});
		return rootView;
	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		switch (v.getId()) {
		case R.id.profileimage:
			selectProfileImage();
			break;
		case R.id.btn_update:
			contactnumer.setEnabled(true);
			altcontactnumber.setEnabled(true);
			email_id.setEnabled(true);
			address.setEnabled(true);
			pincode.setEnabled(true);
			spingender.setVisibility(View.VISIBLE);
			gendertext.setVisibility(View.GONE);
			email_id.setVisibility(View.VISIBLE);
			emailText.setVisibility(View.GONE);
			cancel.setVisibility(View.VISIBLE);
			submit.setVisibility(View.VISIBLE);
			state.setEnabled(true);
		//	district.setEnabled(true);
			citytxt.setEnabled(true);
			buttonLayout.setVisibility(View.VISIBLE);
			submit.setOnClickListener(this);
			cancel.setOnClickListener(this);
			
			contactnumer.setTextColor(rootView.getContext().getResources().getColor(R.color.textcolor));
			altcontactnumber.setTextColor(rootView.getContext().getResources().getColor(R.color.textcolor));
			email_id.setTextColor(rootView.getContext().getResources().getColor(R.color.textcolor));
			address.setTextColor(rootView.getContext().getResources().getColor(R.color.textcolor));
			state.setTextColor(rootView.getContext().getResources().getColor(R.color.textcolor));
			citytxt.setTextColor(rootView.getContext().getResources().getColor(R.color.textcolor));
			pincode.setTextColor(rootView.getContext().getResources().getColor(R.color.textcolor));
			
			if(UserDetails.getGender().equals("Male"))
			{
				spingender.setSelection(0);
			}else
			{
				spingender.setSelection(1);
			}
			spingender.setOnItemSelectedListener(new OnItemSelectedListener() {

				@Override
				public void onItemSelected(AdapterView<?> parent,
						View view, int position, long id) {
					// TODO Auto-generated method stub
					
						((TextView) parent.getChildAt(0)).setTextColor(rootView.getContext().getResources().getColor(R.color.textcolor));
				}

				@Override
				public void onNothingSelected(AdapterView<?> parent) {
					// TODO Auto-generated method stub
					((TextView) parent.getChildAt(0)).setTextColor(rootView.getContext().getResources().getColor(R.color.textcolor));

				}

			
			});
			break;
		case R.id.submit:
			/*if(firstname.getText().toString().trim().length()==0)
			{
				firstname.setError("Please Enter your FristName");
				firstname.setFocusable(true);
			}
			else if(lastname.getText().toString().trim().length()==0)
			{
				lastname.setError("Please Enter your LastName");
				lastname.setFocusable(true);
			}		
			else */if( contactnumer.getText().toString().trim().length() != 10)
			{
				contactnumer.setError("Please Enter your 10 digits Contact Number");
				contactnumer.setFocusable(true);
			}
			else if( contactnumer.getText().toString().trim().length()==0)
			{
				contactnumer.setError("Please Enter your 10 digits Contact Number");
				contactnumer.setFocusable(true);
			}
			/*else if(altcontactnumber.getText().toString().trim().length()==0 )
			{
				altcontactnumber.setError("Please Enter your 10 digits Alternate Contact No.");
				altcontactnumber.setFocusable(true);
			}
			else if(altcontactnumber.getText().toString().trim().length()!=10)
			{
				altcontactnumber.setError("Please Enter your 10 digits Alternate Contact No.");
				altcontactnumber.setFocusable(true);
			}*/
			else if(!(isEmailValid(email_id.getText().toString())))
			{
				email_id.setError("Please Enter valid Email Id");
				email_id.setFocusable(true);
			}
			else if(address.getText().toString().trim().length()==0)
			{
				address.setError("Please Enter your Address");
				address.setFocusable(true);
			}
			else if(pincode.getText().toString().trim().length()==0)
			{
				pincode.setError("Please Enter PinCode");
				pincode.setFocusable(true);
			}
			else if(pincode.getText().toString().trim().length()<6)
			{
				pincode.setError("Please Enter compelete PinCode  ");
				pincode.setFocusable(true);
			}
			else if(state.getText().toString().trim().length()==0)
			{
				state.setError("Please select state");
				state.setFocusable(true);
			}
			/*else if(district.getText().toString().trim().length()==0)
			{	
				district.setError("Please select district");
				district.setFocusable(true);
			}*/
			else if(city.getText().toString().trim().length()==0)
			{	
				city.setError("Please select city");
				city.setFocusable(true);
			}
			else
			{
				updateUser();
			}
			
			break;
		case R.id.cancel:
			contactnumer.setEnabled(false);
			altcontactnumber.setEnabled(false);
			email_id.setVisibility(View.GONE);
			emailText.setVisibility(View.VISIBLE);
			address.setEnabled(false);
			pincode.setEnabled(false);
			spingender.setVisibility(View.GONE);
			gendertext.setVisibility(View.VISIBLE);
			state.setEnabled(false);
			//district.setEnabled(false);
			citytxt.setEnabled(false);
			buttonLayout.setVisibility(View.GONE);
			cancel.setVisibility(View.GONE);
			submit.setVisibility(View.GONE);
			contactnumer.setTextColor(Color.WHITE);
			altcontactnumber.setTextColor(Color.WHITE);
			email_id.setTextColor(Color.WHITE);
			address.setTextColor(Color.WHITE);
			state.setTextColor(Color.WHITE);
			citytxt.setTextColor(Color.WHITE);
			pincode.setTextColor(Color.WHITE);
			
			/*spingender.setOnItemSelectedListener(new OnItemSelectedListener() {

				@Override
				public void onItemSelected(AdapterView<?> parent,
						View view, int position, long id) {
					// TODO Auto-generated method stub
					
						((TextView) parent.getChildAt(0)).setTextColor(rootView.getContext().getResources().getColor(R.color.white));
				}

				@Override
				public void onNothingSelected(AdapterView<?> parent) {
					// TODO Auto-generated method stub
					((TextView) parent.getChildAt(0)).setTextColor(rootView.getContext().getResources().getColor(R.color.white));

				}

			
			});*/
			break;
		}

	}
	
	public boolean isEmailValid(String email)
    {
         String regExpn =
             "^(([\\w-]+\\.)+[\\w-]+|([a-zA-Z]{1}|[\\w-]{2,}))@"
                 +"((([0-1]?[0-9]{1,2}|25[0-5]|2[0-4][0-9])\\.([0-1]?"
                   +"[0-9]{1,2}|25[0-5]|2[0-4][0-9])\\."
                   +"([0-1]?[0-9]{1,2}|25[0-5]|2[0-4][0-9])\\.([0-1]?"
                   +"[0-9]{1,2}|25[0-5]|2[0-4][0-9])){1}|"
                   +"([a-zA-Z]+[\\w-]+\\.)+[a-zA-Z]{2,4})$";

     CharSequence inputStr = email;

     Pattern pattern = Pattern.compile(regExpn,Pattern.CASE_INSENSITIVE);
     Matcher matcher = pattern.matcher(inputStr);

     if(matcher.matches())
        return true;
     else
        return false;
    }
	
	public void updateUser()
	{
		selectedaltcontactnumber = altcontactnumber.getText().toString();
		selectedemailid =  email_id.getText().toString();
		selectedaddress = address.getText().toString();
		selectedstate = state.getText().toString();
	//	selecteddist = district.getText().toString();
		selectedcity = city.getText().toString();
		selectedpincode = pincode.getText().toString();
		selectedcontactnumber = contactnumer.getText().toString();
		selectedgender = spingender.getSelectedItem().toString();
			String req = "http://tmlmobilityservices.co.in:8080/CustomerApp_Restws/customerapp/user/updateUserDetails";
			List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(13);
			nameValuePairs.add(new BasicNameValuePair("first_name",UserDetails.getFirst_name()));
			nameValuePairs.add(new BasicNameValuePair("last_name",UserDetails.getLast_name()));
			nameValuePairs.add(new BasicNameValuePair("gender",selectedgender));
			nameValuePairs.add(new BasicNameValuePair("contact_number",selectedcontactnumber));
			nameValuePairs.add(new BasicNameValuePair("alt_contact_number",selectedaltcontactnumber));
			nameValuePairs.add(new BasicNameValuePair("email_id",selectedemailid));
			nameValuePairs.add(new BasicNameValuePair("address",selectedaddress));
			nameValuePairs.add(new BasicNameValuePair("city",selectedcity));
			nameValuePairs.add(new BasicNameValuePair("pincode",selectedpincode));
			nameValuePairs.add(new BasicNameValuePair("district",""));
			nameValuePairs.add(new BasicNameValuePair("state",selectedstate));
			nameValuePairs.add(new BasicNameValuePair("user_id",UserDetails.getUser_id()));


			new AWS_WebServiceCall(getActivity(), req,ServiceHandler.POST ,Constants.updateUserDetails,
					nameValuePairs,new AwsResponseCallback() {

						@Override
						public void onResponseReceive(Object object) {
							// TODO Auto-generated method stub
							boolean register = (boolean) object;
							Log.d("Here", "Register ");
							if(register)
							{
								/* UserDetails.setFirst_name(selectedfirsname);
				                  UserDetails.setLast_name(selectedlastname);*/
				                  UserDetails.setGender(selectedgender);
				                  UserDetails.setEmail_id(selectedemailid);
				                  UserDetails.setContact_number(selectedcontactnumber);
				                  UserDetails.setAlt_contact_number(selectedaltcontactnumber);
				                  UserDetails.setAddress(selectedaddress);
				                  UserDetails.setCity(selectedcity);
				                  UserDetails.setPincode(selectedpincode);
				                //  UserDetails.setDistrict(selecteddist);
				                  UserDetails.setState(selectedstate);
				                
								Toast.makeText(rootView.getContext(),"Details updated succesfully.", Toast.LENGTH_LONG).show();
								//Log.d("Success", "Register ");
								contactnumer.setEnabled(false);
								altcontactnumber.setEnabled(false);
								//email_id.setEnabled(false);
								email_id.setVisibility(View.GONE);
								emailText.setVisibility(View.VISIBLE);
								address.setEnabled(false);
								pincode.setEnabled(false);
								spingender.setVisibility(View.GONE);
								gendertext.setVisibility(View.VISIBLE);
								state.setEnabled(false);
								//district.setEnabled(false);
								citytxt.setEnabled(false);
								buttonLayout.setVisibility(View.GONE);
								cancel.setVisibility(View.GONE);
								submit.setVisibility(View.GONE);
								contactnumer.setTextColor(Color.WHITE);
								altcontactnumber.setTextColor(Color.WHITE);
								email_id.setTextColor(Color.WHITE);
								address.setTextColor(Color.WHITE);
								state.setTextColor(Color.WHITE);
								citytxt.setTextColor(Color.WHITE);
								pincode.setTextColor(Color.WHITE);
								
								
							}
							else
							{
								//Log.d("Here", "Register ");

								Toast.makeText(rootView.getContext(), "Updation failed plaese try again.", Toast.LENGTH_LONG).show();
							}
						
						}

						@Override
						public void onErrorReceive(String string) {
							// TODO Auto-generated method stub
							/*Intent intent = new Intent(RegisterUserActivity.this, LoginActivity.class);
							startActivity(intent);*/
						}

						
					}).execute();
			
		}
	
	public void selectProfileImage()
	{
		// Create intent to Open Image applications like Gallery, Google Photos
		Intent galleryIntent = new Intent(Intent.ACTION_PICK,
		        android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
		// Start the Intent
		startActivityForResult(galleryIntent, 1);
	}
	
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
    	int RESULT_OK = -1;
        try {
            // When an Image is picked
            if (requestCode == 1 && resultCode == RESULT_OK && null != data) {
                // Get the Image from data
 
                Uri selectedImage = data.getData();
                String[] filePathColumn = { MediaStore.Images.Media.DATA };
 
                // Get the cursor
                Cursor cursor = rootView.getContext().getContentResolver().query(selectedImage,
                        filePathColumn, null, null, null);
                // Move to first row
                cursor.moveToFirst();
 
                int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
                String imgDecodableString = cursor.getString(columnIndex);
                imgPath = cursor.getString(columnIndex);
                cursor.close();
              
                // Set the Image in ImageView after decoding the String
                profileImage.setImageBitmap(BitmapFactory
                        .decodeFile(imgDecodableString));
                
                // Get the Image's file name
                String fileNameSegments[] = imgPath.split("/");
                fileName = fileNameSegments[fileNameSegments.length - 1];
                // Put file name in Async Http Post Param which will used in Java web app
                params.put("filename", fileName);
                Log.d("File name", fileName);
                uploadImage();
 
 
            } else {
                Toast.makeText(rootView.getContext(), "You haven't picked Image",
                        Toast.LENGTH_LONG).show();
            }
        } catch (Exception e) {
            Toast.makeText(rootView.getContext(), "Something went wrong", Toast.LENGTH_LONG)
                    .show();
        }
 
    }
	
	public void uploadImage()
	{
		encodeImagetoString();
		Log.d("String", "Uplaoding");
	}
	public void encodeImagetoString() {
        new AsyncTask<Void, Void, String>() {
 
            protected void onPreExecute() {
 
            };
 
            @Override
            protected String doInBackground(Void... params) {
                BitmapFactory.Options options = null;
                options = new BitmapFactory.Options();
                options.inSampleSize = 3;
                bitmap = BitmapFactory.decodeFile(imgPath,
                        options);
                ByteArrayOutputStream stream = new ByteArrayOutputStream();
                // Must compress the Image to reduce image size to make upload easy
                bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream); 
                byte[] byte_arr = stream.toByteArray();
                // Encode Image to String
                encodedString = Base64.encodeToString(byte_arr, Base64.DEFAULT);
                Log.d("Encoded String", encodedString);
                return "";
            }
 
            @Override
            protected void onPostExecute(String msg) {
                /*prgDialog.setMessage("Calling Upload");
                // Put converted Image string into Async Http Post param
                params.put("image", encodedString);
                // Trigger Image upload
                triggerImageUpload();*/
            	Log.d("String", "Uplaoding DO in background");
            	String req = "http://tmlmobilityservices.co.in:8080/CustomerApp_Restws/customerapp/user/uploadProfileImage";
            	List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(3);
    			nameValuePairs.add(new BasicNameValuePair("uploadedInputStream",encodedString));
    			nameValuePairs.add(new BasicNameValuePair("filename",fileName));
    			nameValuePairs.add(new BasicNameValuePair("user_id",UserDetails.getUser_id()));
    			   new AWS_WebServiceCall(getActivity(), req, ServiceHandler.POST, Constants.uploadProfileImage,nameValuePairs, new AwsResponseCallback() {
    		             
    		             @Override
    		             public void onResponseReceive(Object object) {
    		                 // TODO Auto-generated method stub
    		            	 Log.d("String", "Success");
    		             }
    		             
    		             @Override
    		             public void onErrorReceive(String string) {
    		                 // TODO Auto-generated method stub
    		                 Toast.makeText(getActivity(), "Could not load image.", Toast.LENGTH_SHORT).show();
    		             }
    		         }).execute();
            }
        }.execute(null, null, null);
        
    }
}
=======
package com.ttl.customersocialapp;

import java.io.ByteArrayOutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;

import com.loopj.android.http.RequestParams;
import com.ttl.adapter.AwsResponseCallback;
import com.ttl.model.ServiceHandler;
import com.ttl.model.UserDetails;
import com.ttl.webservice.AWS_WebServiceCall;
import com.ttl.webservice.Constants;

import android.app.Fragment;
import android.app.FragmentManager;
import android.app.FragmentTransaction;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Base64;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnKeyListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;


public class CustomerDetailFragment extends Fragment implements OnClickListener {
	View rootView;
	TextView username, city;
	Button submit, cancel;
	ImageView update;
	Spinner spingender;
	EditText contactnumer, altcontactnumber, email_id, address, pincode, state,
			citytxt, district;
	TextView gendertext ,emailText;
	LinearLayout buttonLayout;
	 String selectedgender ,selectedfirsname , selectedlastname ,
	 selectedcontactnumber ,selectedaltcontactnumber ,selectedemailid ,
	 selectedaddress , selectedpincode , selecteduserid ,selectedpassword ,selectedstate ,selectedcity , selecteddist;
	 ImageView profileImage;
	 Bitmap bitmap;
	 String encodedString;
	 String imgPath, fileName;
	 RequestParams params = new RequestParams();
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		// TODO Auto-generated method stub

		rootView = inflater.inflate(R.layout.fragment_customer_detail,
				container, false);
		username = (TextView) rootView.findViewById(R.id.username);
		city = (TextView) rootView.findViewById(R.id.city);
		contactnumer = (EditText) rootView.findViewById(R.id.txtcontactnumber);
		altcontactnumber = (EditText) rootView.findViewById(R.id.txtaltnumber);
		email_id = (EditText) rootView.findViewById(R.id.txtemailid);
		address = (EditText) rootView.findViewById(R.id.txtAddress);
		pincode = (EditText) rootView.findViewById(R.id.txtpincode);
		state = (EditText) rootView.findViewById(R.id.txtstate);
		citytxt = (EditText) rootView.findViewById(R.id.txtcity);
		//district = (EditText) rootView.findViewById(R.id.txtdistrict);
		spingender = (Spinner) rootView.findViewById(R.id.txtgender);
		update = (ImageView) rootView.findViewById(R.id.btn_update);
		buttonLayout = (LinearLayout) rootView.findViewById(R.id.buttonlayout);
		submit = (Button) rootView.findViewById(R.id.submit);
		cancel = (Button) rootView.findViewById(R.id.cancel);
		gendertext = (TextView) rootView.findViewById(R.id.gender);
		profileImage = (ImageView) rootView.findViewById(R.id.profileimage);
		emailText = (TextView) rootView.findViewById(R.id.txtemailid_view);
		
		username.setText(UserDetails.getFirst_name() + " "
				+ UserDetails.getLast_name());
		city.setText(UserDetails.getCity());
		contactnumer.setText(UserDetails.getContact_number());
		altcontactnumber.setText(UserDetails.getAlt_contact_number());
		emailText.setText(UserDetails.getEmail_id());
		address.setText(UserDetails.getAddress());
		pincode.setText(UserDetails.getPincode());
		state.setText(UserDetails.getState());
		//district.setText(UserDetails.getDistrict());
		citytxt.setText(UserDetails.getCity());
		gendertext.setText(UserDetails.getGender());
		
		/*if (UserDetails.getGender().equals("Male"))
			spingender.setSelection(0);
		else
			spingender.setSelection(1);
*/
		contactnumer.setEnabled(false);
		altcontactnumber.setEnabled(false);
		email_id.setVisibility(View.GONE);
		
		address.setEnabled(false);
		pincode.setEnabled(false);
		spingender.setVisibility(View.GONE);
		state.setEnabled(false);
		//district.setEnabled(false);
		citytxt.setEnabled(false);
		buttonLayout.setVisibility(View.GONE);
		cancel.setVisibility(View.GONE);
		submit.setVisibility(View.GONE);

		update.setOnClickListener(this);
		
		contactnumer.setTextColor(Color.WHITE);
		altcontactnumber.setTextColor(Color.WHITE);
	//	email_id.setTextColor(Color.WHITE);
		address.setTextColor(Color.WHITE);
		state.setTextColor(Color.WHITE);
		citytxt.setTextColor(Color.WHITE);
		pincode.setTextColor(Color.WHITE);
		
		profileImage.setOnClickListener(this);
		
		/*spingender.setOnItemSelectedListener(new OnItemSelectedListener() {

			@Override
			public void onItemSelected(AdapterView<?> parent,
					View view, int position, long id) {
				// TODO Auto-generated method stub
				
					((TextView) parent.getChildAt(0)).setTextColor(rootView.getContext().getResources().getColor(R.color.white));
			}

			@Override
			public void onNothingSelected(AdapterView<?> parent) {
				// TODO Auto-generated method stub
				((TextView) parent.getChildAt(0)).setTextColor(rootView.getContext().getResources().getColor(R.color.white));

			}

		
		});*/
		rootView.getRootView().setFocusableInTouchMode(true);
		rootView.getRootView().requestFocus();
		rootView.getRootView().setOnKeyListener(new OnKeyListener() {
			@Override
			public boolean onKey(View v, int keyCode, KeyEvent event) {
				if (event.getAction() == KeyEvent.ACTION_DOWN) {
					if (keyCode == KeyEvent.KEYCODE_BACK) {
						FragmentManager fm = getFragmentManager();
						FragmentTransaction tx = fm.beginTransaction();
						tx.replace(R.id.frame_container, new HomeFragment())
								.commit();
						return true;
					}
				}
				return false;
			}
		});
		return rootView;
	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		switch (v.getId()) {
		case R.id.profileimage:
			selectProfileImage();
			break;
		case R.id.btn_update:
			contactnumer.setEnabled(true);
			altcontactnumber.setEnabled(true);
			email_id.setEnabled(true);
			address.setEnabled(true);
			pincode.setEnabled(true);
			spingender.setVisibility(View.VISIBLE);
			gendertext.setVisibility(View.GONE);
			email_id.setVisibility(View.VISIBLE);
			emailText.setVisibility(View.GONE);
			cancel.setVisibility(View.VISIBLE);
			submit.setVisibility(View.VISIBLE);
			state.setEnabled(true);
		//	district.setEnabled(true);
			citytxt.setEnabled(true);
			buttonLayout.setVisibility(View.VISIBLE);
			submit.setOnClickListener(this);
			cancel.setOnClickListener(this);
			
			contactnumer.setTextColor(rootView.getContext().getResources().getColor(R.color.textcolor));
			altcontactnumber.setTextColor(rootView.getContext().getResources().getColor(R.color.textcolor));
			email_id.setTextColor(rootView.getContext().getResources().getColor(R.color.textcolor));
			address.setTextColor(rootView.getContext().getResources().getColor(R.color.textcolor));
			state.setTextColor(rootView.getContext().getResources().getColor(R.color.textcolor));
			citytxt.setTextColor(rootView.getContext().getResources().getColor(R.color.textcolor));
			pincode.setTextColor(rootView.getContext().getResources().getColor(R.color.textcolor));
			
			if(UserDetails.getGender().equals("Male"))
			{
				spingender.setSelection(0);
			}else
			{
				spingender.setSelection(1);
			}
			spingender.setOnItemSelectedListener(new OnItemSelectedListener() {

				@Override
				public void onItemSelected(AdapterView<?> parent,
						View view, int position, long id) {
					// TODO Auto-generated method stub
					
						((TextView) parent.getChildAt(0)).setTextColor(rootView.getContext().getResources().getColor(R.color.textcolor));
				}

				@Override
				public void onNothingSelected(AdapterView<?> parent) {
					// TODO Auto-generated method stub
					((TextView) parent.getChildAt(0)).setTextColor(rootView.getContext().getResources().getColor(R.color.textcolor));

				}

			
			});
			break;
		case R.id.submit:
			/*if(firstname.getText().toString().trim().length()==0)
			{
				firstname.setError("Please Enter your FristName");
				firstname.setFocusable(true);
			}
			else if(lastname.getText().toString().trim().length()==0)
			{
				lastname.setError("Please Enter your LastName");
				lastname.setFocusable(true);
			}		
			else */if( contactnumer.getText().toString().trim().length() != 10)
			{
				contactnumer.setError("Please Enter your 10 digits Contact Number");
				contactnumer.setFocusable(true);
			}
			else if( contactnumer.getText().toString().trim().length()==0)
			{
				contactnumer.setError("Please Enter your 10 digits Contact Number");
				contactnumer.setFocusable(true);
			}
			/*else if(altcontactnumber.getText().toString().trim().length()==0 )
			{
				altcontactnumber.setError("Please Enter your 10 digits Alternate Contact No.");
				altcontactnumber.setFocusable(true);
			}
			else if(altcontactnumber.getText().toString().trim().length()!=10)
			{
				altcontactnumber.setError("Please Enter your 10 digits Alternate Contact No.");
				altcontactnumber.setFocusable(true);
			}*/
			else if(!(isEmailValid(email_id.getText().toString())))
			{
				email_id.setError("Please Enter valid Email Id");
				email_id.setFocusable(true);
			}
			else if(address.getText().toString().trim().length()==0)
			{
				address.setError("Please Enter your Address");
				address.setFocusable(true);
			}
			else if(pincode.getText().toString().trim().length()==0)
			{
				pincode.setError("Please Enter PinCode");
				pincode.setFocusable(true);
			}
			else if(pincode.getText().toString().trim().length()<6)
			{
				pincode.setError("Please Enter compelete PinCode  ");
				pincode.setFocusable(true);
			}
			else if(state.getText().toString().trim().length()==0)
			{
				state.setError("Please select state");
				state.setFocusable(true);
			}
			/*else if(district.getText().toString().trim().length()==0)
			{	
				district.setError("Please select district");
				district.setFocusable(true);
			}*/
			else if(city.getText().toString().trim().length()==0)
			{	
				city.setError("Please select city");
				city.setFocusable(true);
			}
			else
			{
				updateUser();
			}
			
			break;
		case R.id.cancel:
			contactnumer.setEnabled(false);
			altcontactnumber.setEnabled(false);
			email_id.setVisibility(View.GONE);
			emailText.setVisibility(View.VISIBLE);
			address.setEnabled(false);
			pincode.setEnabled(false);
			spingender.setVisibility(View.GONE);
			gendertext.setVisibility(View.VISIBLE);
			state.setEnabled(false);
			//district.setEnabled(false);
			citytxt.setEnabled(false);
			buttonLayout.setVisibility(View.GONE);
			cancel.setVisibility(View.GONE);
			submit.setVisibility(View.GONE);
			contactnumer.setTextColor(Color.WHITE);
			altcontactnumber.setTextColor(Color.WHITE);
			email_id.setTextColor(Color.WHITE);
			address.setTextColor(Color.WHITE);
			state.setTextColor(Color.WHITE);
			citytxt.setTextColor(Color.WHITE);
			pincode.setTextColor(Color.WHITE);
			
			/*spingender.setOnItemSelectedListener(new OnItemSelectedListener() {

				@Override
				public void onItemSelected(AdapterView<?> parent,
						View view, int position, long id) {
					// TODO Auto-generated method stub
					
						((TextView) parent.getChildAt(0)).setTextColor(rootView.getContext().getResources().getColor(R.color.white));
				}

				@Override
				public void onNothingSelected(AdapterView<?> parent) {
					// TODO Auto-generated method stub
					((TextView) parent.getChildAt(0)).setTextColor(rootView.getContext().getResources().getColor(R.color.white));

				}

			
			});*/
			break;
		}

	}
	
	public boolean isEmailValid(String email)
    {
         String regExpn =
             "^(([\\w-]+\\.)+[\\w-]+|([a-zA-Z]{1}|[\\w-]{2,}))@"
                 +"((([0-1]?[0-9]{1,2}|25[0-5]|2[0-4][0-9])\\.([0-1]?"
                   +"[0-9]{1,2}|25[0-5]|2[0-4][0-9])\\."
                   +"([0-1]?[0-9]{1,2}|25[0-5]|2[0-4][0-9])\\.([0-1]?"
                   +"[0-9]{1,2}|25[0-5]|2[0-4][0-9])){1}|"
                   +"([a-zA-Z]+[\\w-]+\\.)+[a-zA-Z]{2,4})$";

     CharSequence inputStr = email;

     Pattern pattern = Pattern.compile(regExpn,Pattern.CASE_INSENSITIVE);
     Matcher matcher = pattern.matcher(inputStr);

     if(matcher.matches())
        return true;
     else
        return false;
    }
	
	public void updateUser()
	{
		selectedaltcontactnumber = altcontactnumber.getText().toString();
		selectedemailid =  email_id.getText().toString();
		selectedaddress = address.getText().toString();
		selectedstate = state.getText().toString();
	//	selecteddist = district.getText().toString();
		selectedcity = city.getText().toString();
		selectedpincode = pincode.getText().toString();
		selectedcontactnumber = contactnumer.getText().toString();
		selectedgender = spingender.getSelectedItem().toString();
			String req = "http://tmlmobilityservices.co.in:8080/CustomerApp_Restws/customerapp/user/updateUserDetails";
			List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(13);
			nameValuePairs.add(new BasicNameValuePair("first_name",UserDetails.getFirst_name()));
			nameValuePairs.add(new BasicNameValuePair("last_name",UserDetails.getLast_name()));
			nameValuePairs.add(new BasicNameValuePair("gender",selectedgender));
			nameValuePairs.add(new BasicNameValuePair("contact_number",selectedcontactnumber));
			nameValuePairs.add(new BasicNameValuePair("alt_contact_number",selectedaltcontactnumber));
			nameValuePairs.add(new BasicNameValuePair("email_id",selectedemailid));
			nameValuePairs.add(new BasicNameValuePair("address",selectedaddress));
			nameValuePairs.add(new BasicNameValuePair("city",selectedcity));
			nameValuePairs.add(new BasicNameValuePair("pincode",selectedpincode));
			nameValuePairs.add(new BasicNameValuePair("district",""));
			nameValuePairs.add(new BasicNameValuePair("state",selectedstate));
			nameValuePairs.add(new BasicNameValuePair("user_id",UserDetails.getUser_id()));


			new AWS_WebServiceCall(getActivity(), req,ServiceHandler.POST ,Constants.updateUserDetails,
					nameValuePairs,new AwsResponseCallback() {

						@Override
						public void onResponseReceive(Object object) {
							// TODO Auto-generated method stub
							boolean register = (boolean) object;
							Log.d("Here", "Register ");
							if(register)
							{
								/* UserDetails.setFirst_name(selectedfirsname);
				                  UserDetails.setLast_name(selectedlastname);*/
				                  UserDetails.setGender(selectedgender);
				                  UserDetails.setEmail_id(selectedemailid);
				                  UserDetails.setContact_number(selectedcontactnumber);
				                  UserDetails.setAlt_contact_number(selectedaltcontactnumber);
				                  UserDetails.setAddress(selectedaddress);
				                  UserDetails.setCity(selectedcity);
				                  UserDetails.setPincode(selectedpincode);
				                //  UserDetails.setDistrict(selecteddist);
				                  UserDetails.setState(selectedstate);
				                
								Toast.makeText(rootView.getContext(),"Details updated succesfully.", Toast.LENGTH_LONG).show();
								//Log.d("Success", "Register ");
								contactnumer.setEnabled(false);
								altcontactnumber.setEnabled(false);
								//email_id.setEnabled(false);
								email_id.setVisibility(View.GONE);
								emailText.setVisibility(View.VISIBLE);
								address.setEnabled(false);
								pincode.setEnabled(false);
								spingender.setVisibility(View.GONE);
								gendertext.setVisibility(View.VISIBLE);
								state.setEnabled(false);
								//district.setEnabled(false);
								citytxt.setEnabled(false);
								buttonLayout.setVisibility(View.GONE);
								cancel.setVisibility(View.GONE);
								submit.setVisibility(View.GONE);
								contactnumer.setTextColor(Color.WHITE);
								altcontactnumber.setTextColor(Color.WHITE);
								email_id.setTextColor(Color.WHITE);
								address.setTextColor(Color.WHITE);
								state.setTextColor(Color.WHITE);
								citytxt.setTextColor(Color.WHITE);
								pincode.setTextColor(Color.WHITE);
								
								
							}
							else
							{
								//Log.d("Here", "Register ");

								Toast.makeText(rootView.getContext(), "Updation failed plaese try again.", Toast.LENGTH_LONG).show();
							}
						
						}

						@Override
						public void onErrorReceive(String string) {
							// TODO Auto-generated method stub
							/*Intent intent = new Intent(RegisterUserActivity.this, LoginActivity.class);
							startActivity(intent);*/
						}

						
					}).execute();
			
		}
	
	public void selectProfileImage()
	{
		// Create intent to Open Image applications like Gallery, Google Photos
		Intent galleryIntent = new Intent(Intent.ACTION_PICK,
		        android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
		// Start the Intent
		startActivityForResult(galleryIntent, 1);
	}
	
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
    	int RESULT_OK = -1;
        try {
            // When an Image is picked
            if (requestCode == 1 && resultCode == RESULT_OK && null != data) {
                // Get the Image from data
 
                Uri selectedImage = data.getData();
                String[] filePathColumn = { MediaStore.Images.Media.DATA };
 
                // Get the cursor
                Cursor cursor = rootView.getContext().getContentResolver().query(selectedImage,
                        filePathColumn, null, null, null);
                // Move to first row
                cursor.moveToFirst();
 
                int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
                String imgDecodableString = cursor.getString(columnIndex);
                imgPath = cursor.getString(columnIndex);
                cursor.close();
              
                // Set the Image in ImageView after decoding the String
                profileImage.setImageBitmap(BitmapFactory
                        .decodeFile(imgDecodableString));
                
                // Get the Image's file name
                String fileNameSegments[] = imgPath.split("/");
                fileName = fileNameSegments[fileNameSegments.length - 1];
                // Put file name in Async Http Post Param which will used in Java web app
                params.put("filename", fileName);
                Log.d("File name", fileName);
                uploadImage();
 
 
            } else {
                Toast.makeText(rootView.getContext(), "You haven't picked Image",
                        Toast.LENGTH_LONG).show();
            }
        } catch (Exception e) {
            Toast.makeText(rootView.getContext(), "Something went wrong", Toast.LENGTH_LONG)
                    .show();
        }
 
    }
	
	public void uploadImage()
	{
		encodeImagetoString();
		Log.d("String", "Uplaoding");
	}
	public void encodeImagetoString() {
        new AsyncTask<Void, Void, String>() {
 
            protected void onPreExecute() {
 
            };
 
            @Override
            protected String doInBackground(Void... params) {
                BitmapFactory.Options options = null;
                options = new BitmapFactory.Options();
                options.inSampleSize = 3;
                bitmap = BitmapFactory.decodeFile(imgPath,
                        options);
                ByteArrayOutputStream stream = new ByteArrayOutputStream();
                // Must compress the Image to reduce image size to make upload easy
                bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream); 
                byte[] byte_arr = stream.toByteArray();
                // Encode Image to String
                encodedString = Base64.encodeToString(byte_arr, Base64.DEFAULT);
                Log.d("Encoded String", encodedString);
                return "";
            }
 
            @Override
            protected void onPostExecute(String msg) {
                /*prgDialog.setMessage("Calling Upload");
                // Put converted Image string into Async Http Post param
                params.put("image", encodedString);
                // Trigger Image upload
                triggerImageUpload();*/
            	Log.d("String", "Uplaoding DO in background");
            	String req = "http://tmlmobilityservices.co.in:8080/CustomerApp_Restws/customerapp/user/uploadProfileImage";
            	List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(3);
    			nameValuePairs.add(new BasicNameValuePair("uploadedInputStream",encodedString));
    			nameValuePairs.add(new BasicNameValuePair("filename",fileName));
    			nameValuePairs.add(new BasicNameValuePair("user_id",UserDetails.getUser_id()));
    			   new AWS_WebServiceCall(getActivity(), req, ServiceHandler.POST, Constants.uploadProfileImage,nameValuePairs, new AwsResponseCallback() {
    		             
    		             @Override
    		             public void onResponseReceive(Object object) {
    		                 // TODO Auto-generated method stub
    		            	 Log.d("String", "Success");
    		             }
    		             
    		             @Override
    		             public void onErrorReceive(String string) {
    		                 // TODO Auto-generated method stub
    		                 Toast.makeText(getActivity(), "Could not load image.", Toast.LENGTH_SHORT).show();
    		             }
    		         }).execute();
            }
        }.execute(null, null, null);
        
    }
}
>>>>>>> TMSC QA 3.4V
