<<<<<<< HEAD
package com.ttl.customersocialapp;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import com.ttl.adapter.ResponseCallback;
import com.ttl.communication.SamlArtifact;
import com.ttl.helper.DatabaseHandler;
import com.ttl.model.ComplaintArea;
import com.ttl.model.Complaint_Registered_Parent;
import com.ttl.model.Dealer;
import com.ttl.model.ServiceBookingUser;
import com.ttl.model.UserDetails;
import com.ttl.webservice.Config;
import com.ttl.webservice.Constants;
import com.ttl.webservice.WebServiceCall;

import android.app.AlertDialog;
import android.app.Fragment;
import android.app.FragmentManager;
import android.app.FragmentTransaction;
import android.content.DialogInterface;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnKeyListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;
import java.util.Collections;
import java.util.Comparator;
public class ComplaintRegistrationFragment extends Fragment {
	private Spinner  spinner_c_area,spinner_c_subarea,spinner_c_problem,spinner_regNo,spinner_city,spinner_dealer;     
	private EditText edit_dealerNo;
	private ArrayList<ComplaintArea> lst_c_area = new ArrayList<ComplaintArea>();
	private ArrayAdapter<String> adaptercities;
	private ArrayList<Dealer> dealers  = new ArrayList<Dealer>();
	private Button btn_submit , btn_reset;
	private ArrayList<String> complaintSuccess;
	private ServiceBookingUser user = new ServiceBookingUser();
	private EditText edit_varient,edit_email,edit_mobile,edit_complaintback,edit_resolution;
	String DIVISIONNAME , CHASSISNO ,contact_id;
	private Complaint_Registered_Parent complreg=new Complaint_Registered_Parent();
	List<String> regnovalues = new ArrayList<String>();
	View v;
	@Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
            Bundle savedInstanceState) {
 
        //View v = inflater.inflate(R.layout.fragment_complaint_registration, container, false);
         v = inflater.inflate(R.layout.fragment_complaintregistration, container, false);
        spinner_c_area = (Spinner) v.findViewById(R.id.spinner_c_area);
  		spinner_c_subarea = (Spinner) v.findViewById(R.id.spinner_c_subarea);
  		spinner_c_problem = (Spinner) v.findViewById(R.id.spinner_c_problem);
  		spinner_regNo = (Spinner) v.findViewById(R.id.spinner_regNo);
  		edit_varient = (EditText) v.findViewById(R.id.edit_varient);
		edit_email = (EditText) v.findViewById(R.id.edit_email);
		edit_mobile = (EditText) v.findViewById(R.id.edit_mobile);
  		spinner_city = (Spinner) v.findViewById(R.id.spinner_city);
  		spinner_dealer = (Spinner) v.findViewById(R.id.spinner_dealer);
  		edit_dealerNo = (EditText)v.findViewById(R.id.edit_dealerNo);
  		btn_submit = (Button) v.findViewById(R.id.btn_submit);
  		edit_complaintback = (EditText) v.findViewById(R.id.edit_complaintback);
  		edit_resolution = (EditText) v.findViewById(R.id.edit_resolution);
  		//new SamlArtifact(v.getContext()).execute();
  		
  		if(Config.getSAMLARTIFACT().equals(""))
		{
			new SamlArtifact(getActivity()).execute();
		}
        String req = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\">"
        		+"<SOAP:Body>"
        		+"<GetCompTypeByBUCSB xmlns=\"src.com.CSB\" preserveSpace=\"no\" qAccess=\"0\" qValues=\"\">"
        		+"<SUB_TYPE>TMPC</SUB_TYPE>"
        		+"</GetCompTypeByBUCSB>"
        		+"</SOAP:Body>"
        		+"</SOAP:Envelope>";
//        String req1 = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\">"
//				+"<SOAP:Body>"
//				+"<GetCompSubTypeByParRowIDCSB xmlns=\"src.com.CSB\" preserveSpace=\"no\" qAccess=\"0\" qValues=\"\">"
//		      +"<PAR_ROW_ID>1-2WSYOHT</PAR_ROW_ID>"
//		      +"<BU>TMPC</BU>"
//		    +"</GetCompSubTypeByParRowIDCSB>"
//		  +"</SOAP:Body>"
//		+"</SOAP:Envelope>";
//
//		String req2 = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\">"
//				+"<SOAP:Body>"
//				+"<GetCompCitiesByType xmlns=\"src.com.CSB\" preserveSpace=\"no\" qAccess=\"0\" qValues=\"\">"
//		      +"<CMPL_AREAROW_ID>1-2E6ZGX</CMPL_AREAROW_ID>"
//		    +"</GetCompCitiesByType>"
//		  +"</SOAP:Body>"
//		+"</SOAP:Envelope>";
        
//        String req3 = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\">"
//				  +"<SOAP:Body>"
//				  +"<GetCompPrblmAreabySubAreaCSB xmlns=\"src.com.CSB\" preserveSpace=\"no\" qAccess=\"0\" qValues=\"\">"
//				      +"<SUB_AREA>Service Advisor-1</SUB_AREA>"
//				    +"</GetCompPrblmAreabySubAreaCSB>"
//				  +"</SOAP:Body>"
//				+"</SOAP:Envelope>";
        
      	//	new WebServiceCall(getActivity(), req3, Constants.GetCompPrblmAreabySubAreaCSB, "Populating Compplain Area.").execute();
        spinner_c_problem.setOnItemSelectedListener(new OnItemSelectedListener() {

			@Override
			public void onItemSelected(AdapterView<?> parent, View view,
					int position, long id) {
				// TODO Auto-generated method stub
				if(position!=0)
				{
					((TextView) parent.getChildAt(0)).setTextColor(v.getContext().getResources().getColor(R.color.textcolor));

				}else
				{
					((TextView) parent.getChildAt(0)).setTextColor(v.getContext().getResources().getColor(R.color.hintcolor));

				}
			}

			@Override
			public void onNothingSelected(AdapterView<?> parent) {
				// TODO Auto-generated method stub
				
			}
		}) ;	
      		new WebServiceCall(getActivity(), req, Constants.GetCompTypeByBUCSB,new ResponseCallback() {
				
				@SuppressWarnings("unchecked")
				@Override
				public void onResponseReceive(Object object) {
					// TODO Auto-generated method stub
					lst_c_area = (ArrayList<ComplaintArea>) object;
					List<String> complainarea = new ArrayList<String>();
					complainarea.add("Complaint Area");
					for (int i = 0; i < lst_c_area.size(); i++) {
						Log.i("lst_c_area", lst_c_area.get(i).VAL + " "+ lst_c_area.get(i).ROW_ID);
						complainarea.add(lst_c_area.get(i).VAL);
					}
					ArrayAdapter<String> adapter = new ArrayAdapter<String>(getActivity(),
					        android.R.layout.simple_spinner_item, complainarea);
					adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
					spinner_c_area.setAdapter(adapter);
				}
				
				@Override
				public void onErrorReceive(String string) {
					// TODO Auto-generated method stub
					Toast.makeText(getActivity(), string, Toast.LENGTH_SHORT).show();
				}
			}, "Populating Complaint Area.").execute();
      		
      		regnovalues.add("Registration Number");
      		regnovalues.add("Not Available");
	  	       int size = new UserDetails().getRegNumberList().size();
	  	       for(int i = 0 ; i<size; i++)
	  	       {
	  	    	   regnovalues.add(new UserDetails().getRegNumberList().get(i).get("registration_num"));
	  	       }
	      		ArrayAdapter<String> regno = new ArrayAdapter<String>(getActivity(),android.R.layout.simple_spinner_item, regnovalues);
	 	       regno.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
	 	       spinner_regNo.setAdapter(regno);
      		spinner_regNo.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {

    			@Override
    			public void onItemSelected(AdapterView<?> arg0, View arg1, int pos, long arg3) {

    				String regNo = spinner_regNo.getSelectedItem().toString();
    	      	    spinner_c_area.setSelection(0);
    	      	    spinner_c_subarea.setSelection(0);
    	      	    spinner_c_problem.setSelection(0);
    	      	    spinner_city.setSelection(0);
    	      	    spinner_dealer.setSelection(0);
    	      	    edit_varient.setText("");
    	      	    edit_complaintback.setText("");
    	      	    edit_resolution.setText("");
    	      	    edit_mobile.setText("");
    	      	    edit_email.setText("");
    	      	    edit_dealerNo.setText("");
    				Log.i("Selected item : ", regNo + " AT " + pos);
    				if (pos != 0) {
    					// fire web service
						((TextView) arg0.getChildAt(0)).setTextColor(v.getContext().getResources().getColor(R.color.textcolor));

    					if(regNo.toString().equals("Not Available"))
    					{
    						edit_email.setText(UserDetails.getEmail_id().toString());
							edit_mobile.setText(UserDetails.getContact_number().toString());
							contact_id = "";

    					}
    					else
    					{
    					String req = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\">"
    							+ "<SOAP:Body>"
    							+ "<GetCustomerVehicleDetailsCSB xmlns=\"src.com.CSB\" preserveSpace=\"no\" qAccess=\"0\" qValues=\"\">"
    							+ "<RegistrationNumber>" + regNo + "</RegistrationNumber>"
    							+ "<ChassisNumber></ChassisNumber>" + "<MobileNo></MobileNo>"
    							+ "</GetCustomerVehicleDetailsCSB>" + "</SOAP:Body>" + "</SOAP:Envelope>";
    				
    					new WebServiceCall(getActivity(), req, Constants.GetCustomerVehicleDetailsCSB, new ResponseCallback() {

    						@Override
    						public void onResponseReceive(Object object) {
    							
    							user = (ServiceBookingUser) object;
    							Log.i("onResponseRecieve", user.PL + " " + user.PPL + " "+user.email);
    							edit_varient.setText(user.PL);
    							edit_email.setText(user.getEmail());
    							edit_mobile.setText(user.getPhoneno());
    							CHASSISNO = user.getCHASSISNUMBER();
    							contact_id = user.getContact_id();
    						}

    						@Override
    						public void onErrorReceive(String string) {
    							
    							Toast.makeText(getActivity(), string, Toast.LENGTH_SHORT).show();
    						}
    					},"Populating Data..").execute(); 
    					}
    				}else
					{
						((TextView) arg0.getChildAt(0)).setTextColor(v.getContext().getResources().getColor(R.color.hintcolor));

					}

    			}

    			@Override
    			public void onNothingSelected(AdapterView<?> arg0) {
    				

    			}

    		});
      		
      		spinner_c_area.setOnItemSelectedListener(new OnItemSelectedListener() {

				@Override
				public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
					// TODO Auto-generated method stub
					
		      	    spinner_c_subarea.setSelection(0);
		      	    spinner_c_problem.setSelection(0);
		      	    spinner_city.setSelection(0);
		      	    spinner_dealer.setSelection(0);
		      	    edit_complaintback.setText("");
		      	    edit_resolution.setText("");
		      	   
		      	    edit_dealerNo.setText("");
					if(position!=0){
				//	String PAR_ROW_ID =  lst_c_area.get(position-1).getPAR_ROW_ID();
						((TextView) parent.getChildAt(0)).setTextColor(v.getContext().getResources().getColor(R.color.textcolor));

					for (int i = 0; i < lst_c_area.size(); i++) {
						Log.i("lst_c_area", lst_c_area.get(i).VAL + " " + lst_c_area.get(i).PAR_ROW_ID + " " + lst_c_area.get(i).ROW_ID);
					}
					
					Log.i("spinner_c_area", spinner_c_area.getSelectedItem().toString() + " AT " + position + " PAR_ROW_ID "+lst_c_area.get(position-1).getPAR_ROW_ID() + " " +lst_c_area.get(position-1).getROW_ID());
					String req1 = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\">"
							+"<SOAP:Body>"
							+"<GetCompSubTypeByParRowIDCSB xmlns=\"src.com.CSB\" preserveSpace=\"no\" qAccess=\"0\" qValues=\"\">"
					      +"<PAR_ROW_ID>"+lst_c_area.get(position-1).ROW_ID+"</PAR_ROW_ID>"
					      +"<BU>TMPC</BU>"
					    +"</GetCompSubTypeByParRowIDCSB>"
					  +"</SOAP:Body>"
					+"</SOAP:Envelope>";
					new WebServiceCall(getActivity(), req1, Constants.GetCompSubTypeByParRowIDCSB, new ResponseCallback() {

						@Override
						public void onResponseReceive(Object object) {
							// TODO Auto-generated method stub
							@SuppressWarnings("unchecked")
							ArrayList <String> list = (ArrayList<String>) object;
							ArrayAdapter<String> adapter = new ArrayAdapter<String>(getActivity(),
							        android.R.layout.simple_spinner_item, list);
							adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
							spinner_c_subarea.setAdapter(adapter);
						}

						@Override
						public void onErrorReceive(String string) {
							// TODO Auto-generated method stub
							Toast.makeText(getActivity(), string, Toast.LENGTH_SHORT).show();
						}
						
					},"Populating Complaint SubArea.").execute();
					
					String req2 = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\">"
							+"<SOAP:Body>"
							+"<GetCompCitiesByType xmlns=\"src.com.CSB\" preserveSpace=\"no\" qAccess=\"0\" qValues=\"\">"
					      +"<CMPL_AREAROW_ID>"+lst_c_area.get(position-1).ROW_ID+"</CMPL_AREAROW_ID>"
					    +"</GetCompCitiesByType>"
					  +"</SOAP:Body>"
					+"</SOAP:Envelope>";
					
					new WebServiceCall(getActivity(), req2, Constants.GetDSSDealerCitiesCSB, new ResponseCallback() {

						@Override
						public void onResponseReceive(Object object) {
							// TODO Auto-generated method stub
							@SuppressWarnings("unchecked")
							ArrayList <String> list = (ArrayList<String>) object;
							Collections.sort(list, new Comparator<String>( ) {

								@Override
								public int compare(String lhs, String rhs) {
									// TODO Auto-generated method stub
									return lhs.compareToIgnoreCase(rhs);
								}
							});
							adaptercities = new ArrayAdapter<String>(getActivity(),android.R.layout.simple_spinner_item, list);
							adaptercities.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
							spinner_city.setAdapter(adaptercities);
						}

						@Override
						public void onErrorReceive(String string) {
							// TODO Auto-generated method stub
							Toast.makeText(getActivity(), string, Toast.LENGTH_SHORT).show();
						}
						
					},"Populating Cities.").execute(); 
				}else
				{
					((TextView) parent.getChildAt(0)).setTextColor(v.getContext().getResources().getColor(R.color.hintcolor));
				}
				}
				@Override
				public void onNothingSelected(AdapterView<?> parent) {
					// TODO Auto-generated method stub
					
				}
			});
      		
      		spinner_c_subarea.setOnItemSelectedListener(new OnItemSelectedListener() {

				@Override
				public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
					// TODO Auto-generated method stub
					
					if(position!=0){
						((TextView) parent.getChildAt(0)).setTextColor(v.getContext().getResources().getColor(R.color.textcolor));

					String req = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\">"
					  +"<SOAP:Body>"
					  +"<GetCompPrblmAreabySubAreaCSB xmlns=\"src.com.CSB\" preserveSpace=\"no\" qAccess=\"0\" qValues=\"\">"
					      +"<SUB_AREA>"+spinner_c_subarea.getSelectedItem().toString()+"</SUB_AREA>"
					    +"</GetCompPrblmAreabySubAreaCSB>"
					  +"</SOAP:Body>"
					+"</SOAP:Envelope>";
					new WebServiceCall(getActivity(), req, Constants.GetCompPrblmAreabySubAreaCSB, new ResponseCallback() {

						@Override
						public void onResponseReceive(Object object) {
							@SuppressWarnings("unchecked")
							ArrayList <String> list = (ArrayList<String>) object;
							ArrayAdapter<String> adapter = new ArrayAdapter<String>(getActivity(),
							        android.R.layout.simple_spinner_item, list);
							adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
							spinner_c_problem.setAdapter(adapter);
							
								
						
						}

						@Override
						public void onErrorReceive(String string) {
							// TODO Auto-generated method stub
							Toast.makeText(getActivity(), string, Toast.LENGTH_SHORT).show();
						}
						
					},"Populating Complaint Problem Area.").execute();
					}else
					{
						((TextView) parent.getChildAt(0)).setTextColor(v.getContext().getResources().getColor(R.color.hintcolor));

					}
				}

				@Override
				public void onNothingSelected(AdapterView<?> parent) {
					// TODO Auto-generated method stub
					
				}
			});
      		
      		
      		spinner_city.setOnItemSelectedListener(new OnItemSelectedListener() {

				@Override
				public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
					// TODO Auto-generated method stub
					if(position!=0){
						((TextView) parent.getChildAt(0)).setTextColor(v.getContext().getResources().getColor(R.color.textcolor));

					String req = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\">"
							+ "<SOAP:Body>"
							+ "<GetDlrsByCityAndTypeCSB xmlns=\"src.com.CSB\" preserveSpace=\"no\" qAccess=\"0\" qValues=\"\">"
							+ "<CITY>" + spinner_city.getSelectedItem().toString() + "</CITY>" + "<BU>TMPC</BU>"
							+ "</GetDlrsByCityAndTypeCSB>" + "</SOAP:Body>" + "</SOAP:Envelope>";
					new WebServiceCall(getActivity(), req, Constants.GetDlrsByCityAndTypeCSB, new ResponseCallback() {
						
						@SuppressWarnings("unchecked")
						@Override
						public void onResponseReceive(Object object) {
							// TODO Auto-generated method stub
							dealers = (ArrayList<Dealer>) object;
							List<String> commonname = new ArrayList<String>();
							commonname.add("Preferred Dealer");
							for (int i = 0; i < dealers.size(); i++) {
								Log.i("dealers", dealers.get(i).commonname + " "+ dealers.get(i).divisionId);
							commonname.add(dealers.get(i).commonname);
							}
							ArrayAdapter<String> adapter = new ArrayAdapter<String>(getActivity(),
							        android.R.layout.simple_spinner_item,  commonname);
							adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
							spinner_dealer.setAdapter(adapter);
						
						}
						
						@Override
						public void onErrorReceive(String string) {
							// TODO Auto-generated method stub
							Toast.makeText(getActivity(), string, Toast.LENGTH_SHORT).show();
						}
					},"Populating Dealers..").execute();  
					}else
					{
						((TextView) parent.getChildAt(0)).setTextColor(v.getContext().getResources().getColor(R.color.hintcolor));

					}
				}

				@Override
				public void onNothingSelected(AdapterView<?> parent) {
					// TODO Auto-generated method stub
					
				}
			});
      		spinner_dealer.setOnItemSelectedListener(new OnItemSelectedListener() {

    			@Override
    			public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
    				// TODO Auto-generated method stub
    				
    				if (position != 0) {
						((TextView) parent.getChildAt(0)).setTextColor(v.getContext().getResources().getColor(R.color.textcolor));

    					Log.i("DIVISIONID", dealers.get(position-1).getDivisionId() + " at " + (position-1));
    					String DIVISIONID = dealers.get(position-1).getDivisionId();
    					DIVISIONNAME = dealers.get(position-1).getDivisionName();
    			
    				String req = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\">"
    				  +"<SOAP:Body>"
    				  +"<GetdivphonebydivCSB xmlns=\"src.com.CSB\" preserveSpace=\"no\" qAccess=\"0\" qValues=\"\">"
    				      +"<DIVISIONID>"+DIVISIONID+"</DIVISIONID>"
    				    +"</GetdivphonebydivCSB>"
    				  +"</SOAP:Body>"
    				+"</SOAP:Envelope>";
    				new WebServiceCall(getActivity(), req, Constants.GetdivphonebydivCSB, new ResponseCallback() {
    					
    					@Override
    					public void onResponseReceive(Object object) {
    						
    						String dealercntctNum = (String) object;
    						if(TextUtils.isEmpty(dealercntctNum))
    							edit_dealerNo.setText("Contact Number Not Found");
    						else
    							edit_dealerNo.setText(dealercntctNum);
    					}
    					
    					@Override
    					public void onErrorReceive(String string) {
    						
    						edit_dealerNo.setText("Contact Number Not Found");
    						//Toast.makeText(getActivity(), string, Toast.LENGTH_SHORT).show();
    					}
    				} ,"Getting dealer contatct number.").execute();
    				}else
    				{
						((TextView) parent.getChildAt(0)).setTextColor(v.getContext().getResources().getColor(R.color.hintcolor));

    				}

    			}

    			@Override
    			public void onNothingSelected(AdapterView<?> parent) {
    				// TODO Auto-generated method stub

    			}
    		});
      		
      		btn_reset = (Button) v.findViewById(R.id.btn_reset);

      	  btn_reset.setOnClickListener(new OnClickListener() {

      	   @Override
      	   public void onClick(View v) {

      	    spinner_regNo.setSelection(0);
      	    spinner_c_area.setSelection(0);
      	    spinner_c_subarea.setSelection(0);
      	    spinner_c_problem.setSelection(0);
      	    spinner_city.setSelection(0);
      	    spinner_dealer.setSelection(0);
      	    edit_varient.setText("");
      	    edit_complaintback.setText("");
      	    edit_resolution.setText("");
      	    edit_mobile.setText("");
      	    edit_email.setText("");
      	    edit_dealerNo.setText("");
      	   }
      	  });
      		btn_submit.setOnClickListener(new View.OnClickListener() {
				
				@Override
				public void onClick(View v) {
//					DatabaseHandler db = new DatabaseHandler(getActivity());
//					
//					complreg.setComplaint_no("CR-8274y274");
//					complreg.setComplaint_reg_no("MH2342335");
//					
//					SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy",Locale.US);    
//					Date date = new Date(); 
//					System.out.println(dateFormat.format(date));   
//					complreg.setComplaint_date(dateFormat.format(date));
//				complreg.setModel("ZEST");
//				complreg.setPrimary_area("Delivery");
//				complreg.setSub_area("Delay");
//				complreg.setProblem_area("Delivery");
//				
//					String log = " SR: " + complreg.getComplaint_no()+ " ,REG: " + complreg.getComplaint_reg_no()+ " ,DATE: " + dateFormat.format(date);
//		            Log.i("complreg", log);
//					
//					db.addComplaint(complreg);
					
					////////////////////////////
					
					
					
					Calendar c =Calendar.getInstance();
					SimpleDateFormat df = new SimpleDateFormat("MM/dd/yyyy");
					String formattedDate = df.format(c.getTime());
					ArrayList<String> emptyFields = new ArrayList<>();
					if(spinner_regNo.getSelectedItemPosition()==0)
						emptyFields.add("Registration Number");
					if(spinner_c_area.getSelectedItemPosition()==0)
						emptyFields.add("Complaint Area");
					if(spinner_c_subarea.getSelectedItemPosition()==0)
						emptyFields.add("Complaint Sub Area");
					if(spinner_c_problem.getSelectedItemPosition()==0)
						emptyFields.add("Problem Area");
					if(TextUtils.isEmpty(edit_complaintback.getText().toString()))
						emptyFields.add("Complaint Background");
					if(TextUtils.isEmpty(edit_resolution.getText().toString()))
						emptyFields.add("Resolution Required");
					if(spinner_city.getSelectedItemPosition()==0)
						emptyFields.add("City");
					if(spinner_dealer.getSelectedItemPosition()==0)
						emptyFields.add("Preferred Dealer");
					if(emptyFields.size()==0){
//					String req = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\">"
//							  +"<SOAP:Body>"
//							  +"<TMPCComplaintsInsertOrUpdate_Input xmlns=\"http://siebel.com/asi/\">"
//							      +"<ListOfTmCimsInterface xmlns=\"http://www.siebel.com/xml/TM%20CIMS%20Interface\">"
//							        +"<TmCims>"
//							               +"<IntegrationId>"+System.currentTimeMillis()+"</IntegrationId>"
//							               +"<Area>"+spinner_c_area.getSelectedItem().toString()+"</Area>"
//							               +"<ContactId></ContactId>"
//							               +"<Description/>"
//							               +"<Owner>ADURAI3000380</Owner>"
//							               +"<PrimaryOrganizationId></PrimaryOrganizationId>"
//							               +"<ServiceRequestType>Complaint</ServiceRequestType>"
//							               +"<Source>Web</Source>"
//							               +"<Status>Open</Status>"
//							               +"<SubArea>"+spinner_c_subarea.getSelectedItem().toString()+"</SubArea>"
//							               +"<SubStatus>Waiting for Customer</SubStatus>"
//							               +"<TMChassisRegNo>"+spinner_regNo.getSelectedItem().toString()+"</TMChassisRegNo>"
//							               +"<TMComplaintDateTime>"+formattedDate+"</TMComplaintDateTime>"
//							               +"<TMComplaintType>Legal</TMComplaintType>"
//							               +"<TMMode>Call Centre</TMMode>"
//							               +"<TMOriginPoint>Dealer</TMOriginPoint>"
//							               +"<TMProblemArea>"+spinner_c_problem.getSelectedItem().toString()+"</TMProblemArea>"
//							               +"</TmCims>"
//							               +"</ListOfTmCimsInterface>"
//							               +"<StatusObject>PARAMETER</StatusObject>"
//							               +"</TMPCComplaintsInsertOrUpdate_Input>"
//							               +"</SOAP:Body>"
//							               +"</SOAP:Envelope>";
						
						if(DIVISIONNAME.contains("&")){
						DIVISIONNAME =	DIVISIONNAME.replace("&", "&amp;");
						}
						//KANCHAN REQ
						String req = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\">"
								  +"<SOAP:Body>"
								  +"<TMPCComplaintsInsertOrUpdate_Input xmlns=\"http://siebel.com/asi/\">"
								      +"<ListOfTmCimsInterface xmlns=\"http://www.siebel.com/xml/TM%20CIMS%20Interface\">"
								        +"<TmCims>"
								               +"<IntegrationId>"+System.currentTimeMillis()+"</IntegrationId>"
								               +"<Area>"+spinner_c_area.getSelectedItem().toString()+"</Area>"
								               +"<ContactId></ContactId>"
								               +"<Description/>"
								               +"<Owner>ADURAI3000380</Owner>"
								               +"<PrimaryOrganizationId></PrimaryOrganizationId>"
								               +"<ServiceRequestType>Complaint</ServiceRequestType>"
								               +"<Source>Mobile</Source>"
								               +"<Status>Open</Status>"
								               +"<SubArea>"+spinner_c_subarea.getSelectedItem().toString()+"</SubArea>"
								               +"<SubStatus>Waiting for Customer</SubStatus>"
								               +"<TMBusinessUnit>TMPC</TMBusinessUnit>"
								               +"<TMChassisRegNo>"+spinner_regNo.getSelectedItem().toString()+"</TMChassisRegNo>"
								            		   +"<SerialNumber>"+CHASSISNO+"</SerialNumber>"
								               +"<TMComplaintDateTime>"+formattedDate+"</TMComplaintDateTime>"
								               +"<TMComplaintType>Non-Legal</TMComplaintType>"
								               +"<TMMode>Customer App</TMMode>"
								               +"<TMOriginPoint>GM</TMOriginPoint>"
								               +"<TMProblemArea>"+spinner_c_problem.getSelectedItem().toString()+"</TMProblemArea>"
								               +"<Description>Complaint Background:"+edit_complaintback.getText().toString()+" "
								               +"Resolution Required:"+ edit_resolution.getText().toString()+" "
								               +user.email+" "
								               +user.phoneno
								               +"</Description>"
								              +"<TMDealer>"+DIVISIONNAME+"</TMDealer>"
								               +"</TmCims>"
								               +"</ListOfTmCimsInterface>"
								               +"<StatusObject></StatusObject>"
								               +"</TMPCComplaintsInsertOrUpdate_Input>"
								               +"</SOAP:Body>"
								               +"</SOAP:Envelope>";
						
						//SWAPNALI REQ
//					String req = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\">"
//							  +"<SOAP:Body>"
//							  +"<TMPCComplaintsInsertOrUpdate_Input xmlns=\"http://siebel.com/asi/\">"
//							      +"<ListOfTmCimsInterface xmlns=\"http://www.siebel.com/xml/TM%20CIMS%20Interface\">"
//							      +"<TmCims>"
//							      +"<IntegrationId>"+System.currentTimeMillis()+"</IntegrationId>"
//					               +"<Area>"+spinner_c_area.getSelectedItem().toString()+"</Area>"
//					               +"<ContactId>"+contact_id+"</ContactId>"
//					               +"<Description/>"
//					               +"<Owner>ADURAI3000380</Owner>"
//					               +"<PrimaryOrganizationId></PrimaryOrganizationId>"
//					               +"<ServiceRequestType>Complaint</ServiceRequestType>"
//					               +"<Source>Mobile</Source>"
//					               +"<Status>Open</Status>"
//					               +"<SubArea>"+spinner_c_subarea.getSelectedItem().toString()+"</SubArea>"
//					               +"<SubStatus>Web</SubStatus>" //Web Waiting for Customer
//					               +"<TMBusinessUnit>TMPC</TMBusinessUnit>"
//					               +"<TMChassisRegNo>"+spinner_regNo.getSelectedItem().toString()+"</TMChassisRegNo>"
//					               +"<SerialNumber>"+CHASSISNO+"</SerialNumber>"
//					               +"<TMComplaintDateTime>"+formattedDate+"</TMComplaintDateTime>"
//					               +"<TMComplaintType>Non-Legal</TMComplaintType>"
//					               +"<TMMode>Customer App</TMMode>" //Customer App Call Centre
//					               +"<TMOriginPoint>GM</TMOriginPoint>"
//					               +"<TMProblemArea>"+spinner_c_problem.getSelectedItem().toString()+"</TMProblemArea>"
//					               +"<Description>Complaint Background:"+edit_complaintback.getText().toString()+" "
//					               +"Resolution Required:"+ edit_resolution.getText().toString()+" "
//					               +user.email+" "
//					               +user.phoneno
//					               +"</Description>"
//					              +"<TMDealer>"+DIVISIONNAME+"</TMDealer>"
//					               +"</TmCims>"
//							               +"</ListOfTmCimsInterface>"
//							               +"<StatusObject></StatusObject>"
//							               +"</TMPCComplaintsInsertOrUpdate_Input>"
//							               +"</SOAP:Body>"
//							               +"</SOAP:Envelope>";
					
			/*		 +"<IntegrationId>"+System.currentTimeMillis()+"</IntegrationId>"
		               +"<Area>"+spinner_c_area.getSelectedItem().toString()+"</Area>"
		               +"<ContactId>"+contact_id+"</ContactId>"
		               +"<Description/>"
		               +"<Owner>ADURAI3000380</Owner>"
		               +"<PrimaryOrganizationId></PrimaryOrganizationId>"
		               +"<ServiceRequestType>Complaint</ServiceRequestType>"
		               +"<Source>Mobile</Source>"
		               +"<Status>Open</Status>"
		               +"<SubArea>"+spinner_c_subarea.getSelectedItem().toString()+"</SubArea>"
		               +"<SubStatus>Web</SubStatus>" //Web Waiting for Customer
		               +"<TMBusinessUnit>TMPC</TMBusinessUnit>"
		               +"<TMChassisRegNo>"+spinner_regNo.getSelectedItem().toString()+"</TMChassisRegNo>"
		               +"<SerialNumber>"+CHASSISNO+"</SerialNumber>"
		               +"<TMComplaintDateTime>"+formattedDate+"</TMComplaintDateTime>"
		               +"<TMComplaintType>Non-Legal</TMComplaintType>"
		               +"<TMMode>Customer App</TMMode>" //Customer App Call Centre
		               +"<TMOriginPoint>GM</TMOriginPoint>"
		               +"<TMProblemArea>"+spinner_c_problem.getSelectedItem().toString()+"</TMProblemArea>"
		               +"<Description>Complaint Background:"+edit_complaintback.getText().toString()+" "
		               +"Resolution Required:"+ edit_resolution.getText().toString()+" "
		               +user.email+" "
		               +user.phoneno
		               +"</Description>"
		              +"<TMDealer>"+DIVISIONNAME+"</TMDealer>"
		               +"</TmCims>"*/
		/*			  +"<TmCims>"
				        +"<IntegrationId>"+System.currentTimeMillis()+"</IntegrationId>"
			               +"<Area>"+spinner_c_area.getSelectedItem().toString()+"</Area>"
			               +"<ContactId>"+contact_id+"</ContactId>"
			               +"<Description/>"
			               +"<Owner>ADURAI3000380</Owner>"
			               +"<PrimaryOrganizationId></PrimaryOrganizationId>"
			               +"<ServiceRequestType>Complaint</ServiceRequestType>"
			               +"<Source>Web</Source>"
			               +"<Status>Open</Status>"
			               +"<SubArea>"+spinner_c_subarea.getSelectedItem().toString()+"</SubArea>"
			               +"<SubStatus>Waiting for Customer</SubStatus>"
			               +"<TMChassisRegNo>"+spinner_regNo.getSelectedItem().toString()+"</TMChassisRegNo>"
			               +"<TMComplaintDateTime>"+formattedDate+"</TMComplaintDateTime>"
			               +"<TMComplaintType>Legal</TMComplaintType>"
			               +"<TMMode>Call Centre</TMMode>"
			               +"<TMOriginPoint>Dealer</TMOriginPoint>"
				               +"<TMProblemArea>"+spinner_c_problem.getSelectedItem().toString()+"</TMProblemArea>"
				               +"<Description>Complaint Background:"+edit_complaintback.getText().toString()+" "
				               +"Resolution Required:"+ edit_resolution.getText().toString()+" "
				               +user.email+" "
				               +user.phoneno
				               +"</Description>"
				              +"<TMDealer>"+DIVISIONNAME+"</TMDealer>"
				               +"</TmCims>"*/
					new WebServiceCall(getActivity(), req,Constants.TMPCComplaintsInsertOrUpdate_Input, new ResponseCallback() {
						
						@Override
						public void onResponseReceive(Object object) {
							// TODO Auto-generated method stub
							complaintSuccess = (ArrayList<String>) object;
							//Toast.makeText(getActivity(),"Compaint Registered with SR Number "+ complaintSuccess.get(1), Toast.LENGTH_SHORT).show();
							AlertDialog.Builder builder1 = new AlertDialog.Builder(getActivity());
							//builder1.setTitle("Compaint Registered CR No: "+ complaintSuccess.get(1));
							builder1.setTitle("Complaint Registration");
							builder1.setMessage("Compaint Registered CR No: "+ complaintSuccess.get(1));
							builder1.setCancelable(false);
							builder1.setPositiveButton(
							    "OK",
							    new DialogInterface.OnClickListener() {
							        public void onClick(DialogInterface dialog, int id) {
							            dialog.cancel();
							           //navigate 
							            FragmentManager fragmentManager = getFragmentManager();
								           Fragment fragment = new HomeFragment();
								           fragmentManager.beginTransaction()
											.replace(R.id.frame_container, fragment).commit();
							        }
							    });


							AlertDialog alert11 = builder1.create();
							alert11.show();
							
							//Calendar.getInstance().getTime();
							
							//STORE OFFLINE
							DatabaseHandler db = new DatabaseHandler(getActivity());
							complreg.setUserId(UserDetails.getUser_id());
							complreg.setComplaint_no(complaintSuccess.get(1));
							complreg.setComplaint_reg_no(user.REGISTRATIONNUMBER);
							
							SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy",Locale.US);    
							Date date = new Date(); 
							System.out.println(dateFormat.format(date));   
							complreg.setComplaint_date(dateFormat.format(date));
							complreg.setModel(user.PPL);
							complreg.setPrimary_area(spinner_c_area.getSelectedItem().toString());
							complreg.setSub_area(spinner_c_subarea.getSelectedItem().toString());
							complreg.setProblem_area(spinner_c_problem.getSelectedItem().toString());
						
							String log = "USERID: "+UserDetails.getUser_id() +" SR: " + complreg.getComplaint_no()+ " ,REG: " + complreg.getComplaint_reg_no()+ " ,DATE: " + dateFormat.format(date);
				            Log.i("complreg", log);
							
							db.addComplaint(complreg);
							
						}
						
						@Override
						public void onErrorReceive(String string) {
							// TODO Auto-generated method stub
							
						}
					},"Please Wait..").execute();
					}
					else{
						//	Toast.makeText(getActivity(), "Fields Missing.", Toast.LENGTH_SHORT).show();
							StringBuilder sb = new StringBuilder();
							for (int j = 0; j < emptyFields.size(); j++) {
								sb.append(emptyFields.get(j)+"\n");
							}
							
							AlertDialog.Builder builder1 = new AlertDialog.Builder(getActivity());
							builder1.setTitle("Following fields are missing:");
							builder1.setMessage(sb);
							//TextView messageText = (TextView)findViewById(android.R.id.message);
						   // messageText.setGravity(Gravity.CENTER);
							builder1.setCancelable(true);
							builder1.setPositiveButton(
							    "OK",
							    new DialogInterface.OnClickListener() {
							        public void onClick(DialogInterface dialog, int id) {
							            dialog.cancel();
							        }
							    });


							AlertDialog alert11 = builder1.create();
							alert11.show();
							
							
							
							
							
							
						}
					  
				}
			});
      		
      		v.getRootView().setFocusableInTouchMode(true);
    		v.getRootView().requestFocus();

    		v.getRootView().setOnKeyListener(new OnKeyListener() {
    			@Override
    			public boolean onKey(View v, int keyCode, KeyEvent event) {
    				if (event.getAction() == KeyEvent.ACTION_DOWN) {
    					if (keyCode == KeyEvent.KEYCODE_BACK) {						
    						FragmentManager fm = getFragmentManager();
    						FragmentTransaction tx = fm.beginTransaction();
    						tx.replace(R.id.frame_container, new HomeFragment())
    								.commit();
    						return true;
    					}
    				}
    				return false;
    			}
    		});
    		
        return v;
    }
	
	
=======
package com.ttl.customersocialapp;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import com.ttl.adapter.ResponseCallback;
import com.ttl.communication.SamlArtifact;
import com.ttl.helper.DatabaseHandler;
import com.ttl.model.ComplaintArea;
import com.ttl.model.Complaint_Registered_Parent;
import com.ttl.model.Dealer;
import com.ttl.model.ServiceBookingUser;
import com.ttl.model.UserDetails;
import com.ttl.webservice.Config;
import com.ttl.webservice.Constants;
import com.ttl.webservice.WebServiceCall;

import android.app.AlertDialog;
import android.app.Fragment;
import android.app.FragmentManager;
import android.app.FragmentTransaction;
import android.content.DialogInterface;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnKeyListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;
import java.util.Collections;
import java.util.Comparator;
public class ComplaintRegistrationFragment extends Fragment {
	private Spinner  spinner_c_area,spinner_c_subarea,spinner_c_problem,spinner_regNo,spinner_city,spinner_dealer;     
	private EditText edit_dealerNo;
	private ArrayList<ComplaintArea> lst_c_area = new ArrayList<ComplaintArea>();
	private ArrayAdapter<String> adaptercities;
	private ArrayList<Dealer> dealers  = new ArrayList<Dealer>();
	private Button btn_submit , btn_reset;
	private ArrayList<String> complaintSuccess;
	private ServiceBookingUser user = new ServiceBookingUser();
	private EditText edit_varient,edit_email,edit_mobile,edit_complaintback,edit_resolution;
	String DIVISIONNAME , CHASSISNO ,contact_id;
	private Complaint_Registered_Parent complreg=new Complaint_Registered_Parent();
	List<String> regnovalues = new ArrayList<String>();
	View v;
	@Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
            Bundle savedInstanceState) {
 
        //View v = inflater.inflate(R.layout.fragment_complaint_registration, container, false);
         v = inflater.inflate(R.layout.fragment_complaintregistration, container, false);
        spinner_c_area = (Spinner) v.findViewById(R.id.spinner_c_area);
  		spinner_c_subarea = (Spinner) v.findViewById(R.id.spinner_c_subarea);
  		spinner_c_problem = (Spinner) v.findViewById(R.id.spinner_c_problem);
  		spinner_regNo = (Spinner) v.findViewById(R.id.spinner_regNo);
  		edit_varient = (EditText) v.findViewById(R.id.edit_varient);
		edit_email = (EditText) v.findViewById(R.id.edit_email);
		edit_mobile = (EditText) v.findViewById(R.id.edit_mobile);
  		spinner_city = (Spinner) v.findViewById(R.id.spinner_city);
  		spinner_dealer = (Spinner) v.findViewById(R.id.spinner_dealer);
  		edit_dealerNo = (EditText)v.findViewById(R.id.edit_dealerNo);
  		btn_submit = (Button) v.findViewById(R.id.btn_submit);
  		edit_complaintback = (EditText) v.findViewById(R.id.edit_complaintback);
  		edit_resolution = (EditText) v.findViewById(R.id.edit_resolution);
  		//new SamlArtifact(v.getContext()).execute();
  		
  		if(Config.getSAMLARTIFACT().equals(""))
		{
			new SamlArtifact(getActivity()).execute();
		}
        String req = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\">"
        		+"<SOAP:Body>"
        		+"<GetCompTypeByBUCSB xmlns=\"src.com.CSB\" preserveSpace=\"no\" qAccess=\"0\" qValues=\"\">"
        		+"<SUB_TYPE>TMPC</SUB_TYPE>"
        		+"</GetCompTypeByBUCSB>"
        		+"</SOAP:Body>"
        		+"</SOAP:Envelope>";
//        String req1 = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\">"
//				+"<SOAP:Body>"
//				+"<GetCompSubTypeByParRowIDCSB xmlns=\"src.com.CSB\" preserveSpace=\"no\" qAccess=\"0\" qValues=\"\">"
//		      +"<PAR_ROW_ID>1-2WSYOHT</PAR_ROW_ID>"
//		      +"<BU>TMPC</BU>"
//		    +"</GetCompSubTypeByParRowIDCSB>"
//		  +"</SOAP:Body>"
//		+"</SOAP:Envelope>";
//
//		String req2 = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\">"
//				+"<SOAP:Body>"
//				+"<GetCompCitiesByType xmlns=\"src.com.CSB\" preserveSpace=\"no\" qAccess=\"0\" qValues=\"\">"
//		      +"<CMPL_AREAROW_ID>1-2E6ZGX</CMPL_AREAROW_ID>"
//		    +"</GetCompCitiesByType>"
//		  +"</SOAP:Body>"
//		+"</SOAP:Envelope>";
        
//        String req3 = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\">"
//				  +"<SOAP:Body>"
//				  +"<GetCompPrblmAreabySubAreaCSB xmlns=\"src.com.CSB\" preserveSpace=\"no\" qAccess=\"0\" qValues=\"\">"
//				      +"<SUB_AREA>Service Advisor-1</SUB_AREA>"
//				    +"</GetCompPrblmAreabySubAreaCSB>"
//				  +"</SOAP:Body>"
//				+"</SOAP:Envelope>";
        
      	//	new WebServiceCall(getActivity(), req3, Constants.GetCompPrblmAreabySubAreaCSB, "Populating Compplain Area.").execute();
        spinner_c_problem.setOnItemSelectedListener(new OnItemSelectedListener() {

			@Override
			public void onItemSelected(AdapterView<?> parent, View view,
					int position, long id) {
				// TODO Auto-generated method stub
				if(position!=0)
				{
					((TextView) parent.getChildAt(0)).setTextColor(v.getContext().getResources().getColor(R.color.textcolor));

				}else
				{
					((TextView) parent.getChildAt(0)).setTextColor(v.getContext().getResources().getColor(R.color.hintcolor));

				}
			}

			@Override
			public void onNothingSelected(AdapterView<?> parent) {
				// TODO Auto-generated method stub
				
			}
		}) ;	
      		new WebServiceCall(getActivity(), req, Constants.GetCompTypeByBUCSB,new ResponseCallback() {
				
				@SuppressWarnings("unchecked")
				@Override
				public void onResponseReceive(Object object) {
					// TODO Auto-generated method stub
					lst_c_area = (ArrayList<ComplaintArea>) object;
					List<String> complainarea = new ArrayList<String>();
					complainarea.add("Complaint Area");
					for (int i = 0; i < lst_c_area.size(); i++) {
						Log.i("lst_c_area", lst_c_area.get(i).VAL + " "+ lst_c_area.get(i).ROW_ID);
						complainarea.add(lst_c_area.get(i).VAL);
					}
					ArrayAdapter<String> adapter = new ArrayAdapter<String>(getActivity(),
					        android.R.layout.simple_spinner_item, complainarea);
					adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
					spinner_c_area.setAdapter(adapter);
				}
				
				@Override
				public void onErrorReceive(String string) {
					// TODO Auto-generated method stub
					Toast.makeText(getActivity(), string, Toast.LENGTH_SHORT).show();
				}
			}, "Populating Complaint Area.").execute();
      		
      		regnovalues.add("Registration Number");
      		regnovalues.add("Not Available");
	  	       int size = new UserDetails().getRegNumberList().size();
	  	       for(int i = 0 ; i<size; i++)
	  	       {
	  	    	   regnovalues.add(new UserDetails().getRegNumberList().get(i).get("registration_num"));
	  	       }
	      		ArrayAdapter<String> regno = new ArrayAdapter<String>(getActivity(),android.R.layout.simple_spinner_item, regnovalues);
	 	       regno.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
	 	       spinner_regNo.setAdapter(regno);
      		spinner_regNo.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {

    			@Override
    			public void onItemSelected(AdapterView<?> arg0, View arg1, int pos, long arg3) {

    				String regNo = spinner_regNo.getSelectedItem().toString();
    	      	    spinner_c_area.setSelection(0);
    	      	    spinner_c_subarea.setSelection(0);
    	      	    spinner_c_problem.setSelection(0);
    	      	    spinner_city.setSelection(0);
    	      	    spinner_dealer.setSelection(0);
    	      	    edit_varient.setText("");
    	      	    edit_complaintback.setText("");
    	      	    edit_resolution.setText("");
    	      	    edit_mobile.setText("");
    	      	    edit_email.setText("");
    	      	    edit_dealerNo.setText("");
    				Log.i("Selected item : ", regNo + " AT " + pos);
    				if (pos != 0) {
    					// fire web service
						((TextView) arg0.getChildAt(0)).setTextColor(v.getContext().getResources().getColor(R.color.textcolor));

    					if(regNo.toString().equals("Not Available"))
    					{
    						edit_email.setText(UserDetails.getEmail_id().toString());
							edit_mobile.setText(UserDetails.getContact_number().toString());
							contact_id = "";

    					}
    					else
    					{
    					String req = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\">"
    							+ "<SOAP:Body>"
    							+ "<GetCustomerVehicleDetailsCSB xmlns=\"src.com.CSB\" preserveSpace=\"no\" qAccess=\"0\" qValues=\"\">"
    							+ "<RegistrationNumber>" + regNo + "</RegistrationNumber>"
    							+ "<ChassisNumber></ChassisNumber>" + "<MobileNo></MobileNo>"
    							+ "</GetCustomerVehicleDetailsCSB>" + "</SOAP:Body>" + "</SOAP:Envelope>";
    				
    					new WebServiceCall(getActivity(), req, Constants.GetCustomerVehicleDetailsCSB, new ResponseCallback() {

    						@Override
    						public void onResponseReceive(Object object) {
    							
    							user = (ServiceBookingUser) object;
    							Log.i("onResponseRecieve", user.PL + " " + user.PPL + " "+user.email);
    							edit_varient.setText(user.PL);
    							edit_email.setText(user.getEmail());
    							edit_mobile.setText(user.getPhoneno());
    							CHASSISNO = user.getCHASSISNUMBER();
    							contact_id = user.getContact_id();
    						}

    						@Override
    						public void onErrorReceive(String string) {
    							
    							Toast.makeText(getActivity(), string, Toast.LENGTH_SHORT).show();
    						}
    					},"Populating Data..").execute(); 
    					}
    				}else
					{
						((TextView) arg0.getChildAt(0)).setTextColor(v.getContext().getResources().getColor(R.color.hintcolor));

					}

    			}

    			@Override
    			public void onNothingSelected(AdapterView<?> arg0) {
    				

    			}

    		});
      		
      		spinner_c_area.setOnItemSelectedListener(new OnItemSelectedListener() {

				@Override
				public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
					// TODO Auto-generated method stub
					
		      	    spinner_c_subarea.setSelection(0);
		      	    spinner_c_problem.setSelection(0);
		      	    spinner_city.setSelection(0);
		      	    spinner_dealer.setSelection(0);
		      	    edit_complaintback.setText("");
		      	    edit_resolution.setText("");
		      	   
		      	    edit_dealerNo.setText("");
					if(position!=0){
				//	String PAR_ROW_ID =  lst_c_area.get(position-1).getPAR_ROW_ID();
						((TextView) parent.getChildAt(0)).setTextColor(v.getContext().getResources().getColor(R.color.textcolor));

					for (int i = 0; i < lst_c_area.size(); i++) {
						Log.i("lst_c_area", lst_c_area.get(i).VAL + " " + lst_c_area.get(i).PAR_ROW_ID + " " + lst_c_area.get(i).ROW_ID);
					}
					
					Log.i("spinner_c_area", spinner_c_area.getSelectedItem().toString() + " AT " + position + " PAR_ROW_ID "+lst_c_area.get(position-1).getPAR_ROW_ID() + " " +lst_c_area.get(position-1).getROW_ID());
					String req1 = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\">"
							+"<SOAP:Body>"
							+"<GetCompSubTypeByParRowIDCSB xmlns=\"src.com.CSB\" preserveSpace=\"no\" qAccess=\"0\" qValues=\"\">"
					      +"<PAR_ROW_ID>"+lst_c_area.get(position-1).ROW_ID+"</PAR_ROW_ID>"
					      +"<BU>TMPC</BU>"
					    +"</GetCompSubTypeByParRowIDCSB>"
					  +"</SOAP:Body>"
					+"</SOAP:Envelope>";
					new WebServiceCall(getActivity(), req1, Constants.GetCompSubTypeByParRowIDCSB, new ResponseCallback() {

						@Override
						public void onResponseReceive(Object object) {
							// TODO Auto-generated method stub
							@SuppressWarnings("unchecked")
							ArrayList <String> list = (ArrayList<String>) object;
							ArrayAdapter<String> adapter = new ArrayAdapter<String>(getActivity(),
							        android.R.layout.simple_spinner_item, list);
							adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
							spinner_c_subarea.setAdapter(adapter);
						}

						@Override
						public void onErrorReceive(String string) {
							// TODO Auto-generated method stub
							Toast.makeText(getActivity(), string, Toast.LENGTH_SHORT).show();
						}
						
					},"Populating Complaint SubArea.").execute();
					
					String req2 = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\">"
							+"<SOAP:Body>"
							+"<GetCompCitiesByType xmlns=\"src.com.CSB\" preserveSpace=\"no\" qAccess=\"0\" qValues=\"\">"
					      +"<CMPL_AREAROW_ID>"+lst_c_area.get(position-1).ROW_ID+"</CMPL_AREAROW_ID>"
					    +"</GetCompCitiesByType>"
					  +"</SOAP:Body>"
					+"</SOAP:Envelope>";
					
					new WebServiceCall(getActivity(), req2, Constants.GetDSSDealerCitiesCSB, new ResponseCallback() {

						@Override
						public void onResponseReceive(Object object) {
							// TODO Auto-generated method stub
							@SuppressWarnings("unchecked")
							ArrayList <String> list = (ArrayList<String>) object;
							Collections.sort(list, new Comparator<String>( ) {

								@Override
								public int compare(String lhs, String rhs) {
									// TODO Auto-generated method stub
									return lhs.compareToIgnoreCase(rhs);
								}
							});
							adaptercities = new ArrayAdapter<String>(getActivity(),android.R.layout.simple_spinner_item, list);
							adaptercities.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
							spinner_city.setAdapter(adaptercities);
						}

						@Override
						public void onErrorReceive(String string) {
							// TODO Auto-generated method stub
							Toast.makeText(getActivity(), string, Toast.LENGTH_SHORT).show();
						}
						
					},"Populating Cities.").execute(); 
				}else
				{
					((TextView) parent.getChildAt(0)).setTextColor(v.getContext().getResources().getColor(R.color.hintcolor));
				}
				}
				@Override
				public void onNothingSelected(AdapterView<?> parent) {
					// TODO Auto-generated method stub
					
				}
			});
      		
      		spinner_c_subarea.setOnItemSelectedListener(new OnItemSelectedListener() {

				@Override
				public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
					// TODO Auto-generated method stub
					
					if(position!=0){
						((TextView) parent.getChildAt(0)).setTextColor(v.getContext().getResources().getColor(R.color.textcolor));

					String req = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\">"
					  +"<SOAP:Body>"
					  +"<GetCompPrblmAreabySubAreaCSB xmlns=\"src.com.CSB\" preserveSpace=\"no\" qAccess=\"0\" qValues=\"\">"
					      +"<SUB_AREA>"+spinner_c_subarea.getSelectedItem().toString()+"</SUB_AREA>"
					    +"</GetCompPrblmAreabySubAreaCSB>"
					  +"</SOAP:Body>"
					+"</SOAP:Envelope>";
					new WebServiceCall(getActivity(), req, Constants.GetCompPrblmAreabySubAreaCSB, new ResponseCallback() {

						@Override
						public void onResponseReceive(Object object) {
							@SuppressWarnings("unchecked")
							ArrayList <String> list = (ArrayList<String>) object;
							ArrayAdapter<String> adapter = new ArrayAdapter<String>(getActivity(),
							        android.R.layout.simple_spinner_item, list);
							adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
							spinner_c_problem.setAdapter(adapter);
							
								
						
						}

						@Override
						public void onErrorReceive(String string) {
							// TODO Auto-generated method stub
							Toast.makeText(getActivity(), string, Toast.LENGTH_SHORT).show();
						}
						
					},"Populating Complaint Problem Area.").execute();
					}else
					{
						((TextView) parent.getChildAt(0)).setTextColor(v.getContext().getResources().getColor(R.color.hintcolor));

					}
				}

				@Override
				public void onNothingSelected(AdapterView<?> parent) {
					// TODO Auto-generated method stub
					
				}
			});
      		
      		
      		spinner_city.setOnItemSelectedListener(new OnItemSelectedListener() {

				@Override
				public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
					// TODO Auto-generated method stub
					if(position!=0){
						((TextView) parent.getChildAt(0)).setTextColor(v.getContext().getResources().getColor(R.color.textcolor));

					String req = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\">"
							+ "<SOAP:Body>"
							+ "<GetDlrsByCityAndTypeCSB xmlns=\"src.com.CSB\" preserveSpace=\"no\" qAccess=\"0\" qValues=\"\">"
							+ "<CITY>" + spinner_city.getSelectedItem().toString() + "</CITY>" + "<BU>TMPC</BU>"
							+ "</GetDlrsByCityAndTypeCSB>" + "</SOAP:Body>" + "</SOAP:Envelope>";
					new WebServiceCall(getActivity(), req, Constants.GetDlrsByCityAndTypeCSB, new ResponseCallback() {
						
						@SuppressWarnings("unchecked")
						@Override
						public void onResponseReceive(Object object) {
							// TODO Auto-generated method stub
							dealers = (ArrayList<Dealer>) object;
							List<String> commonname = new ArrayList<String>();
							commonname.add("Preferred Dealer");
							for (int i = 0; i < dealers.size(); i++) {
								Log.i("dealers", dealers.get(i).commonname + " "+ dealers.get(i).divisionId);
							commonname.add(dealers.get(i).commonname);
							}
							ArrayAdapter<String> adapter = new ArrayAdapter<String>(getActivity(),
							        android.R.layout.simple_spinner_item,  commonname);
							adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
							spinner_dealer.setAdapter(adapter);
						
						}
						
						@Override
						public void onErrorReceive(String string) {
							// TODO Auto-generated method stub
							Toast.makeText(getActivity(), string, Toast.LENGTH_SHORT).show();
						}
					},"Populating Dealers..").execute();  
					}else
					{
						((TextView) parent.getChildAt(0)).setTextColor(v.getContext().getResources().getColor(R.color.hintcolor));

					}
				}

				@Override
				public void onNothingSelected(AdapterView<?> parent) {
					// TODO Auto-generated method stub
					
				}
			});
      		spinner_dealer.setOnItemSelectedListener(new OnItemSelectedListener() {

    			@Override
    			public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
    				// TODO Auto-generated method stub
    				
    				if (position != 0) {
						((TextView) parent.getChildAt(0)).setTextColor(v.getContext().getResources().getColor(R.color.textcolor));

    					Log.i("DIVISIONID", dealers.get(position-1).getDivisionId() + " at " + (position-1));
    					String DIVISIONID = dealers.get(position-1).getDivisionId();
    					DIVISIONNAME = dealers.get(position-1).getDivisionName();
    			
    				String req = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\">"
    				  +"<SOAP:Body>"
    				  +"<GetdivphonebydivCSB xmlns=\"src.com.CSB\" preserveSpace=\"no\" qAccess=\"0\" qValues=\"\">"
    				      +"<DIVISIONID>"+DIVISIONID+"</DIVISIONID>"
    				    +"</GetdivphonebydivCSB>"
    				  +"</SOAP:Body>"
    				+"</SOAP:Envelope>";
    				new WebServiceCall(getActivity(), req, Constants.GetdivphonebydivCSB, new ResponseCallback() {
    					
    					@Override
    					public void onResponseReceive(Object object) {
    						
    						String dealercntctNum = (String) object;
    						if(TextUtils.isEmpty(dealercntctNum))
    							edit_dealerNo.setText("Contact Number Not Found");
    						else
    							edit_dealerNo.setText(dealercntctNum);
    					}
    					
    					@Override
    					public void onErrorReceive(String string) {
    						
    						edit_dealerNo.setText("Contact Number Not Found");
    						//Toast.makeText(getActivity(), string, Toast.LENGTH_SHORT).show();
    					}
    				} ,"Getting dealer contatct number.").execute();
    				}else
    				{
						((TextView) parent.getChildAt(0)).setTextColor(v.getContext().getResources().getColor(R.color.hintcolor));

    				}

    			}

    			@Override
    			public void onNothingSelected(AdapterView<?> parent) {
    				// TODO Auto-generated method stub

    			}
    		});
      		
      		btn_reset = (Button) v.findViewById(R.id.btn_reset);

      	  btn_reset.setOnClickListener(new OnClickListener() {

      	   @Override
      	   public void onClick(View v) {

      	    spinner_regNo.setSelection(0);
      	    spinner_c_area.setSelection(0);
      	    spinner_c_subarea.setSelection(0);
      	    spinner_c_problem.setSelection(0);
      	    spinner_city.setSelection(0);
      	    spinner_dealer.setSelection(0);
      	    edit_varient.setText("");
      	    edit_complaintback.setText("");
      	    edit_resolution.setText("");
      	    edit_mobile.setText("");
      	    edit_email.setText("");
      	    edit_dealerNo.setText("");
      	   }
      	  });
      		btn_submit.setOnClickListener(new View.OnClickListener() {
				
				@Override
				public void onClick(View v) {
//					DatabaseHandler db = new DatabaseHandler(getActivity());
//					
//					complreg.setComplaint_no("CR-8274y274");
//					complreg.setComplaint_reg_no("MH2342335");
//					
//					SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy",Locale.US);    
//					Date date = new Date(); 
//					System.out.println(dateFormat.format(date));   
//					complreg.setComplaint_date(dateFormat.format(date));
//				complreg.setModel("ZEST");
//				complreg.setPrimary_area("Delivery");
//				complreg.setSub_area("Delay");
//				complreg.setProblem_area("Delivery");
//				
//					String log = " SR: " + complreg.getComplaint_no()+ " ,REG: " + complreg.getComplaint_reg_no()+ " ,DATE: " + dateFormat.format(date);
//		            Log.i("complreg", log);
//					
//					db.addComplaint(complreg);
					
					////////////////////////////
					
					
					
					Calendar c =Calendar.getInstance();
					SimpleDateFormat df = new SimpleDateFormat("MM/dd/yyyy");
					String formattedDate = df.format(c.getTime());
					ArrayList<String> emptyFields = new ArrayList<>();
					if(spinner_regNo.getSelectedItemPosition()==0)
						emptyFields.add("Registration Number");
					if(spinner_c_area.getSelectedItemPosition()==0)
						emptyFields.add("Complaint Area");
					if(spinner_c_subarea.getSelectedItemPosition()==0)
						emptyFields.add("Complaint Sub Area");
					if(spinner_c_problem.getSelectedItemPosition()==0)
						emptyFields.add("Problem Area");
					if(TextUtils.isEmpty(edit_complaintback.getText().toString()))
						emptyFields.add("Complaint Background");
					if(TextUtils.isEmpty(edit_resolution.getText().toString()))
						emptyFields.add("Resolution Required");
					if(spinner_city.getSelectedItemPosition()==0)
						emptyFields.add("City");
					if(spinner_dealer.getSelectedItemPosition()==0)
						emptyFields.add("Preferred Dealer");
					if(emptyFields.size()==0){
//					String req = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\">"
//							  +"<SOAP:Body>"
//							  +"<TMPCComplaintsInsertOrUpdate_Input xmlns=\"http://siebel.com/asi/\">"
//							      +"<ListOfTmCimsInterface xmlns=\"http://www.siebel.com/xml/TM%20CIMS%20Interface\">"
//							        +"<TmCims>"
//							               +"<IntegrationId>"+System.currentTimeMillis()+"</IntegrationId>"
//							               +"<Area>"+spinner_c_area.getSelectedItem().toString()+"</Area>"
//							               +"<ContactId></ContactId>"
//							               +"<Description/>"
//							               +"<Owner>ADURAI3000380</Owner>"
//							               +"<PrimaryOrganizationId></PrimaryOrganizationId>"
//							               +"<ServiceRequestType>Complaint</ServiceRequestType>"
//							               +"<Source>Web</Source>"
//							               +"<Status>Open</Status>"
//							               +"<SubArea>"+spinner_c_subarea.getSelectedItem().toString()+"</SubArea>"
//							               +"<SubStatus>Waiting for Customer</SubStatus>"
//							               +"<TMChassisRegNo>"+spinner_regNo.getSelectedItem().toString()+"</TMChassisRegNo>"
//							               +"<TMComplaintDateTime>"+formattedDate+"</TMComplaintDateTime>"
//							               +"<TMComplaintType>Legal</TMComplaintType>"
//							               +"<TMMode>Call Centre</TMMode>"
//							               +"<TMOriginPoint>Dealer</TMOriginPoint>"
//							               +"<TMProblemArea>"+spinner_c_problem.getSelectedItem().toString()+"</TMProblemArea>"
//							               +"</TmCims>"
//							               +"</ListOfTmCimsInterface>"
//							               +"<StatusObject>PARAMETER</StatusObject>"
//							               +"</TMPCComplaintsInsertOrUpdate_Input>"
//							               +"</SOAP:Body>"
//							               +"</SOAP:Envelope>";
						
						if(DIVISIONNAME.contains("&")){
						DIVISIONNAME =	DIVISIONNAME.replace("&", "&amp;");
						}
						//KANCHAN REQ
						String req = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\">"
								  +"<SOAP:Body>"
								  +"<TMPCComplaintsInsertOrUpdate_Input xmlns=\"http://siebel.com/asi/\">"
								      +"<ListOfTmCimsInterface xmlns=\"http://www.siebel.com/xml/TM%20CIMS%20Interface\">"
								        +"<TmCims>"
								               +"<IntegrationId>"+System.currentTimeMillis()+"</IntegrationId>"
								               +"<Area>"+spinner_c_area.getSelectedItem().toString()+"</Area>"
								               +"<ContactId></ContactId>"
								               +"<Description/>"
								               +"<Owner>ADURAI3000380</Owner>"
								               +"<PrimaryOrganizationId></PrimaryOrganizationId>"
								               +"<ServiceRequestType>Complaint</ServiceRequestType>"
								               +"<Source>Mobile</Source>"
								               +"<Status>Open</Status>"
								               +"<SubArea>"+spinner_c_subarea.getSelectedItem().toString()+"</SubArea>"
								               +"<SubStatus>Waiting for Customer</SubStatus>"
								               +"<TMBusinessUnit>TMPC</TMBusinessUnit>"
								               +"<TMChassisRegNo>"+spinner_regNo.getSelectedItem().toString()+"</TMChassisRegNo>"
								            		   +"<SerialNumber>"+CHASSISNO+"</SerialNumber>"
								               +"<TMComplaintDateTime>"+formattedDate+"</TMComplaintDateTime>"
								               +"<TMComplaintType>Non-Legal</TMComplaintType>"
								               +"<TMMode>Customer App</TMMode>"
								               +"<TMOriginPoint>GM</TMOriginPoint>"
								               +"<TMProblemArea>"+spinner_c_problem.getSelectedItem().toString()+"</TMProblemArea>"
								               +"<Description>Complaint Background:"+edit_complaintback.getText().toString()+" "
								               +"Resolution Required:"+ edit_resolution.getText().toString()+" "
								               +user.email+" "
								               +user.phoneno
								               +"</Description>"
								              +"<TMDealer>"+DIVISIONNAME+"</TMDealer>"
								               +"</TmCims>"
								               +"</ListOfTmCimsInterface>"
								               +"<StatusObject></StatusObject>"
								               +"</TMPCComplaintsInsertOrUpdate_Input>"
								               +"</SOAP:Body>"
								               +"</SOAP:Envelope>";
						
						//SWAPNALI REQ
//					String req = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\">"
//							  +"<SOAP:Body>"
//							  +"<TMPCComplaintsInsertOrUpdate_Input xmlns=\"http://siebel.com/asi/\">"
//							      +"<ListOfTmCimsInterface xmlns=\"http://www.siebel.com/xml/TM%20CIMS%20Interface\">"
//							      +"<TmCims>"
//							      +"<IntegrationId>"+System.currentTimeMillis()+"</IntegrationId>"
//					               +"<Area>"+spinner_c_area.getSelectedItem().toString()+"</Area>"
//					               +"<ContactId>"+contact_id+"</ContactId>"
//					               +"<Description/>"
//					               +"<Owner>ADURAI3000380</Owner>"
//					               +"<PrimaryOrganizationId></PrimaryOrganizationId>"
//					               +"<ServiceRequestType>Complaint</ServiceRequestType>"
//					               +"<Source>Mobile</Source>"
//					               +"<Status>Open</Status>"
//					               +"<SubArea>"+spinner_c_subarea.getSelectedItem().toString()+"</SubArea>"
//					               +"<SubStatus>Web</SubStatus>" //Web Waiting for Customer
//					               +"<TMBusinessUnit>TMPC</TMBusinessUnit>"
//					               +"<TMChassisRegNo>"+spinner_regNo.getSelectedItem().toString()+"</TMChassisRegNo>"
//					               +"<SerialNumber>"+CHASSISNO+"</SerialNumber>"
//					               +"<TMComplaintDateTime>"+formattedDate+"</TMComplaintDateTime>"
//					               +"<TMComplaintType>Non-Legal</TMComplaintType>"
//					               +"<TMMode>Customer App</TMMode>" //Customer App Call Centre
//					               +"<TMOriginPoint>GM</TMOriginPoint>"
//					               +"<TMProblemArea>"+spinner_c_problem.getSelectedItem().toString()+"</TMProblemArea>"
//					               +"<Description>Complaint Background:"+edit_complaintback.getText().toString()+" "
//					               +"Resolution Required:"+ edit_resolution.getText().toString()+" "
//					               +user.email+" "
//					               +user.phoneno
//					               +"</Description>"
//					              +"<TMDealer>"+DIVISIONNAME+"</TMDealer>"
//					               +"</TmCims>"
//							               +"</ListOfTmCimsInterface>"
//							               +"<StatusObject></StatusObject>"
//							               +"</TMPCComplaintsInsertOrUpdate_Input>"
//							               +"</SOAP:Body>"
//							               +"</SOAP:Envelope>";
					
			/*		 +"<IntegrationId>"+System.currentTimeMillis()+"</IntegrationId>"
		               +"<Area>"+spinner_c_area.getSelectedItem().toString()+"</Area>"
		               +"<ContactId>"+contact_id+"</ContactId>"
		               +"<Description/>"
		               +"<Owner>ADURAI3000380</Owner>"
		               +"<PrimaryOrganizationId></PrimaryOrganizationId>"
		               +"<ServiceRequestType>Complaint</ServiceRequestType>"
		               +"<Source>Mobile</Source>"
		               +"<Status>Open</Status>"
		               +"<SubArea>"+spinner_c_subarea.getSelectedItem().toString()+"</SubArea>"
		               +"<SubStatus>Web</SubStatus>" //Web Waiting for Customer
		               +"<TMBusinessUnit>TMPC</TMBusinessUnit>"
		               +"<TMChassisRegNo>"+spinner_regNo.getSelectedItem().toString()+"</TMChassisRegNo>"
		               +"<SerialNumber>"+CHASSISNO+"</SerialNumber>"
		               +"<TMComplaintDateTime>"+formattedDate+"</TMComplaintDateTime>"
		               +"<TMComplaintType>Non-Legal</TMComplaintType>"
		               +"<TMMode>Customer App</TMMode>" //Customer App Call Centre
		               +"<TMOriginPoint>GM</TMOriginPoint>"
		               +"<TMProblemArea>"+spinner_c_problem.getSelectedItem().toString()+"</TMProblemArea>"
		               +"<Description>Complaint Background:"+edit_complaintback.getText().toString()+" "
		               +"Resolution Required:"+ edit_resolution.getText().toString()+" "
		               +user.email+" "
		               +user.phoneno
		               +"</Description>"
		              +"<TMDealer>"+DIVISIONNAME+"</TMDealer>"
		               +"</TmCims>"*/
		/*			  +"<TmCims>"
				        +"<IntegrationId>"+System.currentTimeMillis()+"</IntegrationId>"
			               +"<Area>"+spinner_c_area.getSelectedItem().toString()+"</Area>"
			               +"<ContactId>"+contact_id+"</ContactId>"
			               +"<Description/>"
			               +"<Owner>ADURAI3000380</Owner>"
			               +"<PrimaryOrganizationId></PrimaryOrganizationId>"
			               +"<ServiceRequestType>Complaint</ServiceRequestType>"
			               +"<Source>Web</Source>"
			               +"<Status>Open</Status>"
			               +"<SubArea>"+spinner_c_subarea.getSelectedItem().toString()+"</SubArea>"
			               +"<SubStatus>Waiting for Customer</SubStatus>"
			               +"<TMChassisRegNo>"+spinner_regNo.getSelectedItem().toString()+"</TMChassisRegNo>"
			               +"<TMComplaintDateTime>"+formattedDate+"</TMComplaintDateTime>"
			               +"<TMComplaintType>Legal</TMComplaintType>"
			               +"<TMMode>Call Centre</TMMode>"
			               +"<TMOriginPoint>Dealer</TMOriginPoint>"
				               +"<TMProblemArea>"+spinner_c_problem.getSelectedItem().toString()+"</TMProblemArea>"
				               +"<Description>Complaint Background:"+edit_complaintback.getText().toString()+" "
				               +"Resolution Required:"+ edit_resolution.getText().toString()+" "
				               +user.email+" "
				               +user.phoneno
				               +"</Description>"
				              +"<TMDealer>"+DIVISIONNAME+"</TMDealer>"
				               +"</TmCims>"*/
					new WebServiceCall(getActivity(), req,Constants.TMPCComplaintsInsertOrUpdate_Input, new ResponseCallback() {
						
						@Override
						public void onResponseReceive(Object object) {
							// TODO Auto-generated method stub
							complaintSuccess = (ArrayList<String>) object;
							//Toast.makeText(getActivity(),"Compaint Registered with SR Number "+ complaintSuccess.get(1), Toast.LENGTH_SHORT).show();
							AlertDialog.Builder builder1 = new AlertDialog.Builder(getActivity());
							//builder1.setTitle("Compaint Registered CR No: "+ complaintSuccess.get(1));
							builder1.setTitle("Complaint Registration");
							builder1.setMessage("Compaint Registered CR No: "+ complaintSuccess.get(1));
							builder1.setCancelable(false);
							builder1.setPositiveButton(
							    "OK",
							    new DialogInterface.OnClickListener() {
							        public void onClick(DialogInterface dialog, int id) {
							            dialog.cancel();
							           //navigate 
							            FragmentManager fragmentManager = getFragmentManager();
								           Fragment fragment = new HomeFragment();
								           fragmentManager.beginTransaction()
											.replace(R.id.frame_container, fragment).commit();
							        }
							    });


							AlertDialog alert11 = builder1.create();
							alert11.show();
							
							//Calendar.getInstance().getTime();
							
							//STORE OFFLINE
							DatabaseHandler db = new DatabaseHandler(getActivity());
							complreg.setUserId(UserDetails.getUser_id());
							complreg.setComplaint_no(complaintSuccess.get(1));
							complreg.setComplaint_reg_no(user.REGISTRATIONNUMBER);
							
							SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy",Locale.US);    
							Date date = new Date(); 
							System.out.println(dateFormat.format(date));   
							complreg.setComplaint_date(dateFormat.format(date));
							complreg.setModel(user.PPL);
							complreg.setPrimary_area(spinner_c_area.getSelectedItem().toString());
							complreg.setSub_area(spinner_c_subarea.getSelectedItem().toString());
							complreg.setProblem_area(spinner_c_problem.getSelectedItem().toString());
						
							String log = "USERID: "+UserDetails.getUser_id() +" SR: " + complreg.getComplaint_no()+ " ,REG: " + complreg.getComplaint_reg_no()+ " ,DATE: " + dateFormat.format(date);
				            Log.i("complreg", log);
							
							db.addComplaint(complreg);
							
						}
						
						@Override
						public void onErrorReceive(String string) {
							// TODO Auto-generated method stub
							
						}
					},"Please Wait..").execute();
					}
					else{
						//	Toast.makeText(getActivity(), "Fields Missing.", Toast.LENGTH_SHORT).show();
							StringBuilder sb = new StringBuilder();
							for (int j = 0; j < emptyFields.size(); j++) {
								sb.append(emptyFields.get(j)+"\n");
							}
							
							AlertDialog.Builder builder1 = new AlertDialog.Builder(getActivity());
							builder1.setTitle("Following fields are missing:");
							builder1.setMessage(sb);
							//TextView messageText = (TextView)findViewById(android.R.id.message);
						   // messageText.setGravity(Gravity.CENTER);
							builder1.setCancelable(true);
							builder1.setPositiveButton(
							    "OK",
							    new DialogInterface.OnClickListener() {
							        public void onClick(DialogInterface dialog, int id) {
							            dialog.cancel();
							        }
							    });


							AlertDialog alert11 = builder1.create();
							alert11.show();
							
							
							
							
							
							
						}
					  
				}
			});
      		
      		v.getRootView().setFocusableInTouchMode(true);
    		v.getRootView().requestFocus();

    		v.getRootView().setOnKeyListener(new OnKeyListener() {
    			@Override
    			public boolean onKey(View v, int keyCode, KeyEvent event) {
    				if (event.getAction() == KeyEvent.ACTION_DOWN) {
    					if (keyCode == KeyEvent.KEYCODE_BACK) {						
    						FragmentManager fm = getFragmentManager();
    						FragmentTransaction tx = fm.beginTransaction();
    						tx.replace(R.id.frame_container, new HomeFragment())
    								.commit();
    						return true;
    					}
    				}
    				return false;
    			}
    		});
    		
        return v;
    }
	
	
>>>>>>> TMSC QA 3.4V
}