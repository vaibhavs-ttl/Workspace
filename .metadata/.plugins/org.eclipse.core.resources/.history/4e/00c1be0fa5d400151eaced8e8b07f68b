<<<<<<< HEAD
package com.ttl.customersocialapp;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Locale;
import java.util.Vector;

import android.app.AlarmManager;
import android.app.AlertDialog;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.app.DialogFragment;
import android.app.Fragment;
import android.app.FragmentManager;
import android.app.FragmentTransaction;
import android.app.PendingIntent;
import android.app.Service;
import android.app.TimePickerDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.text.format.DateFormat;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnKeyListener;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.BaseExpandableListAdapter;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ExpandableListView;
import android.widget.ExpandableListView.OnGroupExpandListener;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;

import com.ttl.adapter.AwsResponseCallback;
import com.ttl.helper.ReminderDBHelper;
import com.ttl.model.ReminderContract.Reminder;
import com.ttl.model.Reminder_Child;
import com.ttl.model.Reminder_Parent;
import com.ttl.model.ServiceHandler;
import com.ttl.model.UserDetails;
import com.ttl.webservice.AWS_WebServiceCall;
import com.ttl.webservice.Constants;

public class Reminder_Fragment extends Fragment {

	Spinner sipnner_vehicle_no, sipnner_remindertype;
	RelativeLayout reldate, reltime;

	private String[] vehicleno = { "Vehicle Number", "MH 20 U 7897",
			"MH 21 U 7897", "MH 22 U 7897" };
	private String[] remindertype = { "Reminder Type", "Next Service Date",
			"Insurance Renewal", "AMC Purchase/Renewal",
			"Extended Warranty Purchase/Renewal", "PUC Renewal",
			"Service Booking" };
	List<String> regnovalues = new ArrayList<String>();

	private ArrayList<Reminder_Parent> parents;
	ExpandableListView exlv;
	EditText date, time;
	View v;
	Button submit;
	static final int DATE_DIALOG_ID = 0;
	public static Vector<Reminder_Child> insList = new Vector<Reminder_Child>();
	public static Vector<Reminder_Parent> pList = new Vector<Reminder_Parent>();
	public static Vector<Reminder_Parent> filteredpList = new Vector<Reminder_Parent>();
	private int year, month, day, hour, minute;
	String BOOKINGDATE, BOOKINGTIME, historyDate, historyTime;
	DatePicker dp;
	int gethour, getmin;
	public static String spinnerno, spinnertype;
	Bundle bundle;
	String regno="" , timenext="" , datenext =""  ,remindtype = "";
	public static void loadReminders(Context ctx) {
		ReminderDBHelper mDbHelper;
		SQLiteDatabase mdb;

		mDbHelper = new ReminderDBHelper(ctx);
		mdb = mDbHelper.getReadableDatabase();

		insList = new Vector<Reminder_Child>();

		Cursor c = mdb.rawQuery("SELECT * FROM " + Reminder.TABLE_NAME, null);

		// ***
		insList.removeAllElements();
		pList.removeAllElements();
		if (c.moveToFirst()) {

			while (c.isAfterLast() == false) {

				String name = c.getString(1);
				Log.d(" reminder :", name);

				Reminder_Child i = new Reminder_Child();
				i.setReminder_type(c.getString(1));
				i.setRem_vehicleno(c.getString(0));
				i.setRem_date(c.getString(2));
				i.setRem_time(c.getString(3));

				Reminder_Fragment.insList.add(i);

				/*Reminder_Parent j = new Reminder_Parent();
				j.setRemindertitle(c.getString(0));
				Reminder_Fragment.pList.add(j);*/
				c.moveToNext();
			}
		}

		Cursor reminder_types = mdb.rawQuery("SELECT DISTINCT registration_number  FROM " + Reminder.TABLE_NAME,
				null);
	
		if (reminder_types.moveToFirst()) {
			while (reminder_types.isAfterLast() == false) {
				String name1 = reminder_types.getString(0);
				Log.d("remainder name", name1);
				Reminder_Parent p = new Reminder_Parent();

				p.setRemindertitle(reminder_types.getString(0));
				Log.d(" parent :", reminder_types.getString(0));
				Reminder_Fragment.pList.add(p);
				reminder_types.moveToNext();
			}
		}
		/*
		 * Cursor reminder_types =
		 * mdb.rawQuery("SELECT DISTINCT reminder_type  FROM " +
		 * Reminder.TABLE_NAME, null); if (reminder_types.moveToFirst()) { while
		 * (reminder_types.isAfterLast() == false) { Reminder_Parent p = new
		 * Reminder_Parent();
		 * 
		 * p.setRemindertitle(reminder_types.getString(0)); Log.d(" parent :",
		 * reminder_types.getString(0)); Reminder_Fragment.pList.add(p);
		 * reminder_types.moveToNext(); } }
		 */
	}

	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		v = inflater.inflate(R.layout.fragment_reminder, container, false);

		v.getRootView().setFocusableInTouchMode(true);
		v.getRootView().requestFocus();

		v.getRootView().setOnKeyListener(new OnKeyListener() {
			@Override
			public boolean onKey(View v, int keyCode, KeyEvent event) {
				if (event.getAction() == KeyEvent.ACTION_DOWN) {
					if (keyCode == KeyEvent.KEYCODE_BACK) {
						FragmentManager fm = getFragmentManager();
						FragmentTransaction tx = fm.beginTransaction();
						tx.replace(R.id.frame_container, new HomeFragment())
								.commit();
						return true;
					}
				}
				return false;
			}
		});
		
		bundle = getArguments();
		if (bundle != null) {
			Log.i("BUNDLE HomeFragment",
					bundle.getString("remindregNo") + " " + bundle.getString("remindTime")
							+ " " + bundle.getString("remindDate"));
			regno = bundle.getString("remindregNo");
			timenext = bundle.getString("remindTime");
			datenext = bundle.getString("remindDate");
			remindtype = bundle.getString("remindtype");
		} 
		if (new UserDetails().getRegNumberList().size() == 0) {
			FragmentManager fragmentManager = getFragmentManager();
			Fragment fragment = new HomeFragment();
			fragmentManager.beginTransaction()
					.replace(R.id.frame_container, fragment).commit();
		}
		loadReminders(getActivity());
		sipnner_vehicle_no = (Spinner) v.findViewById(R.id.sipnner_vehicle_no);
		int size = new UserDetails().getRegNumberList().size();
		regnovalues.add("Registration Number");
		for (int i = 0; i < size; i++) {
			regnovalues.add(new UserDetails().getRegNumberList().get(i)
					.get("registration_num"));
		}
		ArrayAdapter<String> sp_adapter = new ArrayAdapter<String>(
				getActivity(), R.layout.reminder_vehicle_sipnnerbgtitle,
				regnovalues);
		
		sp_adapter
				.setDropDownViewResource(R.layout.reminder_vehicle_sipnneritem);
		sipnner_vehicle_no.setAdapter(sp_adapter);
		for(int i = 0; i<regnovalues.size(); i++)
		{
			if(regno.equals(regnovalues.get(i)))
			{
				sipnner_vehicle_no.setSelection(i);
			}
		}
		sipnner_remindertype = (Spinner) v
				.findViewById(R.id.sipnner_remindertype);
		ArrayAdapter<String> sptype_adapter = new ArrayAdapter<String>(
				getActivity(),
				R.layout.reminder_type_sipnnerbgtitle, remindertype);
		sptype_adapter
				.setDropDownViewResource(R.layout.reminder_type_sipnneritem);

		sipnner_remindertype.setAdapter(sptype_adapter);
		
		for(int i = 0; i<remindertype.length; i++)
		{
			if(remindtype.equals(remindertype[i]))
			{
				sipnner_remindertype.setSelection(i);
			}
		}
		/*String req = "http://tmlmobilityservices.co.in:8080/CustomerApp_Restws/customerapp/productServices/getReminderTypes";
		new AWS_WebServiceCall(getActivity(), req, ServiceHandler.GET,
				Constants.getReminderTypes, new AwsResponseCallback() {

					@Override
					public void onResponseReceive(Object object) {
						// TODO Auto-generated method stub
						List<String> regtype = new ArrayList<String>();
						regtype = (List<String>) object;
						ArrayAdapter<String> sptype_adapter = new ArrayAdapter<String>(
								getActivity(),
								R.layout.reminder_type_sipnnerbgtitle, regtype);
						sptype_adapter
								.setDropDownViewResource(R.layout.reminder_type_sipnneritem);

						sipnner_remindertype.setAdapter(sptype_adapter);
						if(!(regno.equals("")))
						{
							sipnner_remindertype.setSelection(1);
						}
					}

					@Override
					public void onErrorReceive(String string) {
						// TODO Auto-generated method stub

					}
				}).execute();*/

		exlv = (ExpandableListView) v.findViewById(R.id.remlist);

		exlv.setOnGroupExpandListener(new OnGroupExpandListener() {
			int previousGroup = -1;

			@Override
			public void onGroupExpand(int groupPosition) {
				if (groupPosition != previousGroup)
					exlv.collapseGroup(previousGroup);
				previousGroup = groupPosition;

			}
		});

		final ArrayList<Reminder_Parent> dummyList = buildDummyData();
		loadHosts(dummyList);

		date = (EditText) v.findViewById(R.id.edtdate);
		
		date.setText(datenext);
		date.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v1) {
				// TODO Auto-generated method stub
				showDatePickerDialog(v1);
			}
		});

		time = (EditText) v.findViewById(R.id.edttime);
		time.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v1) {
				// TODO Auto-generated method stub
				showTimePickerDialog(v1);
			}
		});
		submit = (Button) v.findViewById(R.id.reminder_submit);
		submit.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				loadReminders(getActivity());
				String getdate = date.getText().toString();
				String gettime = time.getText().toString();
				spinnerno = sipnner_vehicle_no.getSelectedItem().toString();
				spinnertype = sipnner_remindertype.getSelectedItem().toString();
				Log.d(spinnerno, "number get");
				Log.d(spinnertype, "type get");

				if (getdate != null && getdate.length() == 0) {
					Toast.makeText(getActivity(), "Please enter date.",
							Toast.LENGTH_SHORT).show();
				} else if (isBefore(getToday(), getdate)) {
					Toast.makeText(getActivity(), "Please select future date.",
							Toast.LENGTH_SHORT).show();
				} else if (gettime != null && gettime.length() == 0) {
					Toast.makeText(getActivity(), "Please enter time.",
							Toast.LENGTH_SHORT).show();
				} else if (spinnerno.equalsIgnoreCase("Registration Number")) {
					Toast.makeText(getActivity(),
							"Please enter Registration Number.",
							Toast.LENGTH_SHORT).show();
				} else if (spinnertype.equalsIgnoreCase("Reminder type")) {
					Toast.makeText(getActivity(),
							"Please enter Reminder type.", Toast.LENGTH_SHORT)
							.show();
				} else {
					int result = ReminderDBHelper.insertReminder(spinnerno,
							spinnertype, getdate, gettime, getActivity());
					if (result > 0) {

						Intent i = new Intent(
								"com.ttl.customersocialapp.Notification");
						int repet = (int) System.currentTimeMillis();
						i.putExtra("remindertype", spinnerno +" "+spinnertype);
						/** Creating a Pending Intent */
						PendingIntent operation = PendingIntent.getActivity(
								getActivity(), repet, i,
								Intent.FLAG_ACTIVITY_NEW_TASK);
						
						AlarmManager alarmManager = (AlarmManager) getActivity()
								.getBaseContext().getSystemService(
										Service.ALARM_SERVICE);

						GregorianCalendar calendar = new GregorianCalendar(dp
								.getYear(), dp.getMonth(), dp.getDayOfMonth(),
								gethour, getmin);

						long alarm_time = calendar.getTimeInMillis();

						alarmManager.set(AlarmManager.RTC_WAKEUP, alarm_time,
								operation);

						Toast.makeText(getActivity(),
								"Alarm is set successfully", Toast.LENGTH_SHORT)
								.show();

						final MyExpandableListAdapter mAdapter = new MyExpandableListAdapter();

						// Set Adapter to ExpandableList Adapter
						exlv.setAdapter(mAdapter);
						mAdapter.notifyDataSetChanged();
						FragmentManager fm = getFragmentManager();
						FragmentTransaction tx = fm.beginTransaction();
						tx.replace(R.id.frame_container,
								new Reminder_Fragment()).commit();
					}

				}
			}
		});

		return v;
	}

	private void showDatePickerDialog(View v) {
		DialogFragment newFragment = new DatePickerFragment();
		newFragment.show(getActivity().getFragmentManager(), "datePicker");
	}

	public void showTimePickerDialog(View v) {
		DialogFragment newFragment = new TimePickerFragment();
		newFragment.show(getActivity().getFragmentManager(), "timePicker");
	}

	private class DatePickerFragment extends DialogFragment implements
			DatePickerDialog.OnDateSetListener {

		@Override
		public Dialog onCreateDialog(Bundle savedInstanceState) {
			// Use the current date as the default date in the picker
			final Calendar c = Calendar.getInstance();
			year = c.get(Calendar.YEAR);
			month = c.get(Calendar.MONTH);
			day = c.get(Calendar.DAY_OF_MONTH);
			hour = c.get(Calendar.HOUR_OF_DAY);
			minute = c.get(Calendar.MINUTE);
			// Create a new instance of DatePickerDialog and return it
			DatePickerDialog d = new DatePickerDialog(getActivity(), this,
					year, month, day);
			dp = d.getDatePicker();
			// dp.setMinDate(c.getTimeInMillis());
			c.add(Calendar.DAY_OF_YEAR, 0);
			dp.setMinDate(c.getTimeInMillis());
			return d;
		}

		public void onDateSet(DatePicker view, int year, int month, int day) {
			// Do something with the date chosen by the user

			historyDate = day + "-" + (month + 1) + "-" + year;
			SimpleDateFormat required = new SimpleDateFormat("dd-MMM-yyyy");
			SimpleDateFormat currentFormat = new SimpleDateFormat("dd-MM-yyyy",
					Locale.ENGLISH);
			SimpleDateFormat dbdateFormat = new SimpleDateFormat("MM/dd/yyyy",
					Locale.ENGLISH);
			Date showdate = new Date();
			String displaydate;
			try {
				showdate = currentFormat.parse(historyDate);
				BOOKINGDATE = dbdateFormat.format(showdate);
				displaydate = required.format(showdate);
				date.setText(BOOKINGDATE);
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			// BOOKINGDATE = (month+1)+"/"+day+"/"+year;//date to pass in WS
			// btn_reminder.setVisibility(View.VISIBLE);

		}

	}

	private class TimePickerFragment extends DialogFragment implements
			TimePickerDialog.OnTimeSetListener {
		String aMpM = "AM";
		int currentHour;

		@Override
		public Dialog onCreateDialog(Bundle savedInstanceState) {
			// Use the current time as the default values for the picker
			final Calendar c = Calendar.getInstance();
			int hour = c.get(Calendar.HOUR_OF_DAY);
			int minute = c.get(Calendar.MINUTE);

			// Create a new instance of TimePickerDialog and return it
			return new TimePickerDialog(getActivity(), this, hour, minute,
					DateFormat.is24HourFormat(getActivity()));

		}

		public void onTimeSet(TimePicker view, int hourOfDay, int minute) {
			// Do something with the time chosen by the user
			// edit_servicetime.setText(hourOfDay+":"+minute);

			if (hourOfDay > 11) {
				aMpM = "PM";
			}

			// Make the 24 hour time format to 12 hour time format

			if (hourOfDay > 11) {
				currentHour = hourOfDay - 12;
			} else {
				currentHour = hourOfDay;
			}

			historyTime = String.valueOf(currentHour) + ":"
					+ String.valueOf(minute) + " " + aMpM;
			time.setText(historyTime);
			BOOKINGTIME = hourOfDay + ":" + minute;// time to pass in Ws
			gethour = hourOfDay;
			getmin = minute;
		}
	}

	public boolean isBefore(String today, String compareTo) {
		SimpleDateFormat formatter = new SimpleDateFormat("dd-MMM-yyyy");
		try {
			Date start = formatter.parse(today);
			Date end = formatter.parse(compareTo);

			if (start.after(end)) {
				return true;
			} else
				return false;
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			// # TMC 3.2.3 Log.d("isBefore ","error while creating date");
			return false;
		}
	}

	// ### get today's date
	public String getToday() {
		Calendar c = Calendar.getInstance();
		System.out.println("Current time => " + c.toString());

		SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		String today = df.format(c.getTime());
		return today;
	}

	private ArrayList<Reminder_Parent> buildDummyData() {
		// Creating ArrayList of type parent class to store parent class objects
		ArrayList<Reminder_Parent> list = new ArrayList<Reminder_Parent>();
		// final Reminder_Parent parent = new Reminder_Parent();
		String type = null;
		for (int i = 0; i < pList.size(); i++) {

			Log.d("plist size", pList.size() + "");
			Reminder_Parent parent = new Reminder_Parent();
			// Create parent class object
			parent.setRemindertitle(pList.get(i).remindertitle);
			parent.setChildren(new ArrayList<Reminder_Child>());
			type = pList.get(i).remindertitle;

			// Create Child class object
			for (int j = 0; j < insList.size(); j++) {
				if (type.equalsIgnoreCase(insList.get(j).reminder_type)) {
					Log.d("reminder type", type);
					final Reminder_Child child = new Reminder_Child();

					child.setRem_vehicleno(insList.get(j).rem_vehicleno);
					child.setReminder_type(insList.get(j).reminder_type);
					child.setRem_date(insList.get(j).rem_date
							+ insList.get(j).rem_time);
					parent.getChildren().add(insList.get(j));
				}

			}
			list.add(parent);

		}
		// Add Child class object to parent class object

		return list;
	}

	private void loadHosts(final ArrayList<Reminder_Parent> newParents) {
		if (newParents == null)
			return;

		parents = newParents;

		// Check for ExpandableListAdapter object

		// Create ExpandableListAdapter Object
		final MyExpandableListAdapter mAdapter = new MyExpandableListAdapter();

		// Set Adapter to ExpandableList Adapter
		exlv.setAdapter(mAdapter);
		mAdapter.notifyDataSetChanged();
	}

	private class MyExpandableListAdapter extends BaseExpandableListAdapter {

		private LayoutInflater inflater;

		public MyExpandableListAdapter() {
			// Create Layout Inflator
			inflater = LayoutInflater.from(getActivity());
		}

		// This Function used to inflate parent rows view

		@Override
		public View getGroupView(int groupPosition, boolean isExpanded,
				View convertView, ViewGroup parentView) {
			final Reminder_Parent parent = parents.get(groupPosition);

			// Inflate grouprow.xml file for parent rows
			convertView = inflater.inflate(R.layout.reminder_parent_row,
					parentView, false);

			// Get grouprow.xml file elements and set values

			((TextView) convertView.findViewById(R.id.remparenttitle))
					.setText(parent.getRemindertitle());

			if (isExpanded) {
				ImageView img = (ImageView) convertView
						.findViewById(R.id.imgarrow);
				img.setBackgroundResource(R.drawable.downarrow);
			}
			return convertView;
		}

		// This Function used to inflate child rows view
		@Override
		public View getChildView(final int groupPosition, final int childPosition,
				boolean isLastChild, View convertView, ViewGroup parentView) {
			final Reminder_Parent parent = parents.get(groupPosition);
			final Reminder_Child child = parent.getChildren()
					.get(childPosition);

			// Inflate childrow.xml file for child rows
			convertView = inflater.inflate(R.layout.reminder_child_row,
					parentView, false);

			// / Get childrow.xml file elements and set values
			((TextView) convertView.findViewById(R.id.remvehicleno))
					.setText(child.getRem_vehicleno());
			((TextView) convertView.findViewById(R.id.remtype)).setText(child
					.getReminder_type());
			((TextView) convertView.findViewById(R.id.txtdatetime))
					.setText(child.getRem_date() + child.getRem_time());
			ImageView imgdelet = (ImageView) convertView
					.findViewById(R.id.delete);
			imgdelet.setOnClickListener(new OnClickListener() {

				@Override
				public void onClick(View v) {
					// TODO Auto-generated method stub
					confirmAction(childPosition);
				}
			});

			return convertView;
		}

		@Override
		public Object getChild(int groupPosition, int childPosition) {
			Log.i("Childs", groupPosition + "=  getChild ==" + childPosition);
			return parents.get(groupPosition).getChildren().get(childPosition);
		}

		// Call when child row clicked
		@Override
		public long getChildId(int groupPosition, int childPosition) {
			/****** When Child row clicked then this function call *******/

			/*
			 * if( ChildClickStatus!=childPosition) { ChildClickStatus =
			 * childPosition;
			 * 
			 * Toast.makeText(getApplicationContext(), "Parent :"+groupPosition
			 * + " Child :"+childPosition , Toast.LENGTH_LONG).show(); }
			 */

			return childPosition;
		}

		@Override
		public int getChildrenCount(int groupPosition) {
			int size = 0;
			if (parents.get(groupPosition).getChildren() != null)
				size = parents.get(groupPosition).getChildren().size();
			return size;
		}

		@Override
		public Object getGroup(int groupPosition) {
			Log.i("Parent", groupPosition + "=  getGroup ");

			return parents.get(groupPosition);
		}

		@Override
		public int getGroupCount() {
			return parents.size();
		}

		// Call when parent row clicked
		@Override
		public long getGroupId(int groupPosition) {
			/*
			 * if(groupPosition==2 && ParentClickStatus!=groupPosition){
			 * 
			 * Alert to user Toast.makeText(getApplicationContext(),
			 * "Parent :"+groupPosition , Toast.LENGTH_LONG).show(); }
			 * 
			 * ParentClickStatus=groupPosition; if(ParentClickStatus==0)
			 * ParentClickStatus=-1;
			 */

			return groupPosition;

		}

		@Override
		public void notifyDataSetChanged() {
			// Refresh List rows
			super.notifyDataSetChanged();
		}

		@Override
		public boolean isEmpty() {
			return ((parents == null) || parents.isEmpty());
		}

		@Override
		public boolean isChildSelectable(int groupPosition, int childPosition) {
			return true;
		}

		@Override
		public boolean hasStableIds() {
			return true;
		}

		@Override
		public boolean areAllItemsEnabled() {
			return true;
		}

	}

	public int deleteUser(SQLiteDatabase mdb, String deleteMatch,
			String deleteMatch2, int arg3) {
		int opState = 0;

		try {
			// Log.d("Query -", "delete from " + User.TABLE_NAME + " where " +
			// "'" + User.COLUMN_NAME_USER_NAME +"' = " + "'" + deleteMatch
			// +"'");
			int delStatus = mdb.delete(Reminder.TABLE_NAME,
					Reminder.COLUMN_NAME_REMINDER_VNUMBER + " ='" + deleteMatch
							+ "' AND "
							+ Reminder.COLUMN_NAME_REGISTRATION_VTYPE + " ='"
							+ deleteMatch2 + "'", null);
			if (delStatus != 0) {
				Log.d("Rows Deleted ", " " + delStatus);

				opState = 1;
				return opState;
			} else {
				Log.d("Rows Deleted ", " None");
				opState = 0;
				return opState;
			}
		} catch (Exception e) {
			e.printStackTrace();
			Log.d("Error ", "Invalid SQL Query");
			opState = 0;
			return opState;

		}

	}

	private void confirmAction(final long arg3) {

		AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
		builder.setTitle("Delete Reminder ?");

		builder.setPositiveButton(android.R.string.yes,
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int id) {
						// TODO

						ReminderDBHelper mDbHelper;
						SQLiteDatabase mdb;

						mDbHelper = new ReminderDBHelper(getActivity());
						mdb = mDbHelper.getReadableDatabase();

						if (deleteUser(mdb, insList.get((int) arg3)
								.getReminder_type(), insList.get((int) arg3)
								.getRem_vehicleno(), (int) arg3) == 1) {

							ReminderDBHelper.loadReminders(getActivity());
							// userNames.remove(position);
							MyExpandableListAdapter mAdapter = new MyExpandableListAdapter();

							// Set Adapter to ExpandableList Adapter
							exlv.setAdapter(mAdapter);
							mAdapter.notifyDataSetChanged();
							FragmentManager fm = getFragmentManager();
							FragmentTransaction tx = fm.beginTransaction();
							tx.replace(R.id.frame_container,
									new Reminder_Fragment()).commit();
						}

						Toast.makeText(getActivity(), "Reminder deleted !",
								Toast.LENGTH_SHORT).show();
					}
				});
		builder.setNegativeButton(android.R.string.cancel,
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int id) {
						// TODO
						// Toast.makeText(getApplicationContext(),
						// "Reminder not deleted !", Toast.LENGTH_SHORT).show();
						dialog.dismiss();
					}
				});
		AlertDialog dialog = builder.create();
		dialog.show();
	}

}
=======
package com.ttl.customersocialapp;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Locale;
import java.util.Vector;

import android.app.AlarmManager;
import android.app.AlertDialog;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.app.DialogFragment;
import android.app.Fragment;
import android.app.FragmentManager;
import android.app.FragmentTransaction;
import android.app.PendingIntent;
import android.app.Service;
import android.app.TimePickerDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.text.format.DateFormat;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnKeyListener;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.BaseExpandableListAdapter;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ExpandableListView;
import android.widget.ExpandableListView.OnGroupExpandListener;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;

import com.ttl.adapter.AwsResponseCallback;
import com.ttl.helper.ReminderDBHelper;
import com.ttl.model.ReminderContract.Reminder;
import com.ttl.model.Reminder_Child;
import com.ttl.model.Reminder_Parent;
import com.ttl.model.ServiceHandler;
import com.ttl.model.UserDetails;
import com.ttl.webservice.AWS_WebServiceCall;
import com.ttl.webservice.Constants;

public class Reminder_Fragment extends Fragment {

	Spinner sipnner_vehicle_no, sipnner_remindertype;
	RelativeLayout reldate, reltime;

	private String[] vehicleno = { "Vehicle Number", "MH 20 U 7897",
			"MH 21 U 7897", "MH 22 U 7897" };
	private String[] remindertype = { "Reminder Type", "Next Service Date",
			"Insurance Renewal", "AMC Purchase/Renewal",
			"Extended Warranty Purchase/Renewal", "PUC Renewal",
			"Service Booking" };
	List<String> regnovalues = new ArrayList<String>();

	private ArrayList<Reminder_Parent> parents;
	ExpandableListView exlv;
	EditText date, time;
	View v;
	Button submit;
	static final int DATE_DIALOG_ID = 0;
	public static Vector<Reminder_Child> insList = new Vector<Reminder_Child>();
	public static Vector<Reminder_Parent> pList = new Vector<Reminder_Parent>();
	public static Vector<Reminder_Parent> filteredpList = new Vector<Reminder_Parent>();
	private int year, month, day, hour, minute;
	String BOOKINGDATE, BOOKINGTIME, historyDate, historyTime;
	DatePicker dp;
	int gethour, getmin;
	public static String spinnerno, spinnertype;
	Bundle bundle;
	String regno="" , timenext="" , datenext =""  ,remindtype = "";
	public static void loadReminders(Context ctx) {
		ReminderDBHelper mDbHelper;
		SQLiteDatabase mdb;

		mDbHelper = new ReminderDBHelper(ctx);
		mdb = mDbHelper.getReadableDatabase();

		insList = new Vector<Reminder_Child>();

		Cursor c = mdb.rawQuery("SELECT * FROM " + Reminder.TABLE_NAME, null);

		// ***
		insList.removeAllElements();
		pList.removeAllElements();
		if (c.moveToFirst()) {

			while (c.isAfterLast() == false) {

				String name = c.getString(1);
				Log.d(" reminder :", name);

				Reminder_Child i = new Reminder_Child();
				i.setReminder_type(c.getString(1));
				i.setRem_vehicleno(c.getString(0));
				i.setRem_date(c.getString(2));
				i.setRem_time(c.getString(3));

				Reminder_Fragment.insList.add(i);

				/*Reminder_Parent j = new Reminder_Parent();
				j.setRemindertitle(c.getString(0));
				Reminder_Fragment.pList.add(j);*/
				c.moveToNext();
			}
		}

		Cursor reminder_types = mdb.rawQuery("SELECT DISTINCT registration_number  FROM " + Reminder.TABLE_NAME,
				null);
	
		if (reminder_types.moveToFirst()) {
			while (reminder_types.isAfterLast() == false) {
				String name1 = reminder_types.getString(0);
				Log.d("remainder name", name1);
				Reminder_Parent p = new Reminder_Parent();

				p.setRemindertitle(reminder_types.getString(0));
				Log.d(" parent :", reminder_types.getString(0));
				Reminder_Fragment.pList.add(p);
				reminder_types.moveToNext();
			}
		}
		/*
		 * Cursor reminder_types =
		 * mdb.rawQuery("SELECT DISTINCT reminder_type  FROM " +
		 * Reminder.TABLE_NAME, null); if (reminder_types.moveToFirst()) { while
		 * (reminder_types.isAfterLast() == false) { Reminder_Parent p = new
		 * Reminder_Parent();
		 * 
		 * p.setRemindertitle(reminder_types.getString(0)); Log.d(" parent :",
		 * reminder_types.getString(0)); Reminder_Fragment.pList.add(p);
		 * reminder_types.moveToNext(); } }
		 */
	}

	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		v = inflater.inflate(R.layout.fragment_reminder, container, false);

		v.getRootView().setFocusableInTouchMode(true);
		v.getRootView().requestFocus();

		v.getRootView().setOnKeyListener(new OnKeyListener() {
			@Override
			public boolean onKey(View v, int keyCode, KeyEvent event) {
				if (event.getAction() == KeyEvent.ACTION_DOWN) {
					if (keyCode == KeyEvent.KEYCODE_BACK) {
						FragmentManager fm = getFragmentManager();
						FragmentTransaction tx = fm.beginTransaction();
						tx.replace(R.id.frame_container, new HomeFragment())
								.commit();
						return true;
					}
				}
				return false;
			}
		});
		
		bundle = getArguments();
		if (bundle != null) {
			Log.i("BUNDLE HomeFragment",
					bundle.getString("remindregNo") + " " + bundle.getString("remindTime")
							+ " " + bundle.getString("remindDate"));
			regno = bundle.getString("remindregNo");
			timenext = bundle.getString("remindTime");
			datenext = bundle.getString("remindDate");
			remindtype = bundle.getString("remindtype");
		} 
		if (new UserDetails().getRegNumberList().size() == 0) {
			FragmentManager fragmentManager = getFragmentManager();
			Fragment fragment = new HomeFragment();
			fragmentManager.beginTransaction()
					.replace(R.id.frame_container, fragment).commit();
		}
		loadReminders(getActivity());
		sipnner_vehicle_no = (Spinner) v.findViewById(R.id.sipnner_vehicle_no);
		int size = new UserDetails().getRegNumberList().size();
		regnovalues.add("Registration Number");
		for (int i = 0; i < size; i++) {
			regnovalues.add(new UserDetails().getRegNumberList().get(i)
					.get("registration_num"));
		}
		ArrayAdapter<String> sp_adapter = new ArrayAdapter<String>(
				getActivity(), R.layout.reminder_vehicle_sipnnerbgtitle,
				regnovalues);
		
		sp_adapter
				.setDropDownViewResource(R.layout.reminder_vehicle_sipnneritem);
		sipnner_vehicle_no.setAdapter(sp_adapter);
		for(int i = 0; i<regnovalues.size(); i++)
		{
			if(regno.equals(regnovalues.get(i)))
			{
				sipnner_vehicle_no.setSelection(i);
			}
		}
		sipnner_remindertype = (Spinner) v
				.findViewById(R.id.sipnner_remindertype);
		ArrayAdapter<String> sptype_adapter = new ArrayAdapter<String>(
				getActivity(),
				R.layout.reminder_type_sipnnerbgtitle, remindertype);
		sptype_adapter
				.setDropDownViewResource(R.layout.reminder_type_sipnneritem);

		sipnner_remindertype.setAdapter(sptype_adapter);
		
		for(int i = 0; i<remindertype.length; i++)
		{
			if(remindtype.equals(remindertype[i]))
			{
				sipnner_remindertype.setSelection(i);
			}
		}
		/*String req = "http://tmlmobilityservices.co.in:8080/CustomerApp_Restws/customerapp/productServices/getReminderTypes";
		new AWS_WebServiceCall(getActivity(), req, ServiceHandler.GET,
				Constants.getReminderTypes, new AwsResponseCallback() {

					@Override
					public void onResponseReceive(Object object) {
						// TODO Auto-generated method stub
						List<String> regtype = new ArrayList<String>();
						regtype = (List<String>) object;
						ArrayAdapter<String> sptype_adapter = new ArrayAdapter<String>(
								getActivity(),
								R.layout.reminder_type_sipnnerbgtitle, regtype);
						sptype_adapter
								.setDropDownViewResource(R.layout.reminder_type_sipnneritem);

						sipnner_remindertype.setAdapter(sptype_adapter);
						if(!(regno.equals("")))
						{
							sipnner_remindertype.setSelection(1);
						}
					}

					@Override
					public void onErrorReceive(String string) {
						// TODO Auto-generated method stub

					}
				}).execute();*/

		exlv = (ExpandableListView) v.findViewById(R.id.remlist);

		exlv.setOnGroupExpandListener(new OnGroupExpandListener() {
			int previousGroup = -1;

			@Override
			public void onGroupExpand(int groupPosition) {
				if (groupPosition != previousGroup)
					exlv.collapseGroup(previousGroup);
				previousGroup = groupPosition;

			}
		});

		final ArrayList<Reminder_Parent> dummyList = buildDummyData();
		loadHosts(dummyList);

		date = (EditText) v.findViewById(R.id.edtdate);
		
		date.setText(datenext);
		date.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v1) {
				// TODO Auto-generated method stub
				showDatePickerDialog(v1);
			}
		});

		time = (EditText) v.findViewById(R.id.edttime);
		time.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v1) {
				// TODO Auto-generated method stub
				showTimePickerDialog(v1);
			}
		});
		submit = (Button) v.findViewById(R.id.reminder_submit);
		submit.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				loadReminders(getActivity());
				String getdate = date.getText().toString();
				String gettime = time.getText().toString();
				spinnerno = sipnner_vehicle_no.getSelectedItem().toString();
				spinnertype = sipnner_remindertype.getSelectedItem().toString();
				Log.d(spinnerno, "number get");
				Log.d(spinnertype, "type get");

				if (getdate != null && getdate.length() == 0) {
					Toast.makeText(getActivity(), "Please enter date.",
							Toast.LENGTH_SHORT).show();
				} else if (isBefore(getToday(), getdate)) {
					Toast.makeText(getActivity(), "Please select future date.",
							Toast.LENGTH_SHORT).show();
				} else if (gettime != null && gettime.length() == 0) {
					Toast.makeText(getActivity(), "Please enter time.",
							Toast.LENGTH_SHORT).show();
				} else if (spinnerno.equalsIgnoreCase("Registration Number")) {
					Toast.makeText(getActivity(),
							"Please enter Registration Number.",
							Toast.LENGTH_SHORT).show();
				} else if (spinnertype.equalsIgnoreCase("Reminder type")) {
					Toast.makeText(getActivity(),
							"Please enter Reminder type.", Toast.LENGTH_SHORT)
							.show();
				} else {
					int result = ReminderDBHelper.insertReminder(spinnerno,
							spinnertype, getdate, gettime, getActivity());
					if (result > 0) {

						Intent i = new Intent(
								"com.ttl.customersocialapp.Notification");
						int repet = (int) System.currentTimeMillis();
						i.putExtra("remindertype", spinnerno +" "+spinnertype);
						/** Creating a Pending Intent */
						PendingIntent operation = PendingIntent.getActivity(
								getActivity(), repet, i,
								Intent.FLAG_ACTIVITY_NEW_TASK);
						
						AlarmManager alarmManager = (AlarmManager) getActivity()
								.getBaseContext().getSystemService(
										Service.ALARM_SERVICE);

						GregorianCalendar calendar = new GregorianCalendar(dp
								.getYear(), dp.getMonth(), dp.getDayOfMonth(),
								gethour, getmin);

						long alarm_time = calendar.getTimeInMillis();

						alarmManager.set(AlarmManager.RTC_WAKEUP, alarm_time,
								operation);

						Toast.makeText(getActivity(),
								"Alarm is set successfully", Toast.LENGTH_SHORT)
								.show();

						final MyExpandableListAdapter mAdapter = new MyExpandableListAdapter();

						// Set Adapter to ExpandableList Adapter
						exlv.setAdapter(mAdapter);
						mAdapter.notifyDataSetChanged();
						FragmentManager fm = getFragmentManager();
						FragmentTransaction tx = fm.beginTransaction();
						tx.replace(R.id.frame_container,
								new Reminder_Fragment()).commit();
					}

				}
			}
		});

		return v;
	}

	private void showDatePickerDialog(View v) {
		DialogFragment newFragment = new DatePickerFragment();
		newFragment.show(getActivity().getFragmentManager(), "datePicker");
	}

	public void showTimePickerDialog(View v) {
		DialogFragment newFragment = new TimePickerFragment();
		newFragment.show(getActivity().getFragmentManager(), "timePicker");
	}

	private class DatePickerFragment extends DialogFragment implements
			DatePickerDialog.OnDateSetListener {

		@Override
		public Dialog onCreateDialog(Bundle savedInstanceState) {
			// Use the current date as the default date in the picker
			final Calendar c = Calendar.getInstance();
			year = c.get(Calendar.YEAR);
			month = c.get(Calendar.MONTH);
			day = c.get(Calendar.DAY_OF_MONTH);
			hour = c.get(Calendar.HOUR_OF_DAY);
			minute = c.get(Calendar.MINUTE);
			// Create a new instance of DatePickerDialog and return it
			DatePickerDialog d = new DatePickerDialog(getActivity(), this,
					year, month, day);
			dp = d.getDatePicker();
			// dp.setMinDate(c.getTimeInMillis());
			c.add(Calendar.DAY_OF_YEAR, 0);
			dp.setMinDate(c.getTimeInMillis());
			return d;
		}

		public void onDateSet(DatePicker view, int year, int month, int day) {
			// Do something with the date chosen by the user

			historyDate = day + "-" + (month + 1) + "-" + year;
			SimpleDateFormat required = new SimpleDateFormat("dd-MMM-yyyy");
			SimpleDateFormat currentFormat = new SimpleDateFormat("dd-MM-yyyy",
					Locale.ENGLISH);
			SimpleDateFormat dbdateFormat = new SimpleDateFormat("MM/dd/yyyy",
					Locale.ENGLISH);
			Date showdate = new Date();
			String displaydate;
			try {
				showdate = currentFormat.parse(historyDate);
				BOOKINGDATE = dbdateFormat.format(showdate);
				displaydate = required.format(showdate);
				date.setText(BOOKINGDATE);
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			// BOOKINGDATE = (month+1)+"/"+day+"/"+year;//date to pass in WS
			// btn_reminder.setVisibility(View.VISIBLE);

		}

	}

	private class TimePickerFragment extends DialogFragment implements
			TimePickerDialog.OnTimeSetListener {
		String aMpM = "AM";
		int currentHour;

		@Override
		public Dialog onCreateDialog(Bundle savedInstanceState) {
			// Use the current time as the default values for the picker
			final Calendar c = Calendar.getInstance();
			int hour = c.get(Calendar.HOUR_OF_DAY);
			int minute = c.get(Calendar.MINUTE);

			// Create a new instance of TimePickerDialog and return it
			return new TimePickerDialog(getActivity(), this, hour, minute,
					DateFormat.is24HourFormat(getActivity()));

		}

		public void onTimeSet(TimePicker view, int hourOfDay, int minute) {
			// Do something with the time chosen by the user
			// edit_servicetime.setText(hourOfDay+":"+minute);

			if (hourOfDay > 11) {
				aMpM = "PM";
			}

			// Make the 24 hour time format to 12 hour time format

			if (hourOfDay > 11) {
				currentHour = hourOfDay - 12;
			} else {
				currentHour = hourOfDay;
			}

			historyTime = String.valueOf(currentHour) + ":"
					+ String.valueOf(minute) + " " + aMpM;
			time.setText(historyTime);
			BOOKINGTIME = hourOfDay + ":" + minute;// time to pass in Ws
			gethour = hourOfDay;
			getmin = minute;
		}
	}

	public boolean isBefore(String today, String compareTo) {
		SimpleDateFormat formatter = new SimpleDateFormat("dd-MMM-yyyy");
		try {
			Date start = formatter.parse(today);
			Date end = formatter.parse(compareTo);

			if (start.after(end)) {
				return true;
			} else
				return false;
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			// # TMC 3.2.3 Log.d("isBefore ","error while creating date");
			return false;
		}
	}

	// ### get today's date
	public String getToday() {
		Calendar c = Calendar.getInstance();
		System.out.println("Current time => " + c.toString());

		SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		String today = df.format(c.getTime());
		return today;
	}

	private ArrayList<Reminder_Parent> buildDummyData() {
		// Creating ArrayList of type parent class to store parent class objects
		ArrayList<Reminder_Parent> list = new ArrayList<Reminder_Parent>();
		// final Reminder_Parent parent = new Reminder_Parent();
		String type = null;
		for (int i = 0; i < pList.size(); i++) {

			Log.d("plist size", pList.size() + "");
			Reminder_Parent parent = new Reminder_Parent();
			// Create parent class object
			parent.setRemindertitle(pList.get(i).remindertitle);
			parent.setChildren(new ArrayList<Reminder_Child>());
			type = pList.get(i).remindertitle;

			// Create Child class object
			for (int j = 0; j < insList.size(); j++) {
				if (type.equalsIgnoreCase(insList.get(j).reminder_type)) {
					Log.d("reminder type", type);
					final Reminder_Child child = new Reminder_Child();

					child.setRem_vehicleno(insList.get(j).rem_vehicleno);
					child.setReminder_type(insList.get(j).reminder_type);
					child.setRem_date(insList.get(j).rem_date
							+ insList.get(j).rem_time);
					parent.getChildren().add(insList.get(j));
				}

			}
			list.add(parent);

		}
		// Add Child class object to parent class object

		return list;
	}

	private void loadHosts(final ArrayList<Reminder_Parent> newParents) {
		if (newParents == null)
			return;

		parents = newParents;

		// Check for ExpandableListAdapter object

		// Create ExpandableListAdapter Object
		final MyExpandableListAdapter mAdapter = new MyExpandableListAdapter();

		// Set Adapter to ExpandableList Adapter
		exlv.setAdapter(mAdapter);
		mAdapter.notifyDataSetChanged();
	}

	private class MyExpandableListAdapter extends BaseExpandableListAdapter {

		private LayoutInflater inflater;

		public MyExpandableListAdapter() {
			// Create Layout Inflator
			inflater = LayoutInflater.from(getActivity());
		}

		// This Function used to inflate parent rows view

		@Override
		public View getGroupView(int groupPosition, boolean isExpanded,
				View convertView, ViewGroup parentView) {
			final Reminder_Parent parent = parents.get(groupPosition);

			// Inflate grouprow.xml file for parent rows
			convertView = inflater.inflate(R.layout.reminder_parent_row,
					parentView, false);

			// Get grouprow.xml file elements and set values

			((TextView) convertView.findViewById(R.id.remparenttitle))
					.setText(parent.getRemindertitle());

			if (isExpanded) {
				ImageView img = (ImageView) convertView
						.findViewById(R.id.imgarrow);
				img.setBackgroundResource(R.drawable.downarrow);
			}
			return convertView;
		}

		// This Function used to inflate child rows view
		@Override
		public View getChildView(final int groupPosition, final int childPosition,
				boolean isLastChild, View convertView, ViewGroup parentView) {
			final Reminder_Parent parent = parents.get(groupPosition);
			final Reminder_Child child = parent.getChildren()
					.get(childPosition);

			// Inflate childrow.xml file for child rows
			convertView = inflater.inflate(R.layout.reminder_child_row,
					parentView, false);

			// / Get childrow.xml file elements and set values
			((TextView) convertView.findViewById(R.id.remvehicleno))
					.setText(child.getRem_vehicleno());
			((TextView) convertView.findViewById(R.id.remtype)).setText(child
					.getReminder_type());
			((TextView) convertView.findViewById(R.id.txtdatetime))
					.setText(child.getRem_date() + child.getRem_time());
			ImageView imgdelet = (ImageView) convertView
					.findViewById(R.id.delete);
			imgdelet.setOnClickListener(new OnClickListener() {

				@Override
				public void onClick(View v) {
					// TODO Auto-generated method stub
					confirmAction(childPosition);
				}
			});

			return convertView;
		}

		@Override
		public Object getChild(int groupPosition, int childPosition) {
			Log.i("Childs", groupPosition + "=  getChild ==" + childPosition);
			return parents.get(groupPosition).getChildren().get(childPosition);
		}

		// Call when child row clicked
		@Override
		public long getChildId(int groupPosition, int childPosition) {
			/****** When Child row clicked then this function call *******/

			/*
			 * if( ChildClickStatus!=childPosition) { ChildClickStatus =
			 * childPosition;
			 * 
			 * Toast.makeText(getApplicationContext(), "Parent :"+groupPosition
			 * + " Child :"+childPosition , Toast.LENGTH_LONG).show(); }
			 */

			return childPosition;
		}

		@Override
		public int getChildrenCount(int groupPosition) {
			int size = 0;
			if (parents.get(groupPosition).getChildren() != null)
				size = parents.get(groupPosition).getChildren().size();
			return size;
		}

		@Override
		public Object getGroup(int groupPosition) {
			Log.i("Parent", groupPosition + "=  getGroup ");

			return parents.get(groupPosition);
		}

		@Override
		public int getGroupCount() {
			return parents.size();
		}

		// Call when parent row clicked
		@Override
		public long getGroupId(int groupPosition) {
			/*
			 * if(groupPosition==2 && ParentClickStatus!=groupPosition){
			 * 
			 * Alert to user Toast.makeText(getApplicationContext(),
			 * "Parent :"+groupPosition , Toast.LENGTH_LONG).show(); }
			 * 
			 * ParentClickStatus=groupPosition; if(ParentClickStatus==0)
			 * ParentClickStatus=-1;
			 */

			return groupPosition;

		}

		@Override
		public void notifyDataSetChanged() {
			// Refresh List rows
			super.notifyDataSetChanged();
		}

		@Override
		public boolean isEmpty() {
			return ((parents == null) || parents.isEmpty());
		}

		@Override
		public boolean isChildSelectable(int groupPosition, int childPosition) {
			return true;
		}

		@Override
		public boolean hasStableIds() {
			return true;
		}

		@Override
		public boolean areAllItemsEnabled() {
			return true;
		}

	}

	public int deleteUser(SQLiteDatabase mdb, String deleteMatch,
			String deleteMatch2, int arg3) {
		int opState = 0;

		try {
			// Log.d("Query -", "delete from " + User.TABLE_NAME + " where " +
			// "'" + User.COLUMN_NAME_USER_NAME +"' = " + "'" + deleteMatch
			// +"'");
			int delStatus = mdb.delete(Reminder.TABLE_NAME,
					Reminder.COLUMN_NAME_REMINDER_VNUMBER + " ='" + deleteMatch
							+ "' AND "
							+ Reminder.COLUMN_NAME_REGISTRATION_VTYPE + " ='"
							+ deleteMatch2 + "'", null);
			if (delStatus != 0) {
				Log.d("Rows Deleted ", " " + delStatus);

				opState = 1;
				return opState;
			} else {
				Log.d("Rows Deleted ", " None");
				opState = 0;
				return opState;
			}
		} catch (Exception e) {
			e.printStackTrace();
			Log.d("Error ", "Invalid SQL Query");
			opState = 0;
			return opState;

		}

	}

	private void confirmAction(final long arg3) {

		AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
		builder.setTitle("Delete Reminder ?");

		builder.setPositiveButton(android.R.string.yes,
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int id) {
						// TODO

						ReminderDBHelper mDbHelper;
						SQLiteDatabase mdb;

						mDbHelper = new ReminderDBHelper(getActivity());
						mdb = mDbHelper.getReadableDatabase();

						if (deleteUser(mdb, insList.get((int) arg3)
								.getReminder_type(), insList.get((int) arg3)
								.getRem_vehicleno(), (int) arg3) == 1) {

							ReminderDBHelper.loadReminders(getActivity());
							// userNames.remove(position);
							MyExpandableListAdapter mAdapter = new MyExpandableListAdapter();

							// Set Adapter to ExpandableList Adapter
							exlv.setAdapter(mAdapter);
							mAdapter.notifyDataSetChanged();
							FragmentManager fm = getFragmentManager();
							FragmentTransaction tx = fm.beginTransaction();
							tx.replace(R.id.frame_container,
									new Reminder_Fragment()).commit();
						}

						Toast.makeText(getActivity(), "Reminder deleted !",
								Toast.LENGTH_SHORT).show();
					}
				});
		builder.setNegativeButton(android.R.string.cancel,
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int id) {
						// TODO
						// Toast.makeText(getApplicationContext(),
						// "Reminder not deleted !", Toast.LENGTH_SHORT).show();
						dialog.dismiss();
					}
				});
		AlertDialog dialog = builder.create();
		dialog.show();
	}

}
>>>>>>> TMSC QA 3.4V
